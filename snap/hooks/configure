#!/bin/bash

# this is a little hackish, but reads better to use string concatenation 
# to build the list of services than have a long string 
ALL_SERVICES=""

# base services
ALL_SERVICES="$ALL_SERVICES consul"
ALL_SERVICES="$ALL_SERVICES redis"

# core services
ALL_SERVICES="$ALL_SERVICES core-data"
ALL_SERVICES="$ALL_SERVICES core-metadata"
ALL_SERVICES="$ALL_SERVICES core-command"

# support services
ALL_SERVICES="$ALL_SERVICES support-notifications"
ALL_SERVICES="$ALL_SERVICES support-scheduler"

# app-services
ALL_SERVICES="$ALL_SERVICES app-service-configurable"

# device services
ALL_SERVICES="$ALL_SERVICES device-virtual"

# security services
ALL_SERVICES="$ALL_SERVICES security-secret-store"
ALL_SERVICES="$ALL_SERVICES security-proxy"

# sys mgmt services
ALL_SERVICES="$ALL_SERVICES sys-mgmt-agent"

# kuiper
ALL_SERVICES="$ALL_SERVICES kuiper"

# services that use the database
DB_SERVICES=(core-command core-data core-metadata support-notifications support-scheduler)

# handle_svc will either turn a service off or on and set the associated
# config item
# first arg is the service, second is the state to put it in
handle_svc () {
    case "$2" in 
    "off")
        snapctl stop --disable "$SNAP_NAME.$1"
        snapctl set "$1"=off
        ;;
    "on")
        snapctl start --enable "$SNAP_NAME.$1"
        snapctl set "$1"=on
        ;;
    "")
        # no setting for it, ignore and continue
        ;;
    *)
        echo "invalid setting $2 for service $1"
        exit 1;;
    esac
}

restart_db_services () {
    # since the configuration files have been modified, those
    # changes need to be progpogated into relevant services, so
    # restart the services with updated configuration if they were
    # already running
    for svc in ${DB_SERVICES[*]}; do
        status=`snapctl services "$SNAP_NAME.$svc" | grep -o "^active"`

        if [ "$status" = "active" ]; then
            snapctl restart "$SNAP_NAME.$svc"
        fi
    done
}

update_consul_db_type () {
    curl -s --request PUT --data "$2" \
        http://localhost:8500/v1/kv/edgex/core/1.0/edgex-"$1"/Databases/Primary/Type

    curl -s --request PUT --data "$3" \
        http://localhost:8500/v1/kv/edgex/core/1.0/edgex-"$1"/Databases/Primary/Port
}

for key in $ALL_SERVICES; do
    # get the config key for the service
    status=$(snapctl get "$key")
    case $key in 
        device*)
            # the device services are all using the device-sdk-go which waits
            # for core-data and core-metadata to come online, so if we are 
            # enabling a device service, we should also enable those services
            if [ "$status" = "on" ]; then
                handle_svc "core-data" "on"
                handle_svc "core-metadata" "on"
            fi
            # handle the service too
            handle_svc "$key" "$status"
            ;;
        kuiper)
            # if we are turning kuiper on, make sure
            # app-service-configurable is on too
            if [ "$status" = "on" ]; then
                handle_svc "app-service-configurable" "on"
	    elif [ "$status" = "off" ]; then
                handle_svc "app-service-configurable" "off"
	    fi
            # handle the service too
            handle_svc "$key" "$status"
            ;;
        security-proxy-setup|security-secretstore-setup)
            # it doesn't make any sense to disable the *-worker daemons since 
            # they are just oneshot daemons that run after other daemons, so
            # just ignore this request
            ;;
        security-proxy)
            # the security-proxy consists of the following base services
            # - kong
            # - postgres (because kong requires it)
            handle_svc "postgres" "$status"
            handle_svc "kong-daemon" "$status"
            handle_svc "security-proxy-setup" "$status"
            # additionally, the security-proxy needs to use the following
            # services:
            # - vault (because security-proxy-setup will access/store secrets in vault)
            # - security-secretstore-setup
            # so if we are turning the security-api-gateway on, then turn 
            # those services on too
            if [ "$status" = "on" ]; then
                handle_svc "vault" "on"
                handle_svc "security-secretstore-setup" "on"
            fi
            ;;
        security-secret-store)
            # the security-api-gateway consists of the following services:
            # - vault
            # - security-secretstore-setup
            # and since the security-api-gateway needs to be able to use 
            # security-secret-store, we also need to turn off those services
            # if this one is disabled
            if [ "$status" = "off" ]; then
                handle_svc "postgres" "off"
                handle_svc "kong-daemon" "off"
                handle_svc "security-proxy-setup" "off" 
            fi
            handle_svc "vault" "$status"
            handle_svc "security-secretstore-setup" "$status"
            ;;
        *)
            # default case for all other services just enable/disable the service using
            # snapd/systemd
            # if the service is meant to be off, then disable it
            handle_svc "$key" "$status"
            ;;
    esac
done

# handle usage of database provider
#
# FIXME (HANOI)
#
# The code to switch dbtype has been removed, however
# I'm leaving the snapctl get to retrive the dbtype, as
# this may be leveraged in the configure hook of Hanio
# to block refresh from Geneva to Hanoi if the dbtype
# is set to 'mongodb' and the project has not yet provided
# a database migration script...
dbProvider=$(snapctl get dbtype)
PREV_DB_PROVIDER_FILE="$SNAP_DATA/prevdbtype"
