#!/bin/bash

# this is a little hackish, but reads better to use string concatenation 
# to build the list of services than have a long string 
ALL_SERVICES=""

# base services
ALL_SERVICES="$ALL_SERVICES consul"
ALL_SERVICES="$ALL_SERVICES mongod"
ALL_SERVICES="$ALL_SERVICES mongo-worker"
ALL_SERVICES="$ALL_SERVICES redis"

# core services
ALL_SERVICES="$ALL_SERVICES core-data"
ALL_SERVICES="$ALL_SERVICES core-metadata"
ALL_SERVICES="$ALL_SERVICES core-config-seed"
ALL_SERVICES="$ALL_SERVICES core-command"

# support services
ALL_SERVICES="$ALL_SERVICES support-notifications"
ALL_SERVICES="$ALL_SERVICES support-logging"
ALL_SERVICES="$ALL_SERVICES support-scheduler"
ALL_SERVICES="$ALL_SERVICES support-rulesengine"

# export services
ALL_SERVICES="$ALL_SERVICES export-distro"
ALL_SERVICES="$ALL_SERVICES export-client"

# device services
ALL_SERVICES="$ALL_SERVICES device-random"
ALL_SERVICES="$ALL_SERVICES device-virtual"

# security services
ALL_SERVICES="$ALL_SERVICES security-secret-store"
ALL_SERVICES="$ALL_SERVICES security-api-gateway"

# handle_svc will either turn a service off or on and set the associated
# config item
# first arg is the service, second is the state to put it in
handle_svc () {
    case "$2" in 
    "off")
        snapctl stop --disable "$SNAP_NAME.$1"
        snapctl set "$1"=off
        ;;
    "on")
        snapctl start --enable "$SNAP_NAME.$1"
        snapctl set "$1"=on
        ;;
    "")
        # no setting for it, ignore and continue
        ;;
    *)
        echo "invalid setting $2 for service $1"
        exit 1;;
    esac
}

for key in $ALL_SERVICES; do
    # get the config key for the service
    status=$(snapctl get "$key")
    case $key in 
        device*)
            # the device services are all using the device-sdk-go which waits
            # for core-data and core-metadata to come online, so if we are 
            # enabling a device service, we should also enable those services
            if [ "$status" = "on" ]; then
                handle_svc "core-data" "on"
                handle_svc "core-metadata" "on"
            fi
            # handle the service too
            handle_svc "$key" "$status"
            ;;
        mongo-worker|edgexproxy|vault-worker)
            # it doesn't make any sense to disable the *-worker daemons since 
            # they are just oneshot daemons that run after other daemons, so
            # just ignore this request
            ;;
        security-api-gateway)
            # the security-api-gateway consists of the following base services
            # - kong
            # - cassandra (because kong requires it)
            # - edgexproxy
            handle_svc "cassandra" "$status"
            handle_svc "kong-daemon" "$status"
            handle_svc "edgexproxy" "$status"
            # additionally, the secrity-api-gateway needs to use the following
            # services:
            # - vault (because edgexproxy will access/store secrets in vault)
            # - vault-worker
            # so if we are turning the security-api-gateway on, then turn 
            # those services on too
            if [ "$status" = "on" ]; then
                handle_svc "vault" "on"
                handle_svc "vault-worker" "on"
            fi
            ;;
        security-secret-store)
            # the security-api-gateway consists of the following services:
            # - vault
            # - vault-worker
            # and since the security-api-gateway needs to be able to use 
            # security-secret-store, we also need to turn off those services
            # if this one is disabled
            if [ "$status" = "off" ]; then
                handle_svc "cassandra" "off"
                handle_svc "kong-daemon" "off"
                handle_svc "edgexproxy" "off"
            fi
            handle_svc "vault" "$status"
            handle_svc "vault-worker" "$status"
            ;;
        *)
            # default case for all other services just enable/disable the service using
            # snapd/systemd
            # if the service is meant to be off, then disable it
            handle_svc "$key" "$status"
            ;;
    esac
done

# handle usage of database provider
dbProvider=$(snapctl get dbtype)
PREV_DB_PROVIDER_FILE="$SNAP_DATA/prevdbtype"
if [ -f "$PREV_DB_PROVIDER_FILE" ]; then
    echo "" > "$PREV_DB_PROVIDER_FILE"
fi
case "$dbProvider" in 
    "")
        # not set, don't do anything 
        ;;
    "redis")
        # dbtype is set to redis, see what the previous value of dbtype was
        prevDBtype=$(cat "$PREV_DB_PROVIDER_FILE")
        if [ "$prevDBtype" != "redis" ]; then
            # change from previous database provider to redis
            # first change the configuration.toml files for the following
            # services:
            # * core-data
            # * core-metadata
            # * export-client
            # * support-notifications
            # * support-scheduler
            for svc in core-data core-metadata export-client support-notifications support-scheduler; do
                configFile=$SNAP_DATA/config/$svc/res/configuration.toml
                toml2json --preserve-key-order "$configFile" | \
                    jq -r '.Databases.Primary.Type = "redisdb" | .Databases.Primary.Port = 6379' | \
                    json2toml --preserve-key-order > "$configFile.tmp"
                mv "$configFile.tmp" "$configFile"
            done

            # we also need to ensure that the support-logging is set to 
            # use file based logging persistence
            configFile=$SNAP_DATA/config/support-logging/res/configuration.toml
            toml2json --preserve-key-order "$configFile" | \
                jq -r '.Writable.Persistence = "file"' | \
                json2toml --preserve-key-order > "$configFile.tmp"
            mv "$configFile.tmp" "$configFile"

            # turn mongod and mongo-worker off
            handle_svc "mongod" "off"
            handle_svc "mongo-worker" "off"

            # turn redis on
            handle_svc "redis" "on"

            # since the configuration files have been modified, those 
            # changes need to be progpogated into relevant services, so 
            # restart the services with updated configuration if they were 
            # already running
            # note support-logging is here too due to the file Persistence
            "$SNAP/bin/push-config.sh" core-data core-metadata export-client support-notifications support-scheduler support-logging
        fi
        # save the database provider as redis for next invocation
        echo "redis" > "$PREV_DB_PROVIDER_FILE"
        ;;
    "mongodb")
        # dbtype is set to mongodb, see what the previous value of dbtype was
        prevDBtype=$(cat "$PREV_DB_PROVIDER_FILE")
        if [ "$prevDBtype" != "mongodb" ]; then
            # change from previous database provider to mongodb
            # first change the configuration.toml files for the following
            # services:
            # * core-data
            # * core-metadata
            # * export-client
            # * support-notifications
            # * support-scheduler
            for svc in core-data core-metadata export-client support-notifications support-scheduler; do
                configFile=$SNAP_DATA/config/$svc/res/configuration.toml
                toml2json --preserve-key-order "$configFile" | \
                    jq -r '.Databases.Primary.Type = "mongodb" | .Databases.Primary.Port = 27017' | \
                    json2toml --preserve-key-order > "$configFile.tmp"
                mv "$configFile.tmp" "$configFile"
            done
            
            # turn redis off
            handle_svc "redis" "off"
            
            # turn mongod and mongo-worker on
            handle_svc "mongod" "on"
            handle_svc "mongo-worker" "on"

            # since the configuration files have been modified, those 
            # changes need to be progpogated into relevant services, so 
            # restart the services with updated configuration if they were 
            # already running
            "$SNAP/bin/push-config.sh" core-data core-metadata export-client support-notifications support-scheduler
        fi

        # save the database provider as mongodb for next invocation
        echo "mongodb" > "$PREV_DB_PROVIDER_FILE"
        ;;
    *)
        echo "invalid setting for dbtype: $dbProvider"
        exit 1
        ;;
esac
