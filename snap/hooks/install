#!/bin/bash -e

# LD_LIBRARY_PATH isn't properly initialized for hooks as snapcraft does for apps, so this 
# has to be constructed manually
# Note - the env var SNAP_LIBRARY_PATH is set by snapd for hooks, so it can be referenced here
# This is mainly necessary so we can use jq from the snap which needs libs from inside the snap
export PATH="$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH"
# for LD_LIBRARY_PATH, we need to handle the different architecture paths
case $(arch) in
    x86_64)
        MULTI_ARCH_PATH="x86_64-linux-gnu";;
    arm*)
        MULTI_ARCH_PATH="arm-linux-gnueabihf";;
    aarch64)
        MULTI_ARCH_PATH="aarch64-linux-gnu";;
    *)
        echo "architecture $ARCH not supported"
        exit 1
        ;;
esac
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$SNAP/lib:$SNAP/usr/lib:$SNAP/lib/$MULTI_ARCH_PATH:$SNAP/usr/lib/$MULTI_ARCH_PATH"
export LD_LIBRARY_PATH=$SNAP_LIBRARY_PATH:$LD_LIBRARY_PATH

# install all the config files from $SNAP/config/SERVICE/res/configuration.toml 
# into $SNAP_DATA/config
mkdir -p ${SNAP_DATA}/config
for service in security-api-gateway security-secret-store core-command config-seed core-data core-metadata export-client export-distro support-logging support-notifications support-scheduler sys-mgmt-agent device-modbus device-mqtt device-random; do
    if [ ! -f "${SNAP_DATA}/config/${service}/res/configuration.toml" ]; then
        mkdir -p "${SNAP_DATA}/config/${service}/res"
        cp ${SNAP}/config/${service}/res/configuration.toml "${SNAP_DATA}/config/${service}/res/configuration.toml"
        # do replacement of the $SNAP, $SNAP_DATA, $SNAP_COMMON environment variables in the config files
        sed -i -e "s@\$SNAP_COMMON@$SNAP_COMMON@g" \
            -e "s@\$SNAP_DATA@$SNAP_DATA@g" \
            -e "s@\$SNAP@$SNAP@g" \
            "${SNAP_DATA}/config/${service}/res/configuration.toml"
    fi
done

# handle device-random device profile
cp ${SNAP}/config/device-random/res/device.random.yaml "${SNAP_DATA}/config/device-random/res/device.random.yaml"

# also handle java services' application.properties
for jsvc in edgex-support-rulesengine; do
    if [ ! -f "${SNAP_DATA}/config/config-seed/res/properties/$jsvc/application.properties" ]; then
        mkdir -p "${SNAP_DATA}/config/config-seed/res/properties/$jsvc"
        cp "${SNAP}/config/config-seed/res/properties/$jsvc/application.properties" "${SNAP_DATA}/config/config-seed/res/properties/$jsvc/application.properties"
        # also replace SNAP_DATA and SNAP_COMMON in the application files
        sed -i -e "s@\$SNAP_COMMON@$SNAP_COMMON@g" -e "s@\$SNAP_DATA@$SNAP_DATA@g" "${SNAP_DATA}/config/config-seed/res/properties/$jsvc/application.properties"
    fi
done

# create support-rulesengine directories for templates/rules
if [ ! -f "${SNAP_DATA}/support-rulesengine/templates" ]; then
    mkdir -p "${SNAP_DATA}/support-rulesengine/templates"
    cp "${SNAP}/jar/support-rulesengine/templates/rule-template.drl" "${SNAP_DATA}/support-rulesengine/templates/rule-template.drl"
fi

if [ ! -f "${SNAP_DATA}/support-rulesengine/rules" ]; then
    mkdir -p "${SNAP_DATA}/support-rulesengine/rules"
fi


# for security-secret-store, copy the hcl config files used with vault
for hclType in admin kong; do 
    if [ ! -f "${SNAP_DATA}/config/security-secret-store/res/vault-policy-${hclType}.hcl" ]; then
        mkdir -p "${SNAP_DATA}/config/security-secret-store/res"
        cp "${SNAP}/config/security-secret-store/res/vault-policy-${hclType}.hcl" "${SNAP_DATA}/config/security-secret-store/res/vault-policy-${hclType}.hcl"
    fi
done

# for the kong pki setup file, we need to set the hostname as localhost
# and then set the directory to store the cert files as $SNAP_DATA/kong/ssl
if [ ! -f "${SNAP_DATA}/config/security-secret-store/pkisetup-kong.json" ]; then
    mkdir -p ${SNAP_DATA}/config/security-secret-store
    CONFIG_FILE_PATH="config/security-secret-store/pkisetup-kong.json"
    # replace the hostname with localhost using jq
    jq --arg WORKDIR "$SNAP_DATA/vault" \
        '.x509_tls_server_parameters.tls_host = "localhost" | .pki_setup_dir = "pki" | .working_dir  = $WORKDIR' \
        "${SNAP}/${CONFIG_FILE_PATH}" > "${SNAP_DATA}/${CONFIG_FILE_PATH}.tmp"
    mv "${SNAP_DATA}/${CONFIG_FILE_PATH}.tmp" "${SNAP_DATA}/${CONFIG_FILE_PATH}"
    chmod 600 "${SNAP_DATA}/config/security-secret-store/pkisetup-kong.json"
fi

# for vault, we also need to set the hostname as localhost
# and then set the directory to store the cert files as $SNAP_DATA/vault/pki
if [ ! -f "${SNAP_DATA}/config/security-secret-store/pkisetup-vault.json" ]; then
    mkdir -p ${SNAP_DATA}/config/security-secret-store
    CONFIG_FILE_PATH="config/security-secret-store/pkisetup-vault.json"
    # modify the parameters using jq
    jq --arg WORKDIR "$SNAP_DATA/vault" \
        '.x509_tls_server_parameters.tls_host = "localhost" | .pki_setup_dir = "pki" | .working_dir  = $WORKDIR' \
        "${SNAP}/${CONFIG_FILE_PATH}" > "${SNAP_DATA}/${CONFIG_FILE_PATH}.tmp"
    mv "${SNAP_DATA}/${CONFIG_FILE_PATH}.tmp" "${SNAP_DATA}/${CONFIG_FILE_PATH}"
    chmod 600 "${SNAP_DATA}/config/security-secret-store/pkisetup-vault.json"
fi


# ensure vault pki directory exists
mkdir -p "${SNAP_DATA}/vault/pki"

# touch all the kong log files to ensure they exist
mkdir -p "$SNAP_COMMON/logs"
for type in proxy admin; do
    for op in access error; do
        touch $SNAP_COMMON/logs/kong-$type-$op.log
    done
done

# the vault config needs to be generated with sed, replacing $SNAP_DATA in the file 
# with the actual absolute directory
# note that if anyone ever somehow has a "@" in their $SNAP_DATA this will likely break :-/
if [ ! -f "${SNAP_DATA}/config/security-secret-store/vault-config.json" ]; then
    mkdir -p ${SNAP_DATA}/config/security-secret-store
    sed "s@\$SNAP_DATA@$SNAP_DATA@g" ${SNAP}/config/security-secret-store/vault-config.json.in > ${SNAP_DATA}/config/security-secret-store/vault-config.json
    chmod 644 ${SNAP_DATA}/config/security-secret-store/vault-config.json
fi

# the kong config file needs to be generated with 3 changes from the default one included in the snap
# - we set the prefix to be $SNAP_DATA/kong as an absolute path (note that this has to be done here in the install hook)
# - we set the nginx user to be root
# - we set the database used to cassandra
if [ ! -f ${SNAP_DATA}/config/security-api-gateway/kong.conf ]; then
    mkdir -p "${SNAP_DATA}/config/security-api-gateway"
    cp "${SNAP}/config/security-api-gateway/kong.conf" "${SNAP_DATA}/config/security-api-gateway/kong.conf"
    # replace the default prefix setting with an absolute path using $SNAP_DATA
    # note that if anyone ever has a "@" in their $SNAP_DATA this will likely fail
    sed -i "s@#prefix = /usr/local/kong/@prefix = ${SNAP_DATA}/kong@" ${SNAP_DATA}/config/security-api-gateway/kong.conf

    # also replace the default nginx user/group to be root
    sed -i "s@#nginx_user = nobody nobody@nginx_user = root root@" ${SNAP_DATA}/config/security-api-gateway/kong.conf

    # finally set the make database to be cassandra
    sed -i "s@#database = postgres@database = cassandra@" ${SNAP_DATA}/config/security-api-gateway/kong.conf
fi

# finally, disable services in the snap that aren't meant to come up by default
# by default, we want the export-*, support-*, and device-* services off.
for svc in export-distro export-client support-notifications support-scheduler support-logging support-rulesengine device-modbus device-mqtt device-random; do
    snapctl stop --disable edgexfoundry.$svc
done
