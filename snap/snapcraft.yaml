name: edgexfoundry
base: core20
type: app
adopt-info: metadata

# Different epochs prevent refreshes between major versions of EdgeX due
# to continued configuration changes.
#
# delhi: 0, edinburgh: 1, fuji: 2, geneva: 3, hanoi: 4, ireland/jakarta: 5, kamakura:6 
epoch: 6

architectures:
  - build-on: arm64
  - build-on: amd64

# we need snapd2.45 for setpriv policy allowing it's usage of
# setgroups(0,<not NUL>)
# see https://github.com/snapcore/snapd/pull/8220 for full details
assumes: [snapd2.45]

# postgres needs to run as the snap_daemon user
system-usernames:
  snap_daemon: shared

# Ideally snapcraft would generate this command-chain spec for the hooks
# automatically, but that doesn't currently work, see
# https://bugs.launchpad.net/snapd/+bug/1824255
# In the meantime, make sure that the snapcraft-runner gets generated by
# the apps by specifying the full adapter in at least one of the apps, and
# manually craft the command-chain for the configure hook here to passthrough
# to the snap.yaml
# All of this is necessary so we can use jq and other tools from inside the
# snap in the configure and install hooks
# See also https://bugs.launchpad.net/snapcraft/+bug/1848381 for specifying
# environment for hooks
passthrough:
  hooks:
    configure:
      command-chain:
        - snap/command-chain/snapcraft-runner
      plugs: [network]
    install:
      environment:
        LC_ALL: C.UTF-8
        LANG: C.UTF-8
        SNAPCRAFT_PRELOAD_REDIRECT_ONLY_SHM: 1
      command-chain:
        - snap/command-chain/snapcraft-runner
        - bin/snapcraft-preload
      plugs: [network]

plugs:
  # This content interface provides a mechanism for the edgexfoundry
  # snap to shared vault secret tokens in order for services in external
  # edgex snap to access the secret-store. Note, in this case this snap
  # defines a plug instead of slot to allow the consuming snap to create
  # the service-specific directory under $SNAP_DATA/secrets.
  edgex-secretstore-token:
    interface: content
    content: edgex-secretstore-token
    target: $SNAP_DATA/mount/secrets

# kong runs things through luarocks and luarocks expects it's configuration to
# be located here and we can't override this at runtime, so map what's in
# $SNAP to the expected location
layout:
  /etc/luarocks:
    bind: $SNAP/etc/luarocks
  /usr/local:
    bind: $SNAP/usr/local

grade: stable
confinement: strict

apps:
  # edgex microservices
  consul:
    adapter: full
    command: bin/start-consul.sh
    command-chain:
      - bin/security-secret-store-env-var.sh
    daemon: forking
    plugs: [network, network-bind]
  redis:
    adapter: full
    after: [security-bootstrapper-redis]
    command: bin/redis-server $CONFIG_FILE $DIR_OPT $SAVE_OPT1 $SAVE_OPT2
    environment:
      DIR_OPT: "--dir $SNAP_DATA/redis"
      SAVE_OPT1: "--save 900 1"
      SAVE_OPT2: "--save 300 10"
      CONFIG_FILE: "$SNAP_DATA/redis/conf/redis.conf"
    daemon: simple
    plugs: [network, network-bind]
  postgres:
    adapter: full
    command: usr/lib/postgresql/12/bin/postgres -D $SNAP_DATA/postgresql/12/main -c $CONFIG_ARG
    daemon: simple
    environment:
      CONFIG_ARG: config_file=$SNAP_DATA/postgresql/12/main/postgresql.conf
      SNAPCRAFT_PRELOAD_REDIRECT_ONLY_SHM: 1
    command-chain:
      - bin/drop-snap-daemon.sh
      - bin/snapcraft-preload
    plugs:
      - network
      - network-bind
  kong-daemon:
    adapter: full
    after:
      - postgres
      # to ensure kong.yml is ready for kong to process as the file is set up from security-secretstore-setup
      - security-secretstore-setup
    command: bin/kong-daemon.sh
    command-chain:
      - bin/perl5lib-launch.sh
      - bin/kong-launch.sh
    daemon: forking
    environment:
      KONG_CONF: $SNAP_DATA/config/security-proxy-setup/kong.conf
      KONGADMIN_CONFIGFILEPATH: $SNAP_DATA/config/kong.yml
      KONG_LOGS_DIR: $SNAP_COMMON/logs
      KONG_PROXY_ACCESS_LOG: $SNAP_COMMON/logs/kong-proxy-access.log
      KONG_ADMIN_ACCESS_LOG: $SNAP_COMMON/logs/kong-admin-access.log
      KONG_PROXY_ERROR_LOG: $SNAP_COMMON/logs/kong-proxy-error.log
      KONG_ADMIN_ERROR_LOG: $SNAP_COMMON/logs/kong-admin-error.log
      KONG_ADMIN_LISTEN: "localhost:8001, localhost:8444 ssl"
      KONG_STATUS_LISTEN: "localhost:8100"
      KONG_SSL_CIPHER_SUITE: "modern"
      # The DNS order was modified because of an issue with a Windows based host DNS issue.
      # Keeping the default order would cause the first API request to Kong's admin API much longer time to connect for
      # taking something minimum of 20 seconds to complete, and then others would complete as expected.
      # Moreover, changing the DNS order did not impact those non-Windows based systems,
      # so implementing it across the board seemed pretty low risk.
      # The work-around that was found in one of the documented issues was to remove the SRV record check
      # by manipulating the Kong DNS checking order via environment variable. Once we did that,
      # the prolonged connecting issue went away.
      KONG_DNS_ORDER: "LAST,A,CNAME"
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
    start-timeout: 15m
    plugs:
      - network
      - network-bind
    stop-command: bin/kong-stop.sh
  vault:
    adapter: none
    command: bin/vault server --config $VAULT_CONFIG
    daemon: simple
    environment:
      VAULT_CONFIG: "$SNAP_DATA/config/security-secret-store/vault-config.hcl"
      VAULT_ADDR: "http://localhost:8200"
    plugs:
      - network
      - network-bind
  vault-cli:
    adapter: none
    command: bin/vault
    environment:
      VAULT_CONFIG: "$SNAP_DATA/config/security-secret-store/vault-config.hcl"
      VAULT_ADDR: "http://localhost:8200"
    plugs:
      - network
      - network-bind
  security-secretstore-setup:
    adapter: full
    after: [vault]
    command: >-
      bin/security-secretstore-setup -confdir $SNAP_DATA/config/security-secretstore-setup/res $VAULT_INTERVAL
    command-chain:
      - bin/service-config-overrides.sh
    post-stop-command: bin/security-secretstore-post-setup.sh
    daemon: oneshot
    environment:
      VAULT_INTERVAL: "--vaultInterval=10"
      SECRETSTORE_HOST: localhost
      # environment vars for security-secretstore-setup (aka vault-worker)
      SECRETSTORE_TOKENFOLDERPATH: $SNAP_DATA/config/security-secretstore-setup/res
      SECRETSTORE_TOKENPROVIDER: $SNAP/bin/security-file-token-provider
      SECRETSTORE_TOKENPROVIDERARGS: "-confdir, $SNAP_DATA/config/security-file-token-provider/res"
      SECRETSTORE_TOKENPROVIDERADMINTOKENPATH: $SNAP_DATA/secrets/tokenprovider/secrets-token.json
      # registry consul ACL related environment variables:
      SECRETSTORE_CONSULSECRETSADMINTOKENPATH: $SNAP_DATA/secrets/edgex-consul/admin/token.json

      # environment for security-file-token-provider, exec'd by secretstore-setup
      TOKENFILEPROVIDER_PRIVILEGEDTOKENPATH: $SNAP_DATA/secrets/tokenprovider/secrets-token.json
      TOKENFILEPROVIDER_CONFIGFILE: $SNAP_DATA/config/security-file-token-provider/res/token-config.json
      TOKENFILEPROVIDER_OUTPUTDIR: $SNAP_DATA/secrets

      # securing Kong's admin API plugin related environment variables:
      KONGADMIN_CONFIGTEMPLATEPATH: $SNAP_DATA/config/security-secretstore-setup/res/kong-admin-config.template.yml
      KONGADMIN_CONFIGFILEPATH: $SNAP_DATA/config/kong.yml
      KONGADMIN_CONFIGJWTPATH: $SNAP_DATA/secrets/security-proxy-setup/kong-admin-jwt

    start-timeout: 15m
    plugs: [network]
  security-proxy-setup:
    adapter: none
    after:
      - security-secretstore-setup
      - security-consul-bootstrapper
      - kong-daemon
    command: bin/security-proxy-setup -confdir $SNAP_DATA/config/security-proxy-setup/res $INIT_ARG
    command-chain:
      - bin/service-config-overrides.sh
    post-stop-command: bin/security-proxy-post-setup.sh
    environment:
      INIT_ARG: "--init=true"
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/security-proxy-setup/secrets-token.json
      ACCESSTOKENFILE: $SNAP_DATA/secrets/consul-acl-token/bootstrap_token.json
      KONGAUTH_JWTFILE: $SNAP_DATA/secrets/security-proxy-setup/kong-admin-jwt
    daemon: oneshot
    start-timeout: 15m
    plugs: [network]
  # This is a simple service which calls into vault to retrieve the Redis password and then
  # to generate Redis config file for Redis server to start up with credentials and ACL rules.
  # Redis can be started once the confFile is created. Once the config file has been generated,
  # this service exits. In the Docker version, the customized redis' entrypoint.sh performs
  # the similar actions as described above.
  security-bootstrapper-redis:
    adapter: none
    after:
      - security-secretstore-setup
    command: bin/setup-redis-acl.sh
    environment:
      # TODO: determine the correct cmd-line args & env var overrides...
      SECRETSTORE_SERVERNAME: localhost
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/security-bootstrapper-redis/secrets-token.json
      DATABASECONFIG_PATH: $SNAP_DATA/redis/conf
      DATABASECONFIG_NAME: redis.conf
    daemon: oneshot
    plugs: [network]
  # This is a one-shot service which sets up consul's ACL and prepare for creating consul's agent tokens later on
  security-consul-bootstrapper:
    adapter: none
    after:
      - security-secretstore-setup
    command: bin/setup-consul-acl.sh
    environment:
      STAGEGATE_REGISTRY_HOST: localhost
      STAGEGATE_REGISTRY_ACL_BOOTSTRAPTOKENPATH: $SNAP_DATA/secrets/consul-acl-token/bootstrap_token.json
      STAGEGATE_REGISTRY_ACL_SECRETSADMINTOKENPATH: $SNAP_DATA/secrets/edgex-consul/admin/token.json
      STAGEGATE_REGISTRY_ACL_SENTINELFILEPATH: $SNAP_DATA/consul/config/consul_acl_done
    daemon: oneshot
    plugs: [network]
  core-data:
    adapter: full
    after:
      - security-bootstrapper-redis
      # This generates the consul role for this service before the service starts
      - security-consul-bootstrapper
      - security-proxy-setup
    command: bin/core-data -confdir $SNAP_DATA/config/core-data/res -cp -r
    command-chain:
      - bin/security-secret-store-env-var.sh
      - bin/service-config-overrides.sh
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/core-data/secrets-token.json
    daemon: simple
    plugs: [network, network-bind]
    # for now, specify a shorter stop-timeout until services learn how
    # to handle SIGTERM properly with as per
    # https://github.com/edgexfoundry/edgex-go/issues/1306
    stop-timeout: 10s
  core-metadata:
    adapter: none
    after:
      - security-bootstrapper-redis
      # This generates the consul role for this service before the service starts
      - security-consul-bootstrapper
      - security-proxy-setup
    command: bin/core-metadata -confdir $SNAP_DATA/config/core-metadata/res -cp -r
    command-chain:
      - bin/security-secret-store-env-var.sh
      - bin/service-config-overrides.sh
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/core-metadata/secrets-token.json
    daemon: simple
    plugs: [network, network-bind]
    stop-timeout: 10s
  core-command:
    adapter: none
    after:
      - security-bootstrapper-redis
      # This generates the consul role for this service before the service starts
      - security-consul-bootstrapper
      - security-proxy-setup
    command: bin/core-command -confdir $SNAP_DATA/config/core-command/res -cp -r
    command-chain:
      - bin/security-secret-store-env-var.sh
      - bin/service-config-overrides.sh
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/core-command/secrets-token.json
    daemon: simple
    plugs: [network, network-bind]
    stop-timeout: 10s
  support-notifications:
    adapter: none
    after:
      - security-bootstrapper-redis
      # This generates the consul role for this service before the service starts
      - security-consul-bootstrapper
      - security-proxy-setup
    command: bin/support-notifications -confdir $SNAP_DATA/config/support-notifications/res -cp -r
    command-chain:
      - bin/security-secret-store-env-var.sh
      - bin/service-config-overrides.sh
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/support-notifications/secrets-token.json
    daemon: simple
    plugs: [network, network-bind]
    stop-timeout: 10s
  support-scheduler:
    adapter: none
    after:
      - security-bootstrapper-redis
      # This generates the consul role for this service before the service starts
      - security-consul-bootstrapper
      - security-proxy-setup
    command: bin/support-scheduler -confdir $SNAP_DATA/config/support-scheduler/res -cp -r
    command-chain:
      - bin/security-secret-store-env-var.sh
      - bin/service-config-overrides.sh
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/support-scheduler/secrets-token.json
    daemon: simple
    plugs: [network, network-bind]
    stop-timeout: 10s
  sys-mgmt-agent:
    adapter: none
    after:
      - security-bootstrapper-redis
      # This generates the consul role for this service before the service starts
      - security-consul-bootstrapper
      - security-proxy-setup
    command: bin/sys-mgmt-agent -confdir $SNAP_DATA/config/sys-mgmt-agent/res -cp -r
    command-chain:
      - bin/security-secret-store-env-var.sh
      - bin/service-config-overrides.sh
    environment:
      EXECUTORPATH: $SNAP/bin/sys-mgmt-agent-snap-executor.sh
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/sys-mgmt-agent/secrets-token.json
    daemon: simple
    plugs: [network, network-bind]
  app-service-configurable:
    adapter: full
    after:
      # This generates the consul role for this service before the service starts
      - security-consul-bootstrapper
    command: >-
      bin/app-service-configurable -cp -r -s
      -confdir $SNAP_DATA/config/app-service-configurable/res
      -profile rules-engine
    command-chain:
      - bin/security-secret-store-env-var.sh
      - bin/service-config-overrides.sh
    daemon: simple
    environment:
      BINDING_PUBLISHTOPIC: events
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/app-rules-engine/secrets-token.json
    plugs: [network, network-bind]
  # helper commands the snap exposes
  security-proxy-setup-cmd:
    adapter: none
    command: bin/security-proxy-setup
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/security-proxy-setup/secrets-token.json
      ACCESSTOKENFILE: $SNAP_DATA/secrets/consul-acl-token/bootstrap_token.json
      KONGAUTH_JWTFILE: $SNAP_DATA/secrets/security-proxy-setup/kong-admin-jwt
    plugs: [home, removable-media, network]
  secrets-config:
    adapter: none
    # double-check with bnevis that this is OK, as there is an individual config.toml
    # file for the secrets-config command
    # not a mistake--secrets-config re-uses security-proxy-setup's configuration.toml
    command: bin/secrets-config -confdir $SNAP_DATA/config/security-proxy-setup/res
    plugs: [home, removable-media, network]
  redis-cli:
    adapter: full
    command: bin/redis-cli
    plugs: [home, removable-media, network]
  consul-cli:
    adapter: none
    command: bin/consul
    plugs: [network, network-bind]
  curl:
    adapter: full
    command: usr/bin/curl
    plugs: [network]
  jq:
    adapter: full
    command: usr/bin/jq
    plugs: [home, removable-media]
  kong:
    adapter: full
    command: usr/local/bin/kong
    command-chain:
      - bin/perl5lib-launch.sh
      - bin/kong-launch.sh
    environment:
      KONG_LOGS_DIR: $SNAP_COMMON/logs
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
    plugs: [home, removable-media, network, network-bind]
  psql:
    adapter: full
    command: usr/bin/psql
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      PGHOST: $SNAP_COMMON/sockets
      PGDATABASE: kong
    command-chain:
      - bin/perl5lib-launch.sh
      # psql should be run as the snap_daemon user, which is the user
      # who is initially created as a role with postgres
      - bin/drop-snap-daemon.sh
    plugs: [home, removable-media, network]
  psql-any:
    adapter: full
    command: usr/bin/psql
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      PGHOST: $SNAP_COMMON/sockets
      PSQLRC: $SNAP_USER_COMMON/.psqlrc
    command-chain:
      - bin/perl5lib-launch.sh
    plugs: [home, removable-media, network]
  createdb:
    adapter: full
    command: usr/bin/createdb
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      PGHOST: $SNAP_COMMON/sockets
    command-chain:
      - bin/perl5lib-launch.sh
      # createdb should be run as the snap_daemon user, which is the user
      # who is initially created as a role with postgres
      - bin/drop-snap-daemon.sh
    plugs: [home, removable-media, network]
  kuiper:
    adapter: full
    after:
      - security-bootstrapper-redis
    command: bin/kuiperd
    command-chain:
    # this script is original staged from edgex-ekuiper stage-snap, 
    # and has been renamed 
      - bin/kuiper-setup-redis-credentials.sh
    daemon: simple
    environment:
      KuiperBaseKey: $SNAP_DATA/kuiper
      VAULT_TOKEN_FILE: $SNAP_DATA/secrets/edgex-ekuiper/secrets-token.json
      SOURCE_FILE: $SNAP_DATA/kuiper/etc/sources/edgex.yaml 
      CONNECTION_FILE: $SNAP_DATA/kuiper/etc/connections/connection.yaml
    plugs: [network, network-bind]
  kuiper-cli:
    adapter: full
    command: bin/kuiper
    environment:
      KuiperBaseKey: $SNAP_DATA/kuiper
    plugs: [home, network, network-bind]

parts:
  static-packages:
    plugin: nil
    # the default source for a part that doesn't specify one is ".", which
    # then means snapcraft will scan the full git directory here and determine
    # that if anything changed, i.e. the config-common parts with
    # actual scripts, etc. this part also gets marked out of date too and needs
    # rebuilding, even though this part really only depends on a stage-package
    # to resolve this we can just specify the source of something that changes
    # infrequently and will minimize unnecessary part re-building by snapcraft
    source: snap/local/build-helpers
    stage-packages:
      - apg
      - curl
      - jq
      # setpriv with snapd 2.45 + can be used to drop privileges
      # base: core18 snaps should stage setpriv while base: core20 should stage util-linux. 
      - util-linux

  # snapcraft-preload is necessary to make postgres just use a different
  # lockfile location in /dev/shm
  # snapcraft-preload defines LD_PRELOAD to be a dynamic library compiled here
  # which will redirect things like open() that are being called with absolute
  # paths such as /dev/shm/some-dir to snap-specific, confinement supported
  # paths like /dev/shm/$SNAP_INSTANCE_NAME.some-dir before being passed to the
  # actual open() implementation
  # this prevents re-compiling or patching certain applications like postgres
  # to use snap security confinement friendly paths
  # NOTE: if this ever breaks in really scary ways when compiling with lots of
  # warnings, see the comment on the kong part, tldr probably some other C/C++
  # part in the build broke snapcraft-preload by running before
  # snapcraft-preload
  snapcraft-preload:
    source: https://github.com/sergiusens/snapcraft-preload.git
    # unfortunately no tags or releases we can rely on, so just hard-code
    # master at the time of writing for this
    source-commit: b8ed08c01c4461e69772f9230ee8d30fe2a2ea56
    plugin: cmake
    build-packages:
      - to arm64:
          - g++-multilib-arm-linux-gnueabihf
          - gcc-multilib-arm-linux-gnueabihf
      - else:
          - gcc-multilib
          - g++-multilib
    stage-packages:
      - to amd64:
          - lib32stdc++6 
    override-build: |
      cd $SNAPCRAFT_PART_SRC 
      cmake -DCMAKE_INSTALL_PREFIX=$SNAPCRAFT_PART_INSTALL/ .
      make install

  postgres:
    plugin: nil
    source: snap/local/build-helpers
    override-build: |
      snapcraftctl build
      # the perl package for postgres hard-codes the bin dir as /usr/lib/postgresql
      # so we need to prepend that with /snap/$SNAP_NAME/current/ before it will
      # work
      if [ -z "$SNAPCRAFT_PROJECT_NAME" ]; then
        echo "SNAPCRAFT_PROJECT_NAME is undefined, snapcraft upstream change?"
        exit 1
      fi
      sed -i -e \
        's@our $binroot = \"/usr/lib/postgresql/\"@our $binroot = \"/snap/'$SNAPCRAFT_PROJECT_NAME'/current/usr/lib/postgresql/\";@' \
        $SNAPCRAFT_PART_INSTALL/usr/share/perl5/PgCommon.pm
    stage-packages:
      # note: version of postgres in core20 that this resolves to is version 12
      # See also https://ubuntu.com/security/notices/USN-5145-1   - postgresql-contrib
      - postgresql-12
      - postgresql-client-12
      - perl
    prime:
       - -usr/share/man/*

  go-build-helper:
    plugin: dump
    # see comment for static-packages part about specifying a source part here
    source: snap/local/build-helpers
    build-snaps:
      - go/1.18/stable
    prime: [-*]

  config-common:
    plugin: dump
    source: snap/local/runtime-helpers

  hooks:
    source: snap/local/hooks
    plugin: make
    after: [go-build-helper]
    override-build: |
      cd $SNAPCRAFT_PART_SRC
      make build
      install -DT ./cmd/configure/configure "$SNAPCRAFT_PART_INSTALL/snap/hooks/configure"
      install -DT ./cmd/install/install "$SNAPCRAFT_PART_INSTALL/snap/hooks/install"

  consul:
    plugin: nil
    build-packages:
      - curl
      - unzip
    override-build: |
      VERSION=1.10.4

      # use dpkg architecture to figure out our target arch
      case "$(dpkg --print-architecture)" in
        amd64)
          FILE_NAME=consul_${VERSION}_linux_amd64.zip
          FILE_HASH=2be6414cdce1540c022acda76da55ef6bbd51c537dc2e3d4020652e72daec62d
          ;;
        arm64)
          FILE_NAME=consul_${VERSION}_linux_arm64.zip
          FILE_HASH=d4be8f68f0275701bcde71d130a997f5a32b47f91d5fb8a7eae7db666325a33b
          ;;
      esac

      # download the archive and verify the checksum
      # NOTE: the archive only includes the binary distribution, 
      # with no config or license files
      curl --silent --show-error --location --output $FILE_NAME \
        https://releases.hashicorp.com/consul/${VERSION}/$FILE_NAME
      echo "$FILE_HASH $FILE_NAME" > sha256
      sha256sum -c sha256 | grep OK
      
      unzip $FILE_NAME -d $SNAPCRAFT_PART_INSTALL
    organize:
      consul: bin/consul

  redis:
    source: https://github.com/redis/redis.git
    source-tag: "6.2.6"
    source-depth: 1
    plugin: make
    make-parameters:
    - "PREFIX=$SNAPCRAFT_PART_INSTALL/"

  edgex-go:
    after: 
      - metadata
      - go-build-helper
    source: .
    plugin: make
    override-build: |
      cd $SNAPCRAFT_PART_SRC

      # the version is needed for the build
      cat ./VERSION

      [ ! -d "vendor" ] && go mod download all || echo "skipping..."

      make build

      # copy service binaries, configuration, and license files into the snap install
      for service in core-command core-data core-metadata support-notifications support-scheduler sys-mgmt-agent \
          security-proxy-setup security-secretstore-setup security-file-token-provider \
          security-bootstrapper secrets-config; do

          install -DT "./cmd/$service/$service" "$SNAPCRAFT_PART_INSTALL/bin/$service"

          case "$service" in
          "security-file-token-provider")
              install -DT "./cmd/security-secretstore-setup/res-file-token-provider/configuration.toml" \
                  "$SNAPCRAFT_PART_INSTALL/config/security-file-token-provider/res/configuration.toml"
          ;;
          # For security bootstrapping Redis, we only need the configuration file used for "configureRedis"
          # as part of the whole "security-bootstrapper".
          # For security bootstrapping Consul (aka consul-bootstrapper), we then need the security-bootstrapper's
          # toml file and thus here we install both files.
          "security-bootstrapper")
              install -DT "./cmd/security-bootstrapper/res-bootstrap-redis/configuration.toml" \
                  "$SNAPCRAFT_PART_INSTALL/config/security-bootstrapper/res-bootstrap-redis/configuration.toml"
              install -DT "./cmd/security-bootstrapper/res/configuration.toml" \
                  "$SNAPCRAFT_PART_INSTALL/config/security-bootstrapper/res/configuration.toml"
          ;;
          # The security-secrets-config doesn't have a default configuration.toml, but since it shares
          # the same config as proxy-setup, just use that one.
          "secrets-config")
              install -DT "./cmd/security-proxy-setup/res/configuration.toml" \
                  "$SNAPCRAFT_PART_INSTALL/config/secrets-config/res/configuration.toml"
          ;;
          *)
              install -DT "./cmd/$service/res/configuration.toml" "$SNAPCRAFT_PART_INSTALL/config/$service/res/configuration.toml"
          esac

      done

      # For securing Kong's admin APIs, we also need to install kong-admin-config's template yml
      # into secretstore-setup service because secretstore-setup uses it to create a JWT file that
      # proxy-setup can later on enable Kong's JWT plugin on admin API route hence secure it with
      # JWT authentication and authorization
      install -DT "./cmd/security-secretstore-setup/res/kong-admin-config.template.yml" \
        "$SNAPCRAFT_PART_INSTALL/config/security-secretstore-setup/res/kong-admin-config.template.yml"

      install -DT "./Attribution.txt" "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/Attribution.txt"
      install -DT "./LICENSE" "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/LICENSE"

      # install the json config files for security-file-token-provider
      #
      # note that the file contents are processed using the real
      # value of $SNAP_DATA using jq in the install hook
      cp "./cmd/security-file-token-provider/res/token-config.json" \
        "$SNAPCRAFT_PART_INSTALL/config/security-file-token-provider/res/token-config.json"

    build-packages:
      - libzmq3-dev
      - zip
      - pkg-config
    stage-packages:
      - libzmq5

  kong:
    plugin: nil
    build-packages:
      - curl
    stage-packages:
      - libpcre3
      - perl
      - zlib1g-dev
    override-build: |
      VERSION=2.6.0

      # use dpkg architecture to figure out our target arch
      case "$(dpkg --print-architecture)" in
        amd64)
          FILE_NAME=kong_${VERSION}_amd64.deb
          FILE_HASH=80913c3c41249a77f7ca1c358d06ae3716a43c79f980f3dd77cd445ac3a62e25
          ;;
        arm64)
          FILE_NAME=kong_${VERSION}_arm64.deb
          FILE_HASH=6f7c5b9592ce858db890d4e5451a66935bf68b7c44a9ffee4b8f627280a9016c
          ;;
      esac

      # download the archive and verify the checksum
      curl --silent --show-error --location --output $FILE_NAME \
        https://download.konghq.com/gateway-2.x-ubuntu-xenial/pool/all/k/kong/$FILE_NAME
      echo "$FILE_HASH $FILE_NAME" > sha256
      sha256sum -c sha256 | grep OK
      
      dpkg --extract $FILE_NAME $SNAPCRAFT_PART_INSTALL

      # make kong world readable & executable to make snapcraft happy
      chmod 755 $SNAPCRAFT_PART_INSTALL/usr/local/bin/kong

      mkdir -p $SNAPCRAFT_PART_INSTALL/config/security-proxy-setup
      cp $SNAPCRAFT_PART_INSTALL/etc/kong/kong.conf.default $SNAPCRAFT_PART_INSTALL/config/security-proxy-setup/kong.conf

      # kong 2.2.0 change the default user to "kong" which breaks
      # under confinement so explicitly set user to "root root"
      sed -i -e 's/#nginx_user = kong kong/nginx_user = root root/' \
        $SNAPCRAFT_PART_INSTALL/config/security-proxy-setup/kong.conf

      # by default the Kong deb contains an absolute symlink @ /usr/local/openresty/bin/openresty which points to /usr/local/openresty/nginx/sbin/nginx
      # because the review-tools for the snap store do not currently allow using absolute symlinks that point outside of the snap
      # (and are not smart enough to realize there is a layout involved in our usage here), we delete the absolute symlink
      # and re-create it as a relative symlink pointing to ../nginx/sbin/nginx instead
      cd $SNAPCRAFT_PART_INSTALL/usr/local/openresty/bin
      rm openresty
      ln -s ../nginx/sbin/nginx openresty

    prime:
       - -lib/systemd/*
       - -usr/share/man/*

  # SECURITY SERVICES PARTS
  vault:    
    plugin: nil
    build-packages:
      - curl
      - unzip
    override-build: |
      VERSION=1.8.5

      # use dpkg architecture to figure out the target arch
      case "$(dpkg --print-architecture)" in
        amd64)
          FILE_NAME=vault_${VERSION}_linux_amd64.zip
          FILE_HASH=97d7ac9145ffdf256ab91045a4857a640ecaa7c56bbd66b61fb70990620f3d33
          ;;
        arm64)
          FILE_NAME=vault_${VERSION}_linux_arm64.zip
          FILE_HASH=a1a57c51505cce0857c32a159ed193dd330e43bee1f3340d2143993c64cf0645
          ;;
      esac

      # download the archive and verify the checksum
      # NOTE: the archive only includes the binary distribution, 
      # with no config or license files
      curl --silent --show-error --location --output $FILE_NAME \
        https://releases.hashicorp.com/vault/$VERSION/$FILE_NAME
      echo "$FILE_HASH $FILE_NAME" > sha256
      sha256sum -c sha256 | grep OK
      
      unzip $FILE_NAME -d $SNAPCRAFT_PART_INSTALL
    organize:
      vault: bin/vault

  # DEVICE SERVICES parts
  # TODO: vet all the correct files are available...
  app-service-configurable:
    plugin: nil
    stage-snaps:
      - edgex-app-service-configurable/latest/stable
    stage:
      # Exclude every profile other than the "rules-engine":
      - -res/external-mqtt-trigger/configuration.toml
      - -res/functional-tests/configuration.toml
      - -res/http-export/configuration.toml
      - -res/mqtt-export/configuration.toml
      - -res/push-to-core/configuration.toml
      - -res/sample/configuration.toml
      # Exclude files in usr folder other than the "Attribution.txt" and "LICENSE":
      - -usr/lib/*
      - -usr/share/doc/libnorm1/*
      - -usr/share/doc/libpgm-5.2-0/*
      - -usr/share/doc/libsodium23/*
      - -usr/share/doc/libzmq5/*

  kuiper:
    plugin: nil
    stage-snaps:
      - edgex-ekuiper/1/stable
    organize: 
      bin/setup-redis-credentials.sh: bin/kuiper-setup-redis-credentials.sh
    stage:
      # Exclude redundant files
      - -usr/bin/curl
      - -usr/lib/*/libcurl*
      - -usr/lib/*/liblber*
      - -usr/lib/*/libldap*
      - -usr/lib/*/libnorm*
      - -usr/lib/*/libpgm*
      - -usr/lib/*/libsodium*
      - -usr/lib/*/libzmq*
      - -usr/share/doc/libcurl*
      - -usr/share/doc/curl
      - -usr/share/doc/libldap*
      - -usr/share/doc/libnorm*
      - -usr/share/doc/libpgm*
      - -usr/share/doc/libsodium*
      - -usr/share/doc/libzmq*

  metadata:
    plugin: nil
    source: https://github.com/canonical/edgex-snap-metadata.git
    source-branch: appstream
    source-depth: 1
    override-build: |
      # install the icon at the default internal path
      install -DT edgex-snap-icon.png \
        $SNAPCRAFT_PART_INSTALL/meta/gui/icon.png
      
      # change to this project's repo to get the version
      cd $SNAPCRAFT_PROJECT_DIR
      if git describe ; then
        VERSION=$(git describe --tags --abbrev=0 | sed 's/v//')
      else
        VERSION="0.0.0"
      fi

      # write version to file for the build
      echo $VERSION > ./VERSION
      # set the version of this snap
      snapcraftctl set-version $VERSION
    parse-info: [edgexfoundry.metainfo.xml]  

