name: edgexfoundry
base: core18
adopt-info: version
summary: Open-source framework for IoT edge computing
description: |
  EdgeX Foundry is a vendor-neutral open source project hosted by The Linux 
  Foundation building a common open framework for IoT edge computing. This 
  snap contains all of the EdgeX core, security, and support reference 
  services, as well as Consul, Kong, MongoDB, Vault, a JRE for the two 
  remaining Java services, and a set of basic device services. The packaging 
  for this snap can be found at: https://github.com/edgexfoundry/edgex-go

icon: snap/local/assets/edgex-snap-icon.png

# delhi is epoch 0, edinburgh epoch 1, etc.
epoch: 2

# TODO: add armhf here when that's supported
architectures:
  - build-on: arm64
  - build-on: amd64

# for start-timeout, we need snapd 2.38
# we need command-chain for the hooks too
assumes: [snapd2.42, command-chain]

# Ideally snapcraft would generate this command-chain spec for the hooks
# automatically, but that doesn't currently work, see
# https://bugs.launchpad.net/snapd/+bug/1824255
# In the meantime, make sure that the snapcraft-runner gets generated by
# the apps by specifying the full adapter in at least one of the apps, and
# manually craft the command-chain for the configure hook here to passthrough
# to the snap.yaml
# All of this is necessary so we can use jq and other tools from inside the
# snap in the configure and install hooks
# See also https://bugs.launchpad.net/snapcraft/+bug/1848381 for specifying
# environment for hooks
passthrough:
  system-usernames:
    snap_daemon: shared
  hooks:
    configure:
      command-chain:
        - snap/command-chain/snapcraft-runner
    install:
      environment:
        LC_ALL: C.UTF-8
        LANG: C.UTF-8
        PGHOST: $SNAP_COMMON/sockets
        SNAPCRAFT_PRELOAD_REDIRECT_ONLY_SHM: 1
      command-chain:
        - snap/command-chain/snapcraft-runner
        - bin/snapcraft-preload

# kong runs things through luarocks and luarocks expects it's configuration to
# be located here and we can't override this at runtime, so map what's in
# $SNAP to the expected location
layout:
  /etc/luarocks:
    bind: $SNAP/etc/luarocks

# TODO: upgrade to stable before releasing to beta/candidate/stable
grade: devel
confinement: strict

apps:
  # edgex microservices
  consul:
    adapter: full
    command: bin/start-consul.sh
    daemon: forking
    plugs: [network, network-bind]
  core-config-seed:
    adapter: none
    after: [consul]
    command: >-
      bin/config-seed
      --cmd $SNAP_DATA/config
      -confdir $SNAP_DATA/config/config-seed/res
      --props $SNAP_DATA/config/config-seed/res/properties
    daemon: oneshot
    start-timeout: 15m
    plugs: [network, network-bind]
  redis:
    adapter: full
    after: [core-config-seed]
    command: bin/redis-server $SNAP_DATA/redis/redis.conf
    daemon: simple
    plugs: [network, network-bind]
  mongod:
    adapter: full
    after: [core-config-seed]
    command: bin/mongod --dbpath $SNAP_DATA/mongo/db --logpath $SNAP_COMMON/mongodb.log
    daemon: simple
    plugs: [hardware-observe, network, network-bind, system-observe]
    stop-command: bin/mongod --shutdown --dbpath $SNAP_DATA/mongo/db
  postgres:
    adapter: full
    command: usr/lib/postgresql/10/bin/postgres -D $SNAP_DATA/postgresql/10/main -c $CONFIG_ARG
    daemon: simple
    environment:
      CONFIG_ARG: config_file=$SNAP_DATA/etc/postgresql/10/main/postgresql.conf
      SNAPCRAFT_PRELOAD_REDIRECT_ONLY_SHM: 1
    command-chain:
      - bin/gosu-snap_daemon.sh
      - bin/snapcraft-preload
    plugs:
      - network
      - network-bind
  kong-daemon:
    adapter: full
    after:
      - postgres
      - security-secrets-setup
    command: bin/kong-daemon.sh
    command-chain:
      - bin/perl5lib-launch.sh
      - bin/kong-launch.sh
    daemon: forking
    environment:
      KONG_CONF: $SNAP_DATA/config/security-proxy-setup/kong.conf
      KONG_LOGS_DIR: $SNAP_COMMON/logs
      KONG_PROXY_ACCESS_LOG: $SNAP_COMMON/logs/kong-proxy-access.log
      KONG_ADMIN_ACCESS_LOG: $SNAP_COMMON/logs/kong-admin-access.log
      KONG_PROXY_ERROR_LOG: $SNAP_COMMON/logs/kong-proxy-error.log
      KONG_ADMIN_ERROR_LOG: $SNAP_COMMON/logs/kong-admin-error.log
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
    start-timeout: 15m
    plugs:
      - network
      - network-bind
    stop-command: bin/kong-stop.sh
  security-secrets-setup:
    adapter: full
    command: bin/security-secrets-setup -confdir $SNAP_DATA/config/security-secrets-setup/res generate
    daemon: oneshot
    environment:
      XDG_RUNTIME_DIR: /tmp
    start-timeout: 15m
  vault:
    adapter: none
    after:
      - consul
      - security-secrets-setup
      - core-config-seed
    command: bin/vault server --config $VAULT_CONFIG
    daemon: simple
    environment:
      VAULT_CONFIG: "$SNAP_DATA/config/security-secret-store/vault-config.hcl"
      VAULT_ADDR: "https://localhost:8200"
      VAULT_UI: "true"
    plugs:
      - network
      - network-bind
  security-secretstore-setup:
    adapter: full
    after: [vault]
    command: bin/security-secretstore-setup -confdir $SNAP_DATA/config/security-secretstore-setup/res $INIT_ARG
    daemon: oneshot
    environment:
      INIT_ARG: "--init=true"
    start-timeout: 15m
    plugs: [network]
  security-proxy-setup:
    adapter: none
    after:
      - security-secretstore-setup
      - kong-daemon
    command: bin/security-proxy-setup -confdir $SNAP_DATA/config/security-proxy-setup/res $INIT_ARG
    environment:
      INIT_ARG: "--init=true"
    daemon: oneshot
    start-timeout: 15m
    plugs: [network]
  edgex-mongo:
    adapter: full
    after: [mongod, security-secretstore-setup]
    command: bin/edgex-mongo -confdir $SNAP_DATA/config/edgex-mongo/res
    command-chain:
      - bin/security-secret-store-env-var.sh
    daemon: oneshot
    start-timeout: 15m
    plugs: [network]
  core-data:
    adapter: full
    after:
      - core-config-seed
      - edgex-mongo
      - security-proxy-setup
    command: bin/core-data -confdir $SNAP_DATA/config/core-data/res --registry
    command-chain:
      - bin/security-secret-store-env-var.sh
    daemon: simple
    plugs: [network, network-bind]
    # for now, specify a shorter stop-timeout until services learn how
    # to handle SIGTERM properly with as per
    # https://github.com/edgexfoundry/edgex-go/issues/1306
    stop-timeout: 10s
  core-metadata:
    adapter: none
    after:
      - core-config-seed
      - edgex-mongo
      - security-proxy-setup
    command: bin/core-metadata -confdir $SNAP_DATA/config/core-metadata/res --registry
    command-chain:
      - bin/security-secret-store-env-var.sh
    daemon: simple
    plugs: [network, network-bind]
    stop-timeout: 10s
  core-command:
    adapter: none
    after:
      - core-config-seed
      - edgex-mongo
      - security-proxy-setup
    command: bin/core-command -confdir $SNAP_DATA/config/core-command/res --registry
    command-chain:
      - bin/security-secret-store-env-var.sh
    daemon: simple
    plugs: [network, network-bind]
    stop-timeout: 10s
  support-logging:
    adapter: none
    after:
      - core-config-seed
      - edgex-mongo
      - security-proxy-setup
    command: bin/support-logging -confdir $SNAP_DATA/config/support-logging/res --registry
    command-chain:
      - bin/security-secret-store-env-var.sh
    daemon: simple
    plugs: [network, network-bind]
    stop-timeout: 10s
  support-notifications:
    adapter: none
    after:
      - core-config-seed
      - edgex-mongo
      - security-proxy-setup
    command: bin/support-notifications -confdir $SNAP_DATA/config/support-notifications/res --registry
    command-chain:
      - bin/security-secret-store-env-var.sh
    daemon: simple
    plugs: [network, network-bind]
    stop-timeout: 10s
  support-scheduler:
    adapter: none
    after:
      - core-config-seed
      - edgex-mongo
      - security-proxy-setup
    command: bin/support-scheduler -confdir $SNAP_DATA/config/support-scheduler/res --registry
    command-chain:
      - bin/security-secret-store-env-var.sh
    daemon: simple
    plugs: [network, network-bind]
    stop-timeout: 10s
  support-rulesengine:
    adapter: full
    after:
      - export-client
      - core-config-seed
      - edgex-mongo
      - security-proxy-setup
    command: bin/support-rulesengine-wrapper.sh
    command-chain:
      - bin/security-secret-store-env-var.sh
    daemon: simple
    plugs: [network, network-bind]
  export-client:
    adapter: none
    after:
      - core-config-seed
      - edgex-mongo
      - security-proxy-setup
    command: bin/export-client -confdir $SNAP_DATA/config/export-client/res --registry
    command-chain:
      - bin/security-secret-store-env-var.sh
    daemon: simple
    plugs: [network, network-bind]
    stop-timeout: 10s
  export-distro:
    adapter: full
    after:
      - core-config-seed
      - edgex-mongo
      - security-proxy-setup
    command: bin/export-distro -confdir $SNAP_DATA/config/export-distro/res --registry
    command-chain:
      - bin/security-secret-store-env-var.sh
    daemon: simple
    plugs: [network, network-bind]
    stop-timeout: 10s
  sys-mgmt-agent:
    adapter: none
    after:
      - core-config-seed
      - edgex-mongo
      - security-proxy-setup
    command: bin/sys-mgmt-agent -confdir $SNAP_DATA/config/sys-mgmt-agent/res --registry
    command-chain:
      - bin/security-secret-store-env-var.sh
    daemon: simple
    plugs: [network, network-bind]
  device-random:
    adapter: none
    after:
      - core-config-seed
      - edgex-mongo
      - security-proxy-setup
      - core-data
      - core-metadata
      - support-logging
    command: bin/device-random -confdir $SNAP_DATA/config/device-random -profile res --registry $CONSUL_ADDR
    environment:
      CONSUL_ADDR: "consul://localhost:8500"
    daemon: simple
    plugs: [network, network-bind]
  device-virtual:
    adapter: none
    after:
      - core-config-seed
      - edgex-mongo
      - security-proxy-setup
      - core-data
      - core-metadata
      - support-logging
    command: bin/device-virtual -confdir $SNAP_DATA/config/device-virtual -profile res --registry $CONSUL_ADDR
    environment:
      CONSUL_ADDR: "consul://localhost:8500"
    daemon: simple
    plugs: [network, network-bind]
  app-service-configurable:
    adapter: full
    command: bin/app-service-configurable -confdir $SNAP_DATA/config/app-service-configurable/res -profile rules-engine --registry
    daemon: simple
    plugs: [network, network-bind]

  # helper commands the snap exposes
  security-proxy-setup-cmd:
    adapter: none
    command: bin/security-proxy-setup
    plugs: [home, removable-media, network]
  redis-cli:
    adapter: full
    command: bin/redis-cli
    plugs: [home, removable-media, network]
  push-config:
    adapter: full
    command: bin/push-config.sh
    plugs: [network, network-bind]
  mongo:
    adapter: full
    command: bin/mongo
    plugs: [home, removable-media, network]
  mongostat:
    adapter: full
    command: bin/mongostat
    plugs: [network]
  mongodump:
    adapter: full
    command: bin/mongodump
    plugs: [network]
  consul-cli:
    adapter: none
    command: bin/consul
    plugs: [network, network-bind]
  curl:
    adapter: full
    command: usr/bin/curl
    plugs: [network]
  jq:
    adapter: full
    command: usr/bin/jq
    plugs: [home, removable-media]
  kong:
    adapter: full
    command: bin/kong
    command-chain:
      - bin/perl5lib-launch.sh
      - bin/kong-launch.sh
    environment:
      KONG_LOGS_DIR: $SNAP_COMMON/logs
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
    plugs: [home, removable-media, network, network-bind]
  psql:
    adapter: full
    command: usr/bin/psql
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      PGHOST: $SNAP_COMMON/sockets
      PGDATABASE: kong
    command-chain:
      - bin/perl5lib-launch.sh
      # createuser should be run as the snap_daemon user, which is the user
      # who is initially created as a role with postgres
      - bin/gosu-snap_daemon.sh
    plugs: [home, removable-media, network]
  psql-any:
    adapter: full
    command: usr/bin/psql
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      PGHOST: $SNAP_COMMON/sockets
      PSQLRC: $SNAP_USER_COMMON/.psqlrc
    command-chain:
      - bin/perl5lib-launch.sh
    plugs: [home, removable-media, network]
  createuser:
    adapter: full
    command: usr/bin/createuser
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      PGHOST: $SNAP_COMMON/sockets
    command-chain:
      - bin/perl5lib-launch.sh
      # createuser should be run as the snap_daemon user, which is the user
      # who is initially created as a role with postgres
      - bin/gosu-snap_daemon.sh
    plugs: [home, removable-media, network]
  createdb:
    adapter: full
    command: usr/bin/createdb
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      PGHOST: $SNAP_COMMON/sockets
    command-chain:
      - bin/perl5lib-launch.sh
      # createdb should be run as the snap_daemon user, which is the user
      # who is initially created as a role with postgres
      - bin/gosu-snap_daemon.sh
    plugs: [home, removable-media, network]

parts:
  version:
    plugin: nil
    # as with static-packages part, the source dir is unrelated to this part and is used
    # since it changes rarely and therefore will not trigger a new pull
    source: snap/local/build-helpers
    override-pull: |
      cd $SNAPCRAFT_PROJECT_DIR
      PROJECT_VERSION=$(cat VERSION)
      GIT_REVISION=$(git rev-parse --short HEAD)
      snapcraftctl set-version ${PROJECT_VERSION}-$(date +%Y%m%d)+${GIT_REVISION}
  static-packages:
    plugin: nil
    # the default source for a part that doesn't specify one is ".", which
    # then means snapcraft will scan the full git directory here and determine
    # that if anything changed, i.e. the config-common parts with
    # actual scripts, etc. this part also gets marked out of date too and needs
    # rebuilding, even though this part really only depends on a stage-package
    # to resolve this we can just specify the source of something that changes
    # infrequently and will minimize unnecessary part re-building by snapcraft
    source: snap/local/build-helpers
    stage-packages:
      - curl
      - jq

  # snapcraft-preload is necessary to make postgres just use a different
  # lockfile location in /dev/shm
  # snapcraft-preload defines LD_PRELOAD to be a dynamic library compiled here
  # which will redirect things like open() that are being called with absolute
  # paths such as /dev/shm/some-dir to snap-specific, confinement supported
  # paths like /dev/shm/$SNAP_INSTANCE_NAME.some-dir before being passed to the
  # actual open() implementation
  # this prevents re-compiling or patching certain applications like postgres
  # to use snap security confinement friendly paths
  # NOTE: if this ever breaks in really scary ways when compiling with lots of
  # warnings, see the comment on the kong part, tldr probably some other C/C++
  # part in the build broke snapcraft-preload by running before
  # snapcraft-preload
  snapcraft-preload:
    source: https://github.com/sergiusens/snapcraft-preload.git
    source-depth: 1
    # unfortunately no tags or releases we can rely on, so just hard-code
    # master at the time of writing for this
    source-commit: d654bbe8a5add5a4bea14d96342b656990c5c818
    plugin: cmake
    build-packages:
      - to arm64:
          - g++-multilib-arm-linux-gnueabihf
          - gcc-multilib-arm-linux-gnueabihf
      - else:
          - gcc-multilib
          - g++-multilib
    stage-packages:
      - to amd64:
          - lib32stdc++6
  gosu:
    source: https://github.com/tianon/gosu.git
    source-tag: "1.11"
    plugin: go
    go-importpath: github.com/tianon/gosu
    build-snaps: []
    after: [go]
    build-environment:
      - CGO_ENABLED: "0"
  postgres:
    plugin: nil
    source: snap/local/build-helpers
    override-build: |
      snapcraftctl build
      # the perl package for postgres hard-codes the bin dir as /usr/lib/postgresql
      # so we need to prepend that with /snap/$SNAP_NAME/current/ before it will
      # work
      if [ -z "$SNAPCRAFT_PROJECT_NAME" ]; then
        echo "SNAPCRAFT_PROJECT_NAME is undefined, snapcraft upstream change?"
        exit 1
      fi
      sed -i -e \
        's@our $binroot = \"/usr/lib/postgresql/\"@our $binroot = \"/snap/'$SNAPCRAFT_PROJECT_NAME'/current/usr/lib/postgresql/\";@' \
        $SNAPCRAFT_PART_INSTALL/usr/share/perl5/PgCommon.pm
    stage-packages:
      # note: version of postgres in core18 that this resolves to is version 10
      - postgresql
      - postgresql-contrib
      - postgresql-client
      - perl

  go-build-helper:
    plugin: dump
    # see comment for static-packages part about specifying a source part here
    source: snap/local/build-helpers
    prime: [-*]

  config-common:
    plugin: dump
    source: snap/local/runtime-helpers

  # for now, the go part contains all of the remote part's stanzas, thus making
  # it not remote, because we need to specify GO111MODULE=off when we build go
  # otherwise go will try to import all of the files from the top-level go.mod
  # from edgex-go which at this point will fail
  # eventually we would like these changes to be upstreamed but until then
  # they live here. see also https://github.com/edgexfoundry/edgex-go/issues/1109
  go:
    plugin: nil
    source: snap/local/build-helpers
    override-build: |
      # use dpkg architecture to figure out our target arch
      # note - we specifically don't use arch
      case "$(dpkg --print-architecture)" in
        amd64)
          FILE_NAME=go1.12.5.linux-amd64.tar.gz
          FILE_HASH=aea86e3c73495f205929cfebba0d63f1382c8ac59be081b6351681415f4063cf
          ;;
        arm64)
          FILE_NAME=go1.12.5.linux-arm64.tar.gz
          FILE_HASH=ff09f34935cd189a4912f3f308ec83e4683c309304144eae9cf60ebc552e7cd8
          ;;
        armhf)
          FILE_NAME=go1.12.5.linux-armv6l.tar.gz
          FILE_HASH=311f5e76c7cec1ec752474a61d837e474b8e750b8e3eed267911ab57c0e5da9a
          ;;
        i386)
          FILE_NAME=go1.12.5.linux-386.tar.gz
          FILE_HASH=146605e13bf337ff3aacd941a816c5d97a8fef8b5817e07fcec4540632085980
          ;;
      esac
      # download the archive, failing on ssl cert problems
      curl https://dl.google.com/go/$FILE_NAME -O
      echo "$FILE_HASH $FILE_NAME" > sha256
      sha256sum -c sha256 | grep OK
      tar -C $SNAPCRAFT_STAGE -xf go*.tar.gz --strip-components=1
    prime:
      - "-*"
    # build after kong to prevent staging go binaries into the snap as they
    # are large - see the TODO on the kong part
    after: [go-build-helper, kong]

  consul:
    after: [go]
    plugin: make
    source: https://github.com/hashicorp/consul.git
    source-tag: v1.3.1
    source-depth: 1
    stage:
      # duplicated file with the deps of vault, so just drop this one and use
      # the file from the vault part instead
      - -usr/share/doc/github.com/patrickmn/go-cache/LICENSE
    override-build: |
      . $SNAPCRAFT_STAGE/bin/go-build-helper.sh
      gopartbootstrap github.com/hashicorp/consul
      export GO111MODULES=off
      go get -u github.com/kardianos/govendor
      govendor install
      CONSUL_DEV=1 make

      # install the consul binary
      install -DT bin/consul "$SNAPCRAFT_PART_INSTALL/bin/consul"

      # handle consul LICENSE
      # TODO: do PATENT files need copying?
      install -DT "$GOIMPORTPATH/LICENSE" \
                 "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/hashicorp/consul/LICENSE"

      # handle vendor LICENSE files
      cd $GOIMPORTPATH/vendor
      for i in `find . -type f -name "LICENSE"`; do
        install -DT "$i" \
                 "$SNAPCRAFT_PART_INSTALL/usr/share/doc/$i"; done

      # TODO: some LICENSE files fall under .gopath too
      cd $GOPATH/src
      for i in `find . -type f -name "LICENSE"`; do
        install -DT "$i" \
                 "$SNAPCRAFT_PART_INSTALL/usr/share/doc/$i"; done
    build-packages:
      - make
      - zip

  mongodb:
    plugin: dump
    source:
      - on amd64: http://downloads.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1804-4.2.0.tgz
      - else:
          - on arm64: http://downloads.mongodb.org/linux/mongodb-linux-aarch64-ubuntu1804-4.2.0.tgz
      - else fail
    organize:
      MPL-2: usr/share/doc/mongodb/MPL-2
      README: usr/share/doc/mongodb/README
      THIRD-PARTY-NOTICES: usr/share/doc/mongodb/THIRD-PARTY-NOTICES
      LICENSE-Community.txt: usr/share/doc/mongodb/LICENSE-Community.txt
    stage-packages:
      - libssl1.1
    stage:
      - -bin/bsondump
      - -bin/mongoexport
      - -bin/mongofiles
      - -bin/mongoimport
      - -bin/mongooplog
      - -bin/mongoperf
      - -bin/mongoreplay
      - -bin/mongorestore
      - -bin/mongos
      - -bin/mongotop
  remarshal:
    plugin: python
    source: https://github.com/dbohdan/remarshal.git
    source-tag: v0.10.0
    source-depth: 1
    organize:
      LICENSE: usr/share/doc/remarshal/LICENSE
  redis:
    source: https://github.com/antirez/redis.git
    source-tag: "5.0.4"
    source-depth: 1
    plugin: make
    make-install-var: PREFIX
    override-build: |
      snapcraftctl build
      # process the config file to specify the working directory for redis
      # as $SNAP_DATA/redis
      cd $SNAPCRAFT_PART_SRC
      mkdir -p $SNAPCRAFT_PART_INSTALL/config/redis
      sed -e s@'dir ./'@'dir \$SNAP_DATA/redis'@ \
        redis.conf > $SNAPCRAFT_PART_INSTALL/config/redis/redis.conf
  edgex-mongo:
    source: https://github.com/edgexfoundry/docker-edgex-mongo.git
    source-branch: master
    source-depth: 1
    plugin: make
    after: [go]
    override-build: |
      cd $SNAPCRAFT_PART_SRC
      make build

      install -DT "./cmd/edgex-mongo" "$SNAPCRAFT_PART_INSTALL/bin/edgex-mongo"

      install -d "$SNAPCRAFT_PART_INSTALL/config/edgex-mongo/res/"

      # set CACertPath and TokenPath to work with security on by default
      # these things are also configurable by the user, that handling is done in
      # the install hook
      cat "./cmd/res/configuration.toml" | \
        sed -e s:./logs/security-proxy-setup.log:\$SNAP_COMMON/security-proxy-setup.log: \
            -e "s@TokenPath = \"/vault/config/assets/resp-init.json\"@TokenPath = \"\$SNAP_DATA/config/security-secrets-setup/res/resp-init.json\"@" \
            -e "s@CACertPath = \"/vault/config/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem\"@CACertPath = \"\$SNAP_DATA/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem\"@" \
            > \
       "$SNAPCRAFT_PART_INSTALL/config/edgex-mongo/res/configuration.toml"

      install -DT "./cmd/Attribution.txt" \
        "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/docker-edgex-mongo/Attribution.txt"
      install -DT "./LICENSE-2.0.TXT" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/docker-edgex-mongo/LICENSE-2.0.TXT"

  edgex-go:
    source: .
    plugin: make
    after: [go]
    override-build: |
      cd $SNAPCRAFT_PART_SRC
      make build

      install -DT "./cmd/core-command/core-command" "$SNAPCRAFT_PART_INSTALL/bin/core-command"
      install -DT "./cmd/config-seed/config-seed" "$SNAPCRAFT_PART_INSTALL/bin/config-seed"
      install -DT "./cmd/core-data/core-data" "$SNAPCRAFT_PART_INSTALL/bin/core-data"
      install -DT "./cmd/core-metadata/core-metadata" "$SNAPCRAFT_PART_INSTALL/bin/core-metadata"
      install -DT "./cmd/export-distro/export-distro" "$SNAPCRAFT_PART_INSTALL/bin/export-distro"
      install -DT "./cmd/export-client/export-client" "$SNAPCRAFT_PART_INSTALL/bin/export-client"
      install -DT "./cmd/support-logging/support-logging" "$SNAPCRAFT_PART_INSTALL/bin/support-logging"
      install -DT "./cmd/support-notifications/support-notifications" "$SNAPCRAFT_PART_INSTALL/bin/support-notifications"
      install -DT "./cmd/support-scheduler/support-scheduler" "$SNAPCRAFT_PART_INSTALL/bin/support-scheduler"
      install -DT "./cmd/sys-mgmt-agent/sys-mgmt-agent" "$SNAPCRAFT_PART_INSTALL/bin/sys-mgmt-agent"
      install -DT "./cmd/security-proxy-setup/security-proxy-setup" "$SNAPCRAFT_PART_INSTALL/bin/security-proxy-setup"
      install -DT "./cmd/security-secrets-setup/security-secrets-setup" "$SNAPCRAFT_PART_INSTALL/bin/security-secrets-setup"
      install -DT "./cmd/security-secretstore-setup/security-secretstore-setup" "$SNAPCRAFT_PART_INSTALL/bin/security-secretstore-setup"


      # FIXME: settings can't be overridden from the cmd-line!
      # Override 'LogFile' and 'LoggingRemoteURL'
      install -d "$SNAPCRAFT_PART_INSTALL/config/core-command/res/"
      install -d "$SNAPCRAFT_PART_INSTALL/config/core-data/res/"
      install -d "$SNAPCRAFT_PART_INSTALL/config/core-metadata/res/"
      install -d "$SNAPCRAFT_PART_INSTALL/config/export-client/res/"
      install -d "$SNAPCRAFT_PART_INSTALL/config/export-distro/res/"
      install -d "$SNAPCRAFT_PART_INSTALL/config/config-seed/res/"
      install -d "$SNAPCRAFT_PART_INSTALL/config/support-logging/res/"
      install -d "$SNAPCRAFT_PART_INSTALL/config/support-notifications/res/"
      install -d "$SNAPCRAFT_PART_INSTALL/config/support-scheduler/res/"
      install -d "$SNAPCRAFT_PART_INSTALL/config/sys-mgmt-agent/res/"
      install -d "$SNAPCRAFT_PART_INSTALL/config/security-proxy-setup/res/"
      install -d "$SNAPCRAFT_PART_INSTALL/config/security-secrets-setup/res/"
      install -d "$SNAPCRAFT_PART_INSTALL/config/security-secretstore-setup/res/"

      install -d "$SNAPCRAFT_PART_INSTALL/config/config-seed/res/properties/edgex-support-rulesengine/"

      # handle application.properties for the remaining java services
      cat "./cmd/config-seed/res/properties/edgex-support-rulesengine/application.properties" | \
        sed -e s:edgex/rules:\$SNAP_DATA/support-rulesengine/rules: \
            -e s:edgex/templates:\$SNAP_DATA/support-rulesengine/templates: > \
       "$SNAPCRAFT_PART_INSTALL/config/config-seed/res/properties/edgex-support-rulesengine/application.properties"

      cat "./cmd/config-seed/res/configuration.toml" | \
        sed -e s:./logs/edgex-config-seed.log:\$SNAP_COMMON/config-seed.log: \
            -e s:'http\://localhost\:48061/api/v1/logs':: > \
       "$SNAPCRAFT_PART_INSTALL/config/config-seed/res/configuration.toml"

      cat "./cmd/core-command/res/configuration.toml" | \
        sed -e s:./logs/edgex-core-command.log:\$SNAP_COMMON/core-command.log: \
            -e "s@RootCaCertPath = '/vault/config/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem'@RootCaCertPath = \"\$SNAP_DATA/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem\"@" \
            -e "s@TokenFile = '/vault/config/assets/resp-init.json'@TokenFile = \"\$SNAP_DATA/config/security-secrets-setup/res/resp-init.json\"@" \
            -e s:'http\://localhost\:48061/api/v1/logs':: > \
       "$SNAPCRAFT_PART_INSTALL/config/core-command/res/configuration.toml"

      cat "./cmd/core-data/res/configuration.toml" | \
        sed -e s:./logs/edgex-core-data.log:\$SNAP_COMMON/core-data.log: \
            -e "s@RootCaCertPath = '/vault/config/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem'@RootCaCertPath = \"\$SNAP_DATA/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem\"@" \
            -e "s@TokenFile = '/vault/config/assets/resp-init.json'@TokenFile = \"\$SNAP_DATA/config/security-secrets-setup/res/resp-init.json\"@" \
            -e s:'http\://localhost\:48061/api/v1/logs':: > \
       "$SNAPCRAFT_PART_INSTALL/config/core-data/res/configuration.toml"

      cat "./cmd/core-metadata/res/configuration.toml" | \
        sed -e s:./logs/edgex-core-metadata.log:\$SNAP_COMMON/core-metadata.log: \
            -e "s@RootCaCertPath = '/vault/config/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem'@RootCaCertPath = \"\$SNAP_DATA/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem\"@" \
            -e "s@TokenFile = '/vault/config/assets/resp-init.json'@TokenFile = \"\$SNAP_DATA/config/security-secrets-setup/res/resp-init.json\"@" \
            -e s:'http\://localhost\:48061/api/v1/logs':: > \
       "$SNAPCRAFT_PART_INSTALL/config/core-metadata/res/configuration.toml"

      cat "./cmd/export-client/res/configuration.toml" | \
        sed -e s:./logs/edgex-export-client.log:\$SNAP_COMMON/export-client.log: \
            -e "s@RootCaCertPath = '/vault/config/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem'@RootCaCertPath = \"\$SNAP_DATA/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem\"@" \
            -e "s@TokenFile = '/vault/config/assets/resp-init.json'@TokenFile = \"\$SNAP_DATA/config/security-secrets-setup/res/resp-init.json\"@" \
            -e s:'http\://localhost\:48061/api/v1/logs':: > \
       "$SNAPCRAFT_PART_INSTALL/config/export-client/res/configuration.toml"

      cat "./cmd/export-distro/res/configuration.toml" | \
        sed -e s:./logs/edgex-export-distro.log:\$SNAP_COMMON/export-distro.log: \
            -e s:'http\://localhost\:48061/api/v1/logs':: > \
       "$SNAPCRAFT_PART_INSTALL/config/export-distro/res/configuration.toml"

      # for support-logging we also want the default persistence to be on a 
      # file so that we can use redis (which isn't supported with support-logging)
      # in the snap by default
      cat "./cmd/support-logging/res/configuration.toml" | \
        sed -e s:./logs/edgex-support-logging.log:\$SNAP_COMMON/support-logging.log: \
            -e "s@RootCaCertPath = '/vault/config/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem'@RootCaCertPath = \"\$SNAP_DATA/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem\"@" \
            -e "s@TokenFile = '/vault/config/assets/resp-init.json'@TokenFile = \"\$SNAP_DATA/config/security-secrets-setup/res/resp-init.json\"@" \
            -e s:"Persistence = 'database'":"Persistence = 'file'":\
            -e s:'http\://localhost\:48061/api/v1/logs':: > \
       "$SNAPCRAFT_PART_INSTALL/config/support-logging/res/configuration.toml"

      cat "./cmd/support-notifications/res/configuration.toml" | \
        sed -e s:./logs/edgex-support-notifications.log:\$SNAP_COMMON/support-notifications.log: \
            -e "s@RootCaCertPath = '/vault/config/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem'@RootCaCertPath = \"\$SNAP_DATA/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem\"@" \
            -e "s@TokenFile = '/vault/config/assets/resp-init.json'@TokenFile = \"\$SNAP_DATA/config/security-secrets-setup/res/resp-init.json\"@" \
            -e s:'http\://localhost\:48061/api/v1/logs':: > \
       "$SNAPCRAFT_PART_INSTALL/config/support-notifications/res/configuration.toml"

      cat "./cmd/support-scheduler/res/configuration.toml" | \
        sed -e s:./logs/edgex-support-scheduler.log:\$SNAP_COMMON/support-scheduler.log: \
            -e "s@RootCaCertPath = '/vault/config/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem'@RootCaCertPath = \"\$SNAP_DATA/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem\"@" \
            -e "s@TokenFile = '/vault/config/assets/resp-init.json'@TokenFile = \"\$SNAP_DATA/config/security-secrets-setup/res/resp-init.json\"@" \
            -e s:'http\://localhost\:48061/api/v1/logs':: > \
       "$SNAPCRAFT_PART_INSTALL/config/support-scheduler/res/configuration.toml"

      # for sys-mgmt-agent we also need to specify the operations type as "snap"
      cat "./cmd/sys-mgmt-agent/res/configuration.toml" | \
        sed -e s:./logs/edgex-sys-mgmt-agent.log:\$SNAP_COMMON/sys-mgmt-agent.log: \
            -e s:"ExecutorPath = '/path/to/the/file'":"ExecutorPath = '\$SNAP/bin/sys-mgmt-agent-snap-executor.sh'": \
            -e s:'http\://localhost\:48061/api/v1/logs':: > \
       "$SNAPCRAFT_PART_INSTALL/config/sys-mgmt-agent/res/configuration.toml"

      # for security-secrets-setup, we need to replace the locations of where
      # to write the certificates and such
      cat "./cmd/security-secrets-setup/res/configuration.toml" | \
        sed -e s:./logs/security-secrets-setup.log:\$SNAP_COMMON/security-secrets-setup.log: \
            -e "s@DeployDir = \"/tmp/edgex/secrets\"@DeployDir = \"\$SNAP_DATA/pki/\"@" \
            -e "s@CertConfigDir = \"./res\"@CertConfigDir = \"\$SNAP_DATA/config/security-secrets-setup/res\"@" \
            > \
       "$SNAPCRAFT_PART_INSTALL/config/security-secrets-setup/res/configuration.toml"

      # also install the json config files for security-secrets-setup for kong 
      # and vault PKI, note that the file contents are processed using the real
      # value of $SNAP_DATA using jq in the install hook
      cp "./cmd/security-secrets-setup/res/pkisetup-vault.json" \
        "$SNAPCRAFT_PART_INSTALL/config/security-secrets-setup/res/pkisetup-vault.json" 
      cp "./cmd/security-secrets-setup/res/pkisetup-kong.json" \
        "$SNAPCRAFT_PART_INSTALL/config/security-secrets-setup/res/pkisetup-kong.json" 

      # for security-proxy-setup we need to replace the token location and the 
      # certificate location as well
      cat "./cmd/security-proxy-setup/res/configuration.toml" | \
        sed -e s:./logs/security-proxy-setup.log:\$SNAP_COMMON/security-proxy-setup.log: \
            -e "s@TokenPath = \"res/resp-init.json\"@TokenPath = \"\$SNAP_DATA/config/security-secrets-setup/res/resp-init.json\"@" \
            -e "s@CACertPath = \"res/EdgeXFoundryCA/EdgeXFoundryCA.pem\"@CACertPath = \"\$SNAP_DATA/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem\"@" \
            > \
       "$SNAPCRAFT_PART_INSTALL/config/security-proxy-setup/res/configuration.toml"

      # for security-secretstore-setup we need to replace the token location and the 
      # certificate location as well
      cat "./cmd/security-secretstore-setup/res/configuration.toml" | \
        sed -e s:./logs/security-secretstore-setup.log:\$SNAP_COMMON/security-secretstore-setup.log: \
            -e "s@tokenfolderpath = \"/vault/config/assets\"@tokenfolderpath = \"\$SNAP_DATA/config/security-secrets-setup/res\"@" \
            -e "s@cafilepath = \"/vault/config/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem\"@cafilepath = \"\$SNAP_DATA/pki/EdgeXFoundryCA/EdgeXFoundryCA.pem\"@" \
            -e "s@server = \"edgex-vault\"@server = \"localhost\"@" \
            -e "s@certfilepath = \"/vault/config/pki/EdgeXFoundryCA/edgex-kong.pem\"@certfilepath = \"\$SNAP_DATA/pki/EdgeXFoundryCA/localhost.pem\"@" \
            -e "s@keyfilepath = \"/vault/config/pki/EdgeXFoundryCA/edgex-kong.priv.key\"@keyfilepath = \"\$SNAP_DATA/pki/EdgeXFoundryCA/localhost.priv.key\"@" \
            > \
       "$SNAPCRAFT_PART_INSTALL/config/security-secretstore-setup/res/configuration.toml"


      # handle license/attribution files
      install -DT "./cmd/core-command/Attribution.txt" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/core-command/Attribution.txt"
      install -DT "./cmd/core-data/Attribution.txt" \
             "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/core-data/Attribution.txt"
      install -DT "./cmd/core-metadata/Attribution.txt" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/core-metadata/Attribution.txt"
      install -DT "./cmd/config-seed/Attribution.txt" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/config-seed/Attribution.txt"
      install -DT "./cmd/export-client/Attribution.txt" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/export-client/Attribution.txt"
      install -DT "./cmd/export-distro/Attribution.txt" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/export-distro/Attribution.txt"      
      install -DT "./cmd/support-logging/Attribution.txt" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/support-logging/Attribution.txt"
      install -DT "./cmd/support-notifications/Attribution.txt" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/support-notifications/Attribution.txt"
      install -DT "./cmd/support-scheduler/Attribution.txt" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/support-scheduler/Attribution.txt"
      install -DT "./cmd/sys-mgmt-agent/Attribution.txt" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/sys-mgmt-agent/Attribution.txt"
      install -DT "./LICENSE" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/core-command/LICENSE"
      install -DT "./LICENSE" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/core-data/LICENSE"
      install -DT "./LICENSE" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/core-metdata/LICENSE"
      install -DT "./LICENSE" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/export-distro/LICENSE"
      install -DT "./LICENSE" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/export-client/LICENSE"
      install -DT "./LICENSE" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/support-logging/LICENSE"
      install -DT "./LICENSE" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/support-notifications/LICENSE"
      install -DT "./LICENSE" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/support-scheduler/LICENSE"
      install -DT "./LICENSE" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/config-seed/LICENSE"
      install -DT "./LICENSE" \
              "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/sys-mgmt-agent/LICENSE"

    build-packages:
      - zip
      - pkg-config
    stage-packages:
      - libzmq3-dev

  support-rulesengine:
    source: https://github.com/edgexfoundry/support-rulesengine.git
    source-branch: "master"
    source-depth: 1
    plugin: maven
    maven-options: ["-Dmaven.test.skip=true"]
    override-build: |
      snapcraftctl build
      echo "Installing support-rulesengine files"

      # The logic following logic is all handled by DockerFile for
      # the EdgeX support-rulesengine docker image.
      install -d "$SNAPCRAFT_PART_INSTALL/jar/support-rulesengine"
      mv "$SNAPCRAFT_PART_INSTALL"/jar/support-rulesengine.jar \
         "$SNAPCRAFT_PART_INSTALL"/jar/support-rulesengine/support-rulesengine.jar

      # FIXME:
      # copy service license into /usr/share/java/doc, because the
      # jdk plugin has a bug which prevents any files from /usr/share/doc
      # to be staged or primed.
      install -DT "./Attribution.txt" \
         "$SNAPCRAFT_PART_INSTALL/usr/share/java/doc/support-rulesengine/Attribution.txt"
      install -DT "./LICENSE" \
         "$SNAPCRAFT_PART_INSTALL/usr/share/java/doc/support-rulesengine/LICENSE"
      install -DT "./src/main/resources/rule-template.drl" \
         "$SNAPCRAFT_PART_INSTALL/jar/support-rulesengine/templates/rule-template.drl"
    prime:
      - -etc/fonts
      - -etc/fonts/X11
      - -usr/lib/jvm/*/ASSEMBLY_EXCEPTION
      - -usr/lib/jvm/*/THIRD_PARTY_README
      - -usr/lib/jvm/*/jre/ASSEMBLY_EXCEPTION
      - -usr/lib/jvm/*/jre/THIRD_PARTY_README
      - -usr/lib/jvm/*/man
      - -usr/lib/jvm/*/jre/man
      - -usr/lib/jvm/*/jre/lib/images
      - -usr/lib/jvm/*/include
      - -usr/lib/jvm/*/bin
      - -usr/lib/jvm/*/lib
      - -usr/lib/jvm/*/docs
      - -usr/lib/jvm/*/src.zip
      - -usr/share/X11
      - -usr/share/man
      - -usr/share/fonts
      - -usr/share/alsa

  # KONG + OPENRESTY PARTS
  openresty-kong-patches:
    plugin: dump
    source: https://github.com/Kong/openresty-patches.git
    source-depth: 1
    organize:
      patches: openresty-kong-patches
    stage: [openresty-kong-patches]
    prime: [-*]
  lua-kong-nginx-module:
    source: https://github.com/Kong/lua-kong-nginx-module.git
    source-tag: 0.0.4
    plugin: nil
    override-build: |
      # install the static lualib dir into the final snap, the compiled parts
      # will be installed into the snap as part of the OpenResty part build
      mkdir -p $SNAPCRAFT_PART_INSTALL/lualib/resty/kong
      cp -r $SNAPCRAFT_PART_SRC/lualib/resty/kong/tls.lua $SNAPCRAFT_PART_INSTALL/lualib/resty/kong/tls.lua

      # copy the necessary soruce files from here into a module specific dir in
      # $SNAPCRAFT_STAGE because some of these files such as config conflict 
      # with files that Kong generates/needs, so we want these to be in their
      # own dir for OpenResty to compile with
      mkdir -p $SNAPCRAFT_STAGE/lua-kong-nginx-module
      for f in lualib src config Makefile; do
        cp -r "$SNAPCRAFT_PART_SRC/$f" "$SNAPCRAFT_STAGE/lua-kong-nginx-module/$f"
      done
      mkdir -p $SNAPCRAFT_PART_INSTALL/usr/share/doc/lua-kong-nginx-module
      cp LICENSE $SNAPCRAFT_PART_INSTALL/usr/share/doc/lua-kong-nginx-module/LICENSE

  openresty:
    # see comment on kong's after spec for why we order after snapcraft-preload
    # here
    after: [openresty-kong-patches, snapcraft-preload, lua-kong-nginx-module]
    plugin: autotools
    source: https://openresty.org/download/openresty-1.15.8.1.tar.gz
    install-via: prefix
    # configure options here from https://getkong.org/install/source/
    configflags:
      - --with-pcre-jit
      - --with-ipv6
      - --with-http_realip_module
      - --with-http_ssl_module
      - --with-http_stub_status_module
      - --with-http_v2_module
      - --add-module=$SNAPCRAFT_STAGE/lua-kong-nginx-module
    build-packages:
      - build-essential
      - libpcre3-dev
      - perl
      - curl
      - libssl-dev
      - zlib1g-dev
    stage-packages:
      - perl
    override-pull: |
      snapcraftctl pull
      cd $SNAPCRAFT_PART_SRC/bundle
      # apply patches from openresty-kong-patches
      for i in $SNAPCRAFT_STAGE/openresty-kong-patches/1.15.8.1/*.patch; do
        patch -p1 < $i
      done
    override-build: |
      snapcraftctl build
      # openresty will make an absolute symbolic link of openresty to the
      # nginx binary, so we need to delete that and replace it with a relative
      # symlink
      cd $SNAPCRAFT_PART_INSTALL/bin
      rm -rf openresty
      ln -s ../nginx/sbin/nginx openresty
      ln -s ../nginx/sbin/nginx nginx
      # the openresty build system also hard-codes the path to nginx inside
      # the "resty" binary so we need to change that
      if [ -z "$SNAPCRAFT_PROJECT_NAME" ]; then
        echo "SNAPCRAFT_PROJECT_NAME is undefined, snapcraft upstream change?"
        exit 1
      fi
      sed -i \
        -e s@$SNAPCRAFT_PART_INSTALL/nginx/sbin/nginx@/snap/$SNAPCRAFT_PROJECT_NAME/current/nginx/sbin/nginx@ \
        resty
  lua:
    # this dependency is somewhat artificial, because
    # when iterating on the openresty parts if you just rebuild openresty,
    # without also rebuilding lua, then kong will fail because it can't find
    # luarocks.cfg somewhere...
    # not sure why re-building openresty causes the luarocks config file to be
    # messed up, but if we order it like so then rebuilding any one of them will
    # always work
    # openresty -> lua -> luarocks -> kong
    # this may have to do with installing lua and luarocks into $SNAPCRAFT_STAGE
    after: [openresty]
    source: https://www.lua.org/ftp/lua-5.1.5.tar.gz
    source-type: tar
    plugin: make
    make-parameters: [linux]
    build-packages:
      - libreadline-dev
      - libncurses5-dev
    override-build: |
      # patch the Makefile to use $SNAPCRAFT_STAGE for the INSTALL_TOP variable
      # which unfortunately is not settable using an environment variable and thus needs
      # this manual patch
      sed -i "s@INSTALL_TOP= /usr/local@INSTALL_TOP=$SNAPCRAFT_STAGE@" Makefile
      snapcraftctl build
  luarocks:
    after: [lua]
    plugin: autotools
    source: https://github.com/luarocks/luarocks.git
    source-branch: v3.1.3
    source-depth: 1
    override-build: |
      ./configure \
        --prefix=$SNAPCRAFT_STAGE \
        --lua-suffix=jit \
        --with-lua=$SNAPCRAFT_STAGE \
        --with-lua-include=$SNAPCRAFT_STAGE/luajit/include/luajit-2.1 \
        --lua-version=5.1
      make build
      make install
  kong:
    # order this part after snapcraft-preload because there are include paths
    # that snapcraft will generate for this parts to auto-include in the
    # compile options for later parts if the part is C-based (i.e. some deps of
    # kong), but these include paths will break compiling snapcraft-preload in
    # very nasty ways
    # note that it seems only kong breaks snapcraft-preload, but do openresty
    # too just for good measure until we have a better resolution for this
    # see also https://github.com/sergiusens/snapcraft-preload/issues/38
    # ideally this would just be a "before: " on the snapcraft-preload part, but
    # snapcraft doesn't support that, see
    # https://bugs.launchpad.net/snapcraft/+bug/1848493
    after: [snapcraft-preload, luarocks]
    source: https://github.com/kong/kong.git
    plugin: nil
    source-tag: 1.3.0
    source-depth: 1
    build-packages:
      - unzip
      - libssl-dev
      - libpcre3-dev
      - libyaml-dev
      - luarocks
      - lua5.1
    stage-packages:
      - perl
      - luarocks
      - lua5.1
      - libyaml-dev
    override-build: |
      # first copy the default config file provided and install it into $SNAPCRAFT_PART_INSTALL
      # it will be generated/configured during the install hook
      mkdir -p $SNAPCRAFT_PART_INSTALL/config/security-proxy-setup
      cp kong.conf.default $SNAPCRAFT_PART_INSTALL/config/security-proxy-setup/kong.conf

      # handle the location of openssl + libcrypto by architecture
      # cause luarocks is silly and hardcodes /usr/lib/x86_64-linux-gnu as the lib search path
      case "$(dpkg --print-architecture)" in
        amd64)
          # x64 is the only arch that luarocks can properly find libs for :-/
          luarocks make --tree=$SNAPCRAFT_PART_INSTALL
          ;;
        arm64)
          luarocks make --tree=$SNAPCRAFT_PART_INSTALL \
            CRYPTO_LIBDIR=/usr/lib/aarch64-linux-gnu \
            CRYPTO_INCDIR=/usr/include \
            OPENSSL_LIBDIR=/usr/lib/aarch64-linux-gnu \
            OPENSSL_INCDIR=/usr/include
          ;;
        armhf)
          luarocks make --tree=$SNAPCRAFT_PART_INSTALL \
            CRYPTO_LIBDIR=/usr/lib/arm-linux-gnueabihf \
            CRYPTO_INCDIR=/usr/include \
            OPENSSL_LIBDIR=/usr/lib/arm-linux-gnueabihf \
            OPENSSL_INCDIR=/usr/include
          ;;
        i386)
          luarocks make --tree=$SNAPCRAFT_PART_INSTALL \
            CRYPTO_LIBDIR=/usr/lib/i386-linux-gnu \
            CRYPTO_INCDIR=/usr/include \
            OPENSSL_LIBDIR=/usr/lib/i386-linux-gnu \
            OPENSSL_INCDIR=/usr/include
          ;;
        *)
          echo "Unsupported arch $(dpkg --print-architecture)"
          exit 1
          ;;
      esac

      mkdir -p $SNAPCRAFT_PART_INSTALL/bin
      cp bin/kong $SNAPCRAFT_PART_INSTALL/bin/kong
      # make all the things inside the cmd directory executable because they for some reason aren't executable by default...
      cd $SNAPCRAFT_PART_INSTALL/share/lua/5.1/kong/cmd
      for cmd in $(ls *.lua); do
        chmod +x $cmd
      done

      # TODO: the json2lua script references $SNAPCRAFT_PART_INSTALL in some
      # paths it tries to load things from, probably worth fixing that to use
      # $SNAP, etc. but currently json2lua seems unused so not changing it now

  # SECURITY SERVICES PARTS
  vault:
    after: [go]
    plugin: make
    source: https://github.com/hashicorp/vault.git
    source-tag: v1.0.2
    source-depth: 1
    override-build: |
      . $SNAPCRAFT_STAGE/bin/go-build-helper.sh
      gopartbootstrap github.com/hashicorp/vault
      export GO111MODULES=off
      make bootstrap
      make dev

      # install the vault binary
      install -DT bin/vault "$SNAPCRAFT_PART_INSTALL/bin/vault"

      # handle vault LICENSE
      # TODO: do PATENT files need copying?
      install -DT "$GOIMPORTPATH/LICENSE" \
                 "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/hashicorp/vault/LICENSE"

      # handle vendor LICENSE files
      cd $GOIMPORTPATH/vendor
      for i in `find . -type f -name "LICENSE"`; do
        install -DT "$i" \
                 "$SNAPCRAFT_PART_INSTALL/usr/share/doc/$i"; done

      # TODO: some LICENSE files fall under .gopath too
      cd $GOPATH/src
      for i in `find . -type f -name "LICENSE"`; do
        install -DT "$i" \
                 "$SNAPCRAFT_PART_INSTALL/usr/share/doc/$i"; done

      # delete duplicated license files between vault + consul
      # as snapcraft will fail we attempt to install duplicated files into the snap
      rm -rf $SNAPCRAFT_PART_INSTALL/usr/share/doc/cloud.google.com/go/LICENSE
      rm -rf $SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/golang/protobuf/LICENSE
      rm -rf $SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/sean-/seed/LICENSE
      rm -rf $SNAPCRAFT_PART_INSTALL/usr/share/doc/golang.org/x/oauth2/LICENSE
      rm -rf $SNAPCRAFT_PART_INSTALL/usr/share/doc/google.golang.org/grpc/LICENSE

  # DEVICE SERVICES parts
  device-virtual-go:
    source: https://github.com/edgexfoundry/device-virtual-go.git
    source-depth: 1
    source-branch: master
    plugin: make
    after: [go]
    override-build: |
      cd $SNAPCRAFT_PART_SRC
      make build

      install -DT "./cmd/device-virtual" "$SNAPCRAFT_PART_INSTALL/bin/device-virtual"

      # FIXME: settings can't be overridden from the cmd-line!
      # Override 'LogFile'
      install -d "$SNAPCRAFT_PART_INSTALL/config/device-virtual/res/"

      # install configuration & default device profile
      cat "./cmd/res/configuration.toml" | \
        sed -e s:\"./device-virtual.log\":\'\$SNAP_COMMON/device-virtual.log\': \
          -e s:'ProfilesDir = \"./res\"':'ProfilesDir = \"\$SNAP_DATA/config/device-virtual/res\"': > \
        "$SNAPCRAFT_PART_INSTALL/config/device-virtual/res/configuration.toml"

      for profileType in bool float int uint; do
        install -T "./cmd/res/device.virtual.$profileType.yaml" \
          "$SNAPCRAFT_PART_INSTALL/config/device-virtual/res/device.virtual.$profileType.yaml"
      done

      install -DT "./cmd/Attribution.txt" \
         "$SNAPCRAFT_PART_INSTALL/usr/share/doc/device-virtual/Attribution.txt"
      install -DT "./LICENSE" \
         "$SNAPCRAFT_PART_INSTALL/usr/share/doc/device-virtual/LICENSE"

  device-random:
    source: https://github.com/edgexfoundry/device-random.git
    source-depth: 1
    source-branch: master
    plugin: make
    after: [go]
    override-build: |
      cd $SNAPCRAFT_PART_SRC
      make build

      install -DT "./cmd/device-random" "$SNAPCRAFT_PART_INSTALL/bin/device-random"

      # FIXME: settings can't be overridden from the cmd-line!
      # Override 'LogFile'
      install -d "$SNAPCRAFT_PART_INSTALL/config/device-random/res/"

      # install configuration & default device profile
      cat "./cmd/res/configuration.toml" | \
        sed -e s:\"./device-random.log\":\'\$SNAP_COMMON/device-random.log\': \
          -e s:'ProfilesDir = \"./res\"':'ProfilesDir = \"\$SNAP_DATA/config/device-random/res\"': > \
        "$SNAPCRAFT_PART_INSTALL/config/device-random/res/configuration.toml"

      install -T "./cmd/res/device.random.yaml" \
        "$SNAPCRAFT_PART_INSTALL/config/device-random/res/device.random.yaml"

      install -DT "./cmd/Attribution.txt" \
         "$SNAPCRAFT_PART_INSTALL/usr/share/doc/device-random/Attribution.txt"
      install -DT "./LICENSE" \
         "$SNAPCRAFT_PART_INSTALL/usr/share/doc/device-random/LICENSE"

  app-service-config:
    source: https://github.com/edgexfoundry/app-service-configurable.git
    source-branch: master
    plugin: make
    build-packages: [gcc, git, libzmq3-dev, pkg-config]
    stage-packages: [libzmq5]
    after: [go]
    override-build: |
      cd $SNAPCRAFT_PART_SRC
      make build

      # install the service binary
      install -DT "./app-service-configurable" \
         "$SNAPCRAFT_PART_INSTALL/bin/app-service-configurable"

      # replace relative log paths in configuration.toml files with fully qualified paths
      # prefixed with $SNAP_COMMON
      mkdir -p "$SNAPCRAFT_PART_INSTALL/config/app-service-configurable/res/rules-engine"
      cat "res/rules-engine/configuration.toml" | sed -e s:\./logs/:\\'$SNAP_COMMON/'\: > \
        "$SNAPCRAFT_PART_INSTALL/config/app-service-configurable/res/rules-engine/configuration.toml"

      install -DT "./Attribution.txt" \
         "$SNAPCRAFT_PART_INSTALL/usr/share/doc/app-service-configurable/Attribution.txt"
      install -DT "./LICENSE" \
         "$SNAPCRAFT_PART_INSTALL/usr/share/doc/app-service-configurable/LICENSE"
