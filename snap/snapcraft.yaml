name: edgexfoundry
base: core20
summary: EdgeX core, security, and supporting components
description: Refer to https://snapcraft.io/edgexfoundry
adopt-info: edgex-go

# Different epochs prevent refreshes between major versions of EdgeX due
# to continued configuration changes.
#
# delhi: 0, edinburgh: 1, fuji: 2, geneva: 3, hanoi: 4
# ireland/jakarta: 5, kamakura/levski:6, minnesota: 7
epoch: 7

architectures:
  - build-on: arm64
  - build-on: amd64

plugs:
  # This content interface provides a mechanism for the edgexfoundry
  # snap to shared vault secret tokens in order for services in external
  # edgex snap to access the secret-store. Note, in this case this snap
  # defines a plug instead of slot to allow the consuming snap to create
  # the service-specific directory under $SNAP_DATA/secrets.
  edgex-secretstore-token:
    interface: content
    content: edgex-secretstore-token
    target: $SNAP_DATA/mount/secrets

layout:
  /usr/local:
    bind: $SNAP/usr/local
  /usr/nginx:
    bind: $SNAP_COMMON/nginx

grade: stable
confinement: strict

apps:
  # edgex microservices
  consul:
    adapter: full
    command: bin/start-consul.sh
    daemon: forking
    install-mode: disable
    plugs: [network, network-bind]
  redis:
    adapter: full
    after: [security-bootstrapper-redis]
    command: bin/redis-server $CONFIG_FILE $DIR_ARG $SAVE_ARG $BIND_ARG
    environment:
      DIR_ARG: --dir $SNAP_DATA/redis
      SAVE_ARG: --save 900 1 --save 300 10
      BIND_ARG: --bind 127.0.0.1
      CONFIG_FILE: $SNAP_DATA/redis/conf/redis.conf
    daemon: simple
    install-mode: disable
    plugs: [network, network-bind]
  vault:
    adapter: none
    command: bin/vault server --config $VAULT_CONFIG
    daemon: simple
    install-mode: disable
    environment:
      VAULT_CONFIG: "$SNAP_DATA/config/security-secret-store/vault-config.hcl"
      VAULT_ADDR: "http://localhost:8200"
    plugs:
      - network
      - network-bind
  vault-cli:
    adapter: none
    command: bin/vault
    environment:
      VAULT_CONFIG: "$SNAP_DATA/config/security-secret-store/vault-config.hcl"
      VAULT_ADDR: "http://localhost:8200"
    plugs:
      - network
      - network-bind
  security-secretstore-setup:
    adapter: full
    after: [vault]
    command: >-
      bin/security-secretstore-setup --configDir $SNAP_DATA/config/security-secretstore-setup/res $VAULT_INTERVAL
    command-chain:
      - bin/service-config-overrides.sh
    post-stop-command: bin/security-secretstore-post-setup.sh
    daemon: oneshot
    install-mode: disable
    environment:
      VAULT_INTERVAL: "--vaultInterval=10"
      SECRETSTORE_HOST: localhost
      # environment vars for security-secretstore-setup (aka vault-worker)
      SECRETSTORE_TOKENFOLDERPATH: $SNAP_DATA/config/security-secretstore-setup/res
      SECRETSTORE_TOKENPROVIDER: $SNAP/bin/security-file-token-provider
      SECRETSTORE_TOKENPROVIDERARGS: "-configDir, $SNAP_DATA/config/security-file-token-provider/res"
      SECRETSTORE_TOKENPROVIDERADMINTOKENPATH: $SNAP_DATA/secrets/tokenprovider/secrets-token.json
      # registry consul ACL related environment variables:
      SECRETSTORE_CONSULSECRETSADMINTOKENPATH: $SNAP_DATA/secrets/edgex-consul/admin/token.json

      # environment for security-file-token-provider, exec'd by secretstore-setup
      TOKENFILEPROVIDER_PRIVILEGEDTOKENPATH: $SNAP_DATA/secrets/tokenprovider/secrets-token.json
      TOKENFILEPROVIDER_CONFIGFILE: $SNAP_DATA/config/security-file-token-provider/res/token-config.json
      TOKENFILEPROVIDER_OUTPUTDIR: $SNAP_DATA/secrets

    start-timeout: 15m
    plugs: [network]
  security-proxy-auth:
    adapter: none
    after:
      - security-secretstore-setup
      - consul
    command: bin/security-proxy-auth --configDir $SNAP_DATA/config/security-proxy-auth/res --configProvider --registry
    command-chain:
      - bin/service-config-overrides.sh
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/security-proxy-auth/secrets-token.json
    daemon: simple
    install-mode: disable
    plugs: [network, network-bind]
    stop-timeout: 10s
  # This is a simple one-shot service that creates a default TLS key and certificate for NGINX
  security-bootstrapper-nginx:
    adapter: none
    after:
      - security-secretstore-setup
    command: bin/setup-nginx.sh
    command-chain:
      - bin/service-config-overrides.sh
    daemon: oneshot
    install-mode: disable
  # This is a simple service which calls into vault to retrieve the Redis password and then
  # to generate Redis config file for Redis server to start up with credentials and ACL rules.
  # Redis can be started once the confFile is created. Once the config file has been generated,
  # this service exits. In the Docker version, the customized redis' entrypoint.sh performs
  # the similar actions as described above.
  security-bootstrapper-redis:
    adapter: none
    after:
      - security-secretstore-setup
    command: bin/setup-redis-acl.sh
    command-chain:
      - bin/service-config-overrides.sh
    environment:
      ENV_FILE: $SNAP_DATA/config/security-bootstrapper/res/security-bootstrapper.env
      SECRETSTORE_SERVERNAME: localhost
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/security-bootstrapper-redis/secrets-token.json
      DATABASECONFIG_PATH: $SNAP_DATA/redis/conf
      DATABASECONFIG_NAME: redis.conf
    daemon: oneshot
    install-mode: disable
    plugs: [network]
  # This is a one-shot service which sets up consul's ACL and prepare for creating consul's agent tokens later on
  security-consul-bootstrapper:
    adapter: none
    after:
      - security-secretstore-setup
    command: bin/setup-consul-acl.sh
    command-chain:
      - bin/service-config-overrides.sh
    environment:
      ENV_FILE: $SNAP_DATA/config/security-bootstrapper/res/security-bootstrapper.env
      STAGEGATE_REGISTRY_HOST: localhost
      STAGEGATE_REGISTRY_ACL_BOOTSTRAPTOKENPATH: $SNAP_DATA/secrets/consul-acl-token/bootstrap_token.json
      STAGEGATE_REGISTRY_ACL_MANAGEMENTTOKENPATH: $SNAP_DATA/secrets/consul-acl-token/mgmt_token.json
      STAGEGATE_REGISTRY_ACL_SECRETSADMINTOKENPATH: $SNAP_DATA/secrets/edgex-consul/admin/token.json
      STAGEGATE_REGISTRY_ACL_SENTINELFILEPATH: $SNAP_DATA/consul/config/consul_acl_done
    daemon: oneshot
    install-mode: disable
    plugs: [network]
  core-data:
    adapter: full
    after:
      - security-bootstrapper-redis
      - core-common-config-bootstrapper
      # This generates the consul role for this service before the service starts
      - security-consul-bootstrapper
    command: bin/core-data --configDir $SNAP_DATA/config/core-data/res --configProvider --registry
    command-chain:
      - bin/service-config-overrides.sh
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/core-data/secrets-token.json
    daemon: simple
    install-mode: disable
    plugs: [network, network-bind]
    # for now, specify a shorter stop-timeout until services learn how
    # to handle SIGTERM properly with as per
    # https://github.com/edgexfoundry/edgex-go/issues/1306
    stop-timeout: 10s
  core-metadata:
    adapter: none
    after:
      - security-bootstrapper-redis
      - core-common-config-bootstrapper
      # This generates the consul role for this service before the service starts
      - security-consul-bootstrapper
    command: bin/core-metadata --configDir $SNAP_DATA/config/core-metadata/res --configProvider --registry
    command-chain:
      - bin/service-config-overrides.sh
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/core-metadata/secrets-token.json
      UOM_UOMFILE: $SNAP_DATA/config/core-metadata/res/uom.toml
    daemon: simple
    install-mode: disable
    plugs: [network, network-bind]
    stop-timeout: 10s
  core-command:
    adapter: none
    after:
      - security-bootstrapper-redis
      - core-common-config-bootstrapper
      # This generates the consul role for this service before the service starts
      - security-consul-bootstrapper
    command: bin/core-command --configDir $SNAP_DATA/config/core-command/res --configProvider --registry
    command-chain:
      - bin/service-config-overrides.sh
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/core-command/secrets-token.json
    daemon: simple
    install-mode: disable
    plugs: [network, network-bind]
    stop-timeout: 10s
  support-notifications:
    adapter: none
    after:
      - security-bootstrapper-redis
      - core-common-config-bootstrapper
      # This generates the consul role for this service before the service starts
      - security-consul-bootstrapper
    command: bin/support-notifications --configDir $SNAP_DATA/config/support-notifications/res --configProvider --registry
    command-chain:
      - bin/service-config-overrides.sh
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/support-notifications/secrets-token.json
    daemon: simple
    install-mode: disable
    plugs: [network, network-bind]
    stop-timeout: 10s
  support-scheduler:
    adapter: none
    after:
      - security-bootstrapper-redis
      - core-common-config-bootstrapper
      # This generates the consul role for this service before the service starts
      - security-consul-bootstrapper
    command: bin/support-scheduler --configDir $SNAP_DATA/config/support-scheduler/res --configProvider --registry
    command-chain:
      - bin/service-config-overrides.sh
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/support-scheduler/secrets-token.json
    daemon: simple
    install-mode: disable
    plugs: [network, network-bind]
    stop-timeout: 10s
  nginx:
    adapter: none
    after:
      - security-bootstrapper-nginx
    command: usr/nginx/sbin/nginx -e stderr -p $SNAP_COMMON/nginx -c $SNAP_DATA/nginx/nginx.conf
    reload-command: usr/nginx/sbin/nginx -e stderr -p $SNAP_COMMON/nginx -c $SNAP_DATA/nginx/nginx.conf -s reload
    stop-command: usr/nginx/sbin/nginx -e stderr -p $SNAP_COMMON/nginx -c $SNAP_DATA/nginx/nginx.conf -s quit
    daemon: simple
    command-chain:
      - bin/service-config-overrides.sh
    install-mode: disable
    plugs: [network, network-bind]
    stop-timeout: 10s
  # this service should be started for processing secrets-config snap options and executing corresponding commands
  secrets-config-processor:
    after:
      - vault
    command: bin/helper-go options --app secrets-config
    daemon: oneshot
    install-mode: disable
    start-timeout: 1m
    plugs: [network]
  # this service pushes common configuration source into Configuration Provider
  core-common-config-bootstrapper:
    after:
      - security-consul-bootstrapper
    command: bin/core-common-config-bootstrapper --configDir $SNAP_DATA/config/core-common-config-bootstrapper/res --configFile configuration.yaml --configProvider --registry 
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/core-common-config-bootstrapper/secrets-token.json
    daemon: oneshot
    install-mode: disable
    plugs: [network]
  # helper commands the snap exposes
  secrets-config:
    adapter: none
    command: bin/secrets-config --configDir $SNAP_DATA/config/secrets-config/res
    environment:
      SECRETSTORE_TOKENFOLDERPATH: $SNAP_DATA/config/security-secretstore-setup/res/
      SECRETSTORE_TOKENFILE: resp-init.json
    plugs: [home, removable-media, network]
  redis-cli:
    adapter: full
    command: bin/redis-cli
    plugs: [home, removable-media, network]
  consul-cli:
    adapter: none
    command: bin/consul
    plugs: [network, network-bind]
  curl:
    adapter: full
    command: usr/bin/curl
    plugs: [network]
  jq:
    adapter: full
    command: usr/bin/jq
    plugs: [home, removable-media]

parts:
  static-packages:
    plugin: nil
    stage-packages:
      - apg
      - curl
      - jq

  # For inspiration see
  # - https://github.com/ogra1/nginx-snap
  # - https://github.com/kbavishi/nginx-snapcraft
  # - https://github.com/mbd98/nginx-snap
  # We enable SSL and reverse proxy and compression and disable almost everything else
  nginx:
    source: https://github.com/nginx/nginx.git
    # Use branch instead of tag to limit the git cloning depth
    source-branch: release-1.23.3
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/usr/nginx
      - --user=root
      - --group=root
      - --with-select_module
      - --with-poll_module
      - --with-http_ssl_module
      - --with-http_auth_request_module
      - --with-stream
      - --with-stream_ssl_module
      - --without-http_charset_module
      - --without-http_ssi_module
      - --without-http_userid_module
      - --without-http_access_module
      - --without-http_auth_basic_module
      - --without-http_mirror_module
      - --without-http_autoindex_module
      - --without-http_geo_module
      - --without-http_map_module
      - --without-http_split_clients_module
      - --without-http_referer_module
      - --without-http_fastcgi_module
      - --without-http_uwsgi_module
      - --without-http_scgi_module
      - --without-http_grpc_module
      - --without-http_memcached_module
      - --without-http_limit_conn_module
      - --without-http_limit_req_module
      - --without-http_empty_gif_module
      - --without-http_browser_module
      - --without-http_upstream_hash_module
      - --without-http_upstream_ip_hash_module
      - --without-http_upstream_least_conn_module
      - --without-http_upstream_random_module
      - --without-http_upstream_keepalive_module
      - --without-http_upstream_zone_module
      - --without-http-cache
      - --without-mail_pop3_module
      - --without-mail_imap_module
      - --without-mail_smtp_module
      - --without-stream_limit_conn_module
      - --without-stream_access_module
      - --without-stream_geo_module
      - --without-stream_map_module
      - --without-stream_split_clients_module
      - --without-stream_return_module
      - --without-stream_set_module
      - --without-stream_upstream_hash_module
      - --without-stream_upstream_least_conn_module
      - --without-stream_upstream_random_module
      - --without-stream_upstream_zone_module
      - --error-log-path=stderr
      - --http-log-path=logs/access.log
    build-packages:
      - build-essential
      - libpcre3-dev
      - libssl-dev
      - zlib1g-dev
    override-build: |
      cp auto/configure .
      snapcraftctl build
    stage-packages:
      - libpcre3
      - libssl1.1
      - zlib1g
    stage:
      - -usr/nginx/conf/nginx.conf
    prime:
      - -usr/nginx/logs

  go-builder:
    plugin: nil
    build-snaps:
      - go/1.20/stable
    prime: [-*]

  runtime-helpers:
    plugin: dump
    source: snap/local/runtime-helpers

  helper-go:
    source: snap/local/helper-go
    plugin: make
    after: [go-builder]
    override-build: |
      cd $SNAPCRAFT_PART_SRC
      make build
      install -DT ./helper-go $SNAPCRAFT_PART_INSTALL/bin/helper-go

  consul:
    plugin: nil
    build-packages:
      - curl
      - unzip
    override-build: |
      VERSION=1.13.0

      # use dpkg architecture to figure out our target arch
      case "$(dpkg --print-architecture)" in
        amd64)
          FILE_NAME=consul_${VERSION}_linux_amd64.zip
          FILE_HASH=db771e40126a88e1cfe2968724adbf2d1cdcc41c503fa326f3a93148ea642d38
          ;;
        arm64)
          FILE_NAME=consul_${VERSION}_linux_arm64.zip
          FILE_HASH=768119d9464685bd39329c537ee140ba19f45f5a2f68ea8fe49403f3141d39ec
          ;;
      esac

      # download the archive and verify the checksum
      # NOTE: the archive only includes the binary distribution, 
      # with no config or license files
      curl --silent --show-error --location --output $FILE_NAME \
        https://releases.hashicorp.com/consul/${VERSION}/$FILE_NAME
      echo "$FILE_HASH $FILE_NAME" > sha256
      sha256sum -c sha256 | grep OK
      
      unzip $FILE_NAME -d $SNAPCRAFT_PART_INSTALL
    organize:
      consul: bin/consul

  redis:
    source: https://github.com/redis/redis.git
    source-tag: "6.2.7"
    source-depth: 1
    plugin: make
    make-parameters:
    - "PREFIX=$SNAPCRAFT_PART_INSTALL/"

  edgex-go:
    after: [go-builder]
    source: .
    plugin: make
    override-build: |
      cd $SNAPCRAFT_PART_SRC

      if git describe ; then
        VERSION=$(git describe --tags --abbrev=0 | sed 's/v//')
      else
        VERSION="0.0.0"
      fi

      # set the version of the snap
      snapcraftctl set-version $VERSION

      # write version to file for the build
      echo $VERSION > VERSION

      [ ! -d "vendor" ] && go mod download all || echo "skipping..."

      make build

      # copy service binaries, configuration, and license files into the snap install
      for service in core-command core-data core-metadata support-notifications support-scheduler \
          security-proxy-auth security-secretstore-setup security-file-token-provider \
          security-bootstrapper secrets-config core-common-config-bootstrapper; do

          install -DT "./cmd/$service/$service" "$SNAPCRAFT_PART_INSTALL/bin/$service"

          case "$service" in
          "core-metadata")
              install -DT "./cmd/core-metadata/res/configuration.toml" "$SNAPCRAFT_PART_INSTALL/config/core-metadata/res/configuration.toml"
              install -DT "./cmd/core-metadata/res/uom.toml" "$SNAPCRAFT_PART_INSTALL/config/core-metadata/res/uom.toml"
          ;;
          "core-common-config-bootstrapper")
              install -DT "./cmd/core-common-config-bootstrapper/res/configuration.yaml" \
                  "$SNAPCRAFT_PART_INSTALL/config/core-common-config-bootstrapper/res/configuration.yaml"
          ;;
          "security-file-token-provider")
              install -DT "./cmd/security-secretstore-setup/res-file-token-provider/configuration.toml" \
                  "$SNAPCRAFT_PART_INSTALL/config/security-file-token-provider/res/configuration.toml"
          ;;
          # For security bootstrapping Redis, we only need the configuration file used for "configureRedis"
          # as part of the whole "security-bootstrapper".
          # For security bootstrapping Consul (aka consul-bootstrapper), we then need the security-bootstrapper's
          # toml file and thus here we install both files.
          "security-bootstrapper")
              install -DT "./cmd/security-bootstrapper/res-bootstrap-redis/configuration.toml" \
                  "$SNAPCRAFT_PART_INSTALL/config/security-bootstrapper/res-bootstrap-redis/configuration.toml"
              install -DT "./cmd/security-bootstrapper/res/configuration.toml" \
                  "$SNAPCRAFT_PART_INSTALL/config/security-bootstrapper/res/configuration.toml"
          ;;
          # The security-secrets-config doesn't have a default configuration.toml, but since it shares
          # the same config as proxy-setup, just use that one.
          "secrets-config")
              install -DT "./cmd/secrets-config/res/configuration.toml" \
                  "$SNAPCRAFT_PART_INSTALL/config/secrets-config/res/configuration.toml"
          ;;
          *)
              install -DT "./cmd/$service/res/configuration.toml" "$SNAPCRAFT_PART_INSTALL/config/$service/res/configuration.toml"
          esac

      done

      install -DT "./Attribution.txt" "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/Attribution.txt"
      install -DT "./LICENSE" "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/LICENSE"

      # install the json config files for security-file-token-provider
      #
      # note that the file contents are processed using the real
      # value of $SNAP_DATA using jq in the install hook
      cp "./cmd/security-file-token-provider/res/token-config.json" \
        "$SNAPCRAFT_PART_INSTALL/config/security-file-token-provider/res/token-config.json"

    build-packages:
      - zip
      - pkg-config

  vault:
    plugin: nil
    build-packages:
      - curl
      - unzip
    override-build: |
      VERSION=1.11.3

      # use dpkg architecture to figure out the target arch
      case "$(dpkg --print-architecture)" in
        amd64)
          FILE_NAME=vault_${VERSION}_linux_amd64.zip
          FILE_HASH=b433413ce524f26abe6292f7fc95f267e809daeacdf7ba92b68dead322f92deb
          ;;
        arm64)
          FILE_NAME=vault_${VERSION}_linux_arm64.zip
          FILE_HASH=5ccf49bd3601e29d6d1a8c321ece1eacf0f7cc12ea604ac392edd4f7a54d69c4
          ;;
      esac

      # download the archive and verify the checksum
      # NOTE: the archive only includes the binary distribution, 
      # with no config or license files
      curl --silent --show-error --location --output $FILE_NAME \
        https://releases.hashicorp.com/vault/$VERSION/$FILE_NAME
      echo "$FILE_HASH $FILE_NAME" > sha256
      sha256sum -c sha256 | grep OK
      
      unzip $FILE_NAME -d $SNAPCRAFT_PART_INSTALL
    organize:
      vault: bin/vault
