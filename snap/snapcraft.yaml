name: edgexfoundry
base: core18
type: app
adopt-info: version
summary: Open-source framework for IoT edge computing
description: |
  EdgeX Foundry is a vendor-neutral open source project hosted by The Linux 
  Foundation building a common open framework for IoT edge computing. This 
  snap contains all of the EdgeX core, security, and support reference 
  services, as well as Consul, Kong, Redis, Vault, and device-virtual.
  The packaging for this snap can be found at:
    https://github.com/edgexfoundry/edgex-go

icon: snap/local/assets/edgex-snap-icon.png

# Different epochs prevent refreshes between major versions of EdgeX due
# to continued configuration changes.
#
# delhi: 0, edinburgh: 1, fuji: 2, geneva: 3, hanoi: 4, ireland: 5
epoch: 5

architectures:
  - build-on: arm64
  - build-on: amd64

# we need snapd2.45 for setpriv policy allowing it's usage of
# setgroups(0,<not NUL>)
# see https://github.com/snapcore/snapd/pull/8220 for full details
assumes: [snapd2.45]

# postgres needs to run as the snap_daemon user
system-usernames:
  snap_daemon: shared

# Ideally snapcraft would generate this command-chain spec for the hooks
# automatically, but that doesn't currently work, see
# https://bugs.launchpad.net/snapd/+bug/1824255
# In the meantime, make sure that the snapcraft-runner gets generated by
# the apps by specifying the full adapter in at least one of the apps, and
# manually craft the command-chain for the configure hook here to passthrough
# to the snap.yaml
# All of this is necessary so we can use jq and other tools from inside the
# snap in the configure and install hooks
# See also https://bugs.launchpad.net/snapcraft/+bug/1848381 for specifying
# environment for hooks
passthrough:
  hooks:
    configure:
      command-chain:
        - snap/command-chain/snapcraft-runner
      plugs: [network]
    install:
      environment:
        LC_ALL: C.UTF-8
        LANG: C.UTF-8
        PGHOST: $SNAP_COMMON/sockets
        SNAPCRAFT_PRELOAD_REDIRECT_ONLY_SHM: 1
      command-chain:
        - snap/command-chain/snapcraft-runner
        - bin/snapcraft-preload

# kong runs things through luarocks and luarocks expects it's configuration to
# be located here and we can't override this at runtime, so map what's in
# $SNAP to the expected location
layout:
  /etc/luarocks:
    bind: $SNAP/etc/luarocks
  /usr/local:
    bind: $SNAP/usr/local

grade: stable
confinement: strict

apps:
  # edgex microservices
  consul:
    adapter: full
    command: bin/start-consul.sh
    daemon: forking
    plugs: [network, network-bind]
  redis:
    adapter: full
    after: [security-bootstrap-redis]
    command: bin/redis-server $CONFIG_FILE $DIR_OPT $SAVE_OPT1 $SAVE_OPT2
    environment:
      DIR_OPT: "--dir $SNAP_DATA/redis"
      SAVE_OPT1: "--save 900 1"
      SAVE_OPT2: "--save 300 10"
      CONFIG_FILE: "$SNAP_DATA/redis/conf/redis.conf"
    daemon: simple
    plugs: [network, network-bind]
  postgres:
    adapter: full
    command: usr/lib/postgresql/10/bin/postgres -D $SNAP_DATA/postgresql/10/main -c $CONFIG_ARG
    daemon: simple
    environment:
      CONFIG_ARG: config_file=$SNAP_DATA/etc/postgresql/10/main/postgresql.conf
      SNAPCRAFT_PRELOAD_REDIRECT_ONLY_SHM: 1
    command-chain:
      - bin/drop-snap-daemon.sh
      - bin/snapcraft-preload
    plugs:
      - network
      - network-bind
  kong-daemon:
    adapter: full
    after:
      - postgres
    command: bin/kong-daemon.sh
    command-chain:
      - bin/perl5lib-launch.sh
      - bin/kong-launch.sh
    daemon: forking
    environment:
      KONG_CONF: $SNAP_DATA/config/security-proxy-setup/kong.conf
      KONG_LOGS_DIR: $SNAP_COMMON/logs
      KONG_PROXY_ACCESS_LOG: $SNAP_COMMON/logs/kong-proxy-access.log
      KONG_ADMIN_ACCESS_LOG: $SNAP_COMMON/logs/kong-admin-access.log
      KONG_PROXY_ERROR_LOG: $SNAP_COMMON/logs/kong-proxy-error.log
      KONG_ADMIN_ERROR_LOG: $SNAP_COMMON/logs/kong-admin-error.log
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
    start-timeout: 15m
    plugs:
      - network
      - network-bind
    stop-command: bin/kong-stop.sh
  vault:
    adapter: none
    command: bin/vault server --config $VAULT_CONFIG
    daemon: simple
    environment:
      VAULT_CONFIG: "$SNAP_DATA/config/security-secret-store/vault-config.hcl"
      VAULT_ADDR: "http://localhost:8200"
    plugs:
      - network
      - network-bind
  vault-cli:
    adapter: none
    command: bin/vault
    environment:
      VAULT_CONFIG: "$SNAP_DATA/config/security-secret-store/vault-config.hcl"
      VAULT_ADDR: "http://localhost:8200"
    plugs:
      - network
      - network-bind
  security-secretstore-setup:
    adapter: full
    after: [vault]
    command: >-
      bin/security-secretstore-setup -confdir $SNAP_DATA/config/security-secretstore-setup/res $VAULT_INTERVAL
    daemon: oneshot
    environment:
      VAULT_INTERVAL: "--vaultInterval=10"
      SECRETSERVICE_SERVER: localhost
      # environment vars for security-secretstore-setup (aka vault-worker)
      SECRETSERVICE_TOKENFOLDERPATH: $SNAP_DATA/config/security-secretstore-setup/res
      SECRETSERVICE_TOKENPROVIDER: $SNAP/bin/security-file-token-provider
      SECRETSERVICE_TOKENPROVIDERARGS: "-confdir, $SNAP_DATA/config/security-file-token-provider/res"
      SECRETSERVICE_TOKENPROVIDERADMINTOKENPATH: $SNAP_DATA/secrets/tokenprovider/secrets-token.json

      # environment for security-file-token-provider, exec'd by secretstore-setup
      TOKENFILEPROVIDER_PRIVILEGEDTOKENPATH: $SNAP_DATA/secrets/tokenprovider/secrets-token.json
      TOKENFILEPROVIDER_CONFIGFILE: $SNAP_DATA/config/security-file-token-provider/res/token-config.json
      TOKENFILEPROVIDER_OUTPUTDIR: $SNAP_DATA/secrets

    start-timeout: 15m
    plugs: [network]
  security-proxy-setup:
    adapter: none
    after:
      - security-secretstore-setup
      - kong-daemon
    command: bin/security-proxy-setup -confdir $SNAP_DATA/config/security-proxy-setup/res $INIT_ARG
    environment:
      INIT_ARG: "--init=true"
      SECRETSERVICE_TOKENPATH: $SNAP_DATA/secrets/edgex-security-proxy-setup/secrets-token.json
    daemon: oneshot
    start-timeout: 15m
    plugs: [network]
  # This is a simple service which calls into vault to retrieve the Redis password and then 
  # to generate Redis config file for Redis server to start up with credentials and ACL rules. 
  # Redis can be started once the confFile is created. Once the config file has been generated, 
  # this service exits. In the Docker version, the customized redis' entrypoint.sh performs 
  # the similar actions as described above.
  security-bootstrap-redis:
    adapter: none
    after:
      - security-secretstore-setup
    command: bin/security-bootstrapper -confdir $SNAP_DATA/config/security-bootstrapper/res configureRedis
    environment:
      # TODO: determine the correct cmd-line args & env var overrides...
      SECRETSTORE_SERVERNAME: localhost
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/edgex-security-bootstrap-redis/secrets-token.json
      DATABASECONFIG_PATH: $SNAP_DATA/redis/conf
      DATABASECONFIG_NAME: redis.conf
    daemon: oneshot
    plugs: [network]
  core-data:
    adapter: full
    after:
      - security-bootstrap-redis
      - security-proxy-setup
    command: bin/core-data -confdir $SNAP_DATA/config/core-data/res -cp -r
    command-chain:
      - bin/security-secret-store-env-var.sh
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/edgex-core-data/secrets-token.json
    daemon: simple
    plugs: [network, network-bind]
    # for now, specify a shorter stop-timeout until services learn how
    # to handle SIGTERM properly with as per
    # https://github.com/edgexfoundry/edgex-go/issues/1306
    stop-timeout: 10s
  core-metadata:
    adapter: none
    after:
      - security-bootstrap-redis
      - security-proxy-setup
    command: bin/core-metadata -confdir $SNAP_DATA/config/core-metadata/res -cp -r
    command-chain:
      - bin/security-secret-store-env-var.sh
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/edgex-core-metadata/secrets-token.json
    daemon: simple
    plugs: [network, network-bind]
    stop-timeout: 10s
  core-command:
    adapter: none
    after:
      - security-bootstrap-redis
      - security-proxy-setup
    command: bin/core-command -confdir $SNAP_DATA/config/core-command/res -cp -r
    command-chain:
      - bin/security-secret-store-env-var.sh
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/edgex-core-command/secrets-token.json
    daemon: simple
    plugs: [network, network-bind]
    stop-timeout: 10s
  support-notifications:
    adapter: none
    after:
      - security-bootstrap-redis
      - security-proxy-setup
    command: bin/support-notifications -confdir $SNAP_DATA/config/support-notifications/res -cp -r
    command-chain:
      - bin/security-secret-store-env-var.sh
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/edgex-support-notifications/secrets-token.json
    daemon: simple
    plugs: [network, network-bind]
    stop-timeout: 10s
  support-scheduler:
    adapter: none
    after:
      - security-bootstrap-redis
      - security-proxy-setup
    command: bin/support-scheduler -confdir $SNAP_DATA/config/support-scheduler/res -cp -r
    command-chain:
      - bin/security-secret-store-env-var.sh
    environment:
      SECRETSTORE_TOKENFILE: $SNAP_DATA/secrets/edgex-support-scheduler/secrets-token.json
    daemon: simple
    plugs: [network, network-bind]
    stop-timeout: 10s
  sys-mgmt-agent:
    adapter: none
    after:
      - security-bootstrap-redis
      - security-proxy-setup
    command: bin/sys-mgmt-agent -confdir $SNAP_DATA/config/sys-mgmt-agent/res -cp -r
    command-chain:
      - bin/security-secret-store-env-var.sh
    environment:
      EXECUTORPATH: $SNAP/bin/sys-mgmt-agent-snap-executor.sh
    daemon: simple
    plugs: [network, network-bind]
  device-virtual:
    adapter: none
    after:
      - security-bootstrap-redis
      - security-proxy-setup
      - core-data
      - core-metadata
    command: bin/device-virtual -confdir $SNAP_DATA/config/device-virtual/res -cp -r
    daemon: simple
    environment:
      DEVICE_PROFILESDIR: $SNAP_DATA/config/device-virtual/res
    plugs: [network, network-bind]
  app-service-configurable:
    adapter: full
    command: >-
      bin/app-service-configurable -cp -r -s
      -confdir $SNAP_DATA/config/app-service-configurable/res
      -profile rules-engine
    daemon: simple
    environment:
      BINDING_PUBLISHTOPIC: events
      EDGEX_SECURITY_SECRET_STORE: "false"
    plugs: [network, network-bind]
  # helper commands the snap exposes
  security-proxy-setup-cmd:
    adapter: none
    command: bin/security-proxy-setup
    environment:
      SECRETSERVICE_TOKENPATH: $SNAP_DATA/secrets/edgex-security-proxy-setup/secrets-token.json
    plugs: [home, removable-media, network]
  secrets-config:
    adapter: none
    # not a mistake--secrets-config re-uses security-proxy-setup's configuration.toml
    command: bin/secrets-config -confdir $SNAP_DATA/config/security-proxy-setup/res
    plugs: [home, removable-media, network]
  redis-cli:
    adapter: full
    command: bin/redis-cli
    plugs: [home, removable-media, network]
  consul-cli:
    adapter: none
    command: bin/consul
    plugs: [network, network-bind]
  curl:
    adapter: full
    command: usr/bin/curl
    plugs: [network]
  jq:
    adapter: full
    command: usr/bin/jq
    plugs: [home, removable-media]
  kong:
    adapter: full
    command: usr/local/bin/kong
    command-chain:
      - bin/perl5lib-launch.sh
      - bin/kong-launch.sh
    environment:
      KONG_LOGS_DIR: $SNAP_COMMON/logs
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
    plugs: [home, removable-media, network, network-bind]
  psql:
    adapter: full
    command: usr/bin/psql
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      PGHOST: $SNAP_COMMON/sockets
      PGDATABASE: kong
    command-chain:
      - bin/perl5lib-launch.sh
      # psql should be run as the snap_daemon user, which is the user
      # who is initially created as a role with postgres
      - bin/drop-snap-daemon.sh
    plugs: [home, removable-media, network]
  psql-any:
    adapter: full
    command: usr/bin/psql
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      PGHOST: $SNAP_COMMON/sockets
      PSQLRC: $SNAP_USER_COMMON/.psqlrc
    command-chain:
      - bin/perl5lib-launch.sh
    plugs: [home, removable-media, network]
  createdb:
    adapter: full
    command: usr/bin/createdb
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      PGHOST: $SNAP_COMMON/sockets
    command-chain:
      - bin/perl5lib-launch.sh
      # createdb should be run as the snap_daemon user, which is the user
      # who is initially created as a role with postgres
      - bin/drop-snap-daemon.sh
    plugs: [home, removable-media, network]
  kuiper:
    adapter: full
    command: bin/kuiper-server
    daemon: simple
    environment:
      KuiperBaseKey: $SNAP_DATA/kuiper
      # KUIPER_DEBUG: "true"
      KUIPER_CONSOLE_LOG: "true"
      KUIPER_REST_PORT: 48075
      EDGEX_SERVER: localhost
      EDGEX_SERVICE_SERVER: http://localhost:48080
      EDGEX_TOPIC: events
      EDGEX_PROTOCOL: tcp
      EDGEX_PORT: 5566
    plugs: [network, network-bind]
  kuiper-cli:
    adapter: full
    command: bin/kuiper-cli
    environment:
      KuiperBaseKey: $SNAP_DATA/kuiper
    plugs: [home, network, network-bind]

parts:
  version:
    plugin: nil
    # as with static-packages part, the source dir is unrelated to this part and is used
    # since it changes rarely and therefore will not trigger a new pull
    source: snap/local/build-helpers
    override-pull: |
      cd $SNAPCRAFT_PROJECT_DIR
      if [ -f VERSION ]; then
        PROJECT_VERSION=$(cat VERSION)
      else
        PROJECT_VERSION=local-dev
      fi
      GIT_REVISION=$(git rev-parse --short HEAD)
      snapcraftctl set-version ${PROJECT_VERSION}
  static-packages:
    plugin: nil
    # the default source for a part that doesn't specify one is ".", which
    # then means snapcraft will scan the full git directory here and determine
    # that if anything changed, i.e. the config-common parts with
    # actual scripts, etc. this part also gets marked out of date too and needs
    # rebuilding, even though this part really only depends on a stage-package
    # to resolve this we can just specify the source of something that changes
    # infrequently and will minimize unnecessary part re-building by snapcraft
    source: snap/local/build-helpers
    stage-packages:
      - apg
      - curl
      - jq
      # setpriv with snapd 2.45 + can be used to drop privileges
      - setpriv

  # snapcraft-preload is necessary to make postgres just use a different
  # lockfile location in /dev/shm
  # snapcraft-preload defines LD_PRELOAD to be a dynamic library compiled here
  # which will redirect things like open() that are being called with absolute
  # paths such as /dev/shm/some-dir to snap-specific, confinement supported
  # paths like /dev/shm/$SNAP_INSTANCE_NAME.some-dir before being passed to the
  # actual open() implementation
  # this prevents re-compiling or patching certain applications like postgres
  # to use snap security confinement friendly paths
  # NOTE: if this ever breaks in really scary ways when compiling with lots of
  # warnings, see the comment on the kong part, tldr probably some other C/C++
  # part in the build broke snapcraft-preload by running before
  # snapcraft-preload
  snapcraft-preload:
    source: https://github.com/sergiusens/snapcraft-preload.git
    # unfortunately no tags or releases we can rely on, so just hard-code
    # master at the time of writing for this
    source-commit: d654bbe8a5add5a4bea14d96342b656990c5c818
    plugin: cmake
    build-packages:
      - to arm64:
          - g++-multilib-arm-linux-gnueabihf
          - gcc-multilib-arm-linux-gnueabihf
      - else:
          - gcc-multilib
          - g++-multilib
    stage-packages:
      - to amd64:
          - lib32stdc++6
  postgres:
    plugin: nil
    source: snap/local/build-helpers
    override-build: |
      snapcraftctl build
      # the perl package for postgres hard-codes the bin dir as /usr/lib/postgresql
      # so we need to prepend that with /snap/$SNAP_NAME/current/ before it will
      # work
      if [ -z "$SNAPCRAFT_PROJECT_NAME" ]; then
        echo "SNAPCRAFT_PROJECT_NAME is undefined, snapcraft upstream change?"
        exit 1
      fi
      sed -i -e \
        's@our $binroot = \"/usr/lib/postgresql/\"@our $binroot = \"/snap/'$SNAPCRAFT_PROJECT_NAME'/current/usr/lib/postgresql/\";@' \
        $SNAPCRAFT_PART_INSTALL/usr/share/perl5/PgCommon.pm
    stage-packages:
      # note: version of postgres in core18 that this resolves to is version 10
      - postgresql
      - postgresql-contrib
      - postgresql-client
      - perl
    prime:
       - -usr/share/man/*

  go-build-helper:
    plugin: dump
    # see comment for static-packages part about specifying a source part here
    source: snap/local/build-helpers
    prime: [-*]

  config-common:
    plugin: dump
    source: snap/local/runtime-helpers

  go115:
    plugin: nil
    source: snap/local/build-helpers
    override-build: |
      # use dpkg architecture to figure out our target arch
      # note - we specifically don't use arch
      case "$(dpkg --print-architecture)" in
        amd64)
          FILE_NAME=go1.15.2.linux-amd64.tar.gz
          FILE_HASH=b49fda1ca29a1946d6bb2a5a6982cf07ccd2aba849289508ee0f9918f6bb4552
          ;;
        arm64)
          FILE_NAME=go1.15.2.linux-arm64.tar.gz
          FILE_HASH=c8ec460cc82d61604b048f9439c06bd591722efce5cd48f49e19b5f6226bd36d
          ;;
      esac
      # download the archive, failing on ssl cert problems
      curl https://dl.google.com/go/$FILE_NAME -O
      echo "$FILE_HASH $FILE_NAME" > sha256
      sha256sum -c sha256 | grep OK
      mkdir -p $SNAPCRAFT_STAGE/go1.15
      tar -C $SNAPCRAFT_STAGE/go1.15 -xf "$FILE_NAME" --strip-components=1
    prime:
      - "-*"
    after: [go-build-helper]

  consul:
    after: [go115]
    plugin: make
    source: https://github.com/hashicorp/consul.git
    source-tag: v1.8.4
    source-depth: 1
    stage:
      # duplicated file with the deps of vault, so just drop this one and use
      # the file from the vault part instead
      - -usr/share/doc/github.com/patrickmn/go-cache/LICENSE
      - -usr/share/doc/github.com/miekg/dns/LICENSE
      - -usr/share/doc/github.com/Azure/azure-sdk-for-go/LICENSE

    override-build: |
      # When the snap is built by Jenkins w/in a docker instance, the existence of
      # the top level go.mod file causes the consul build to fail when using go 1.13.
      # This workaround can probably be removed if/when consul is updated to a more
      # recent version.
      if [ -f /build/go.mod ]; then
        mv /build/go.mod /build/go.mod.bk
      fi

      . $SNAPCRAFT_STAGE/bin/go-build-helper.sh
      gopartbootstrap github.com/hashicorp/consul 1.15
      export GO111MODULES=off
      go get -u github.com/kardianos/govendor
      govendor install
      CONSUL_DEV=1 make

      # install the consul binary
      install -DT bin/consul "$SNAPCRAFT_PART_INSTALL/bin/consul"

      # handle consul LICENSE
      # TODO: do PATENT files need copying?
      install -DT "$GOIMPORTPATH/LICENSE" \
                 "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/hashicorp/consul/LICENSE"

      # handle vendor LICENSE files
      cd $GOIMPORTPATH/vendor
      for i in `find . -type f -name "LICENSE"`; do
        install -DT "$i" \
                 "$SNAPCRAFT_PART_INSTALL/usr/share/doc/$i"; done

      # TODO: some LICENSE files fall under .gopath too
      cd $GOPATH/src
      for i in `find . -type f -name "LICENSE"`; do
        install -DT "$i" \
                 "$SNAPCRAFT_PART_INSTALL/usr/share/doc/$i"; done

      if [ -f /build/go.mod.bk ]; then
        mv /build/go.mod.bk /build/go.mod
      fi
    build-packages:
      - make
      - zip

  redis:
    source: https://github.com/redis/redis.git
    source-tag: "6.0.9"
    source-depth: 1
    plugin: make
    make-install-var: PREFIX

  edgex-go:
    source: .
    plugin: make
    after: [go115]
    override-build: |
      export PATH="$SNAPCRAFT_STAGE/go1.15/bin:$GOPATH/bin:$PATH"
      cd $SNAPCRAFT_PART_SRC

      make build

      # copy service binaries, configuration, and license files into the snap install
      for service in core-command core-data core-metadata support-notifications support-scheduler sys-mgmt-agent \
          security-proxy-setup security-secretstore-setup security-file-token-provider \
          security-bootstrapper secrets-config; do

          install -DT "./cmd/$service/$service" "$SNAPCRAFT_PART_INSTALL/bin/$service"

          case "$service" in
          "security-file-token-provider")
              install -DT "./cmd/security-secretstore-setup/res-file-token-provider/configuration.toml" \
                  "$SNAPCRAFT_PART_INSTALL/config/security-file-token-provider/res/configuration.toml"
          ;;
          # For security bootstrapping Redis, we only need the configuration file used for "configureRedis"
          # as part of the whole "security-bootstrapper". The other parts of security-bootstrapper is only 
          # for Docker version running in docker-compose file cases.
          "security-bootstrapper")
              install -DT "./cmd/security-bootstrapper/res-bootstrap-redis/configuration.toml" \
                  "$SNAPCRAFT_PART_INSTALL/config/security-bootstrapper/res-bootstrap-redis/configuration.toml"
          ;;
          # The security-secrets-config doesn't have a default configuration.toml, but since it shares
          # the same config as proxy-setup, just use that one.
          "secrets-config")
              install -DT "./cmd/security-proxy-setup/res/configuration.toml" \
                  "$SNAPCRAFT_PART_INSTALL/config/secrets-config/res/configuration.toml"
          ;;
          *)
              install -DT "./cmd/$service/res/configuration.toml" "$SNAPCRAFT_PART_INSTALL/config/$service/res/configuration.toml"
          esac

      done

      install -DT "./Attribution.txt" "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/Attribution.txt"
      install -DT "./LICENSE" "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/edgexfoundry/LICENSE"

      # install the json config files for security-file-token-provider
      #
      # note that the file contents are processed using the real
      # value of $SNAP_DATA using jq in the install hook
      cp "./cmd/security-file-token-provider/res/token-config.json" \
        "$SNAPCRAFT_PART_INSTALL/config/security-file-token-provider/res/token-config.json"

    build-packages:
      - libzmq3-dev
      - zip
      - pkg-config
    stage-packages:
      - libzmq5

  kong:
    plugin: nil
    build-packages:
      - curl
    stage-packages:
      - libpcre3
      - perl
      - zlib1g-dev
    override-build: |
      # use dpkg architecture to figure out our target arch
      # note - we specifically don't use arch
      case "$(dpkg --print-architecture)" in
        amd64)
          FILE_NAME=kong-2.0.5.xenial.amd64.deb
          FILE_HASH=450223a011dba0d6eeb6a192be368e7bcd45a5dc063c743ed6f3d37eb95237b8
          ;;
        arm64)
          FILE_NAME=kong-2.0.5.xenial.arm64.deb
          FILE_HASH=15aa5fb2eb0c992afa277b09cb03b3b940df9704ab9e8d93327a72c0cb87eb09
          ;;
      esac
      # download the archive, failing on ssl cert problems
      curl -L https://bintray.com/kong/kong-deb/download_file?file_path=$FILE_NAME -o $FILE_NAME
      echo "$FILE_HASH $FILE_NAME" > sha256
      sha256sum -c sha256 | grep OK
      dpkg -x $FILE_NAME $SNAPCRAFT_PART_INSTALL

      # make kong world readable & executable to make snapcraft happy
      chmod 755 $SNAPCRAFT_PART_INSTALL/usr/local/bin/kong

      mkdir -p $SNAPCRAFT_PART_INSTALL/config/security-proxy-setup
      cp $SNAPCRAFT_PART_INSTALL/etc/kong/kong.conf.default $SNAPCRAFT_PART_INSTALL/config/security-proxy-setup/kong.conf

      # by default the Kong deb contains an absolute symlink @ /usr/local/openresty/bin/openresty which points to /usr/local/openresty/nginx/sbin/nginx
      # because the review-tools for the snap store do not currently allow using absolute symlinks that point outside of the snap
      # (and are not smart enough to realize there is a layout involved in our usage here), we delete the absolute symlink
      # and re-create it as a relative symlink pointing to ../nginx/sbin/nginx instead
      cd $SNAPCRAFT_PART_INSTALL/usr/local/openresty/bin
      rm openresty
      ln -s ../nginx/sbin/nginx openresty

    prime:
       - -lib/systemd/*
       - -usr/share/man/*

  # SECURITY SERVICES PARTS
  vault:
    after: [go115]
    plugin: make
    source: https://github.com/hashicorp/vault.git
    source-tag: v1.5.4
    source-depth: 1
    override-build: |
      . $SNAPCRAFT_STAGE/bin/go-build-helper.sh
      gopartbootstrap github.com/hashicorp/vault 1.15
      export GO111MODULES=off
      make bootstrap
      make dev

      # install the vault binary
      install -DT bin/vault "$SNAPCRAFT_PART_INSTALL/bin/vault"

      # handle vault LICENSE
      # TODO: do PATENT files need copying?
      install -DT "$GOIMPORTPATH/LICENSE" \
                 "$SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/hashicorp/vault/LICENSE"

      # handle vendor LICENSE files
      cd $GOIMPORTPATH/vendor
      for i in `find . -type f -name "LICENSE"`; do
        install -DT "$i" \
                 "$SNAPCRAFT_PART_INSTALL/usr/share/doc/$i"; done

      # TODO: some LICENSE files fall under .gopath too
      cd $GOPATH/src
      for i in `find . -type f -name "LICENSE"`; do
        install -DT "$i" \
                 "$SNAPCRAFT_PART_INSTALL/usr/share/doc/$i"; done

      # delete duplicated license files between vault + consul
      # as snapcraft will fail we attempt to install duplicated files into the snap
      rm -rf $SNAPCRAFT_PART_INSTALL/usr/share/doc/cloud.google.com/go/LICENSE
      rm -rf $SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/golang/protobuf/LICENSE
      rm -rf $SNAPCRAFT_PART_INSTALL/usr/share/doc/github.com/sean-/seed/LICENSE
      rm -rf $SNAPCRAFT_PART_INSTALL/usr/share/doc/golang.org/x/oauth2/LICENSE
      rm -rf $SNAPCRAFT_PART_INSTALL/usr/share/doc/google.golang.org/grpc/LICENSE

      if [ -f /build/go.mod.bk ]; then
        mv /build/go.mod.bk /build/go.mod
      fi

  # DEVICE SERVICES parts
  device-virtual-go:
    source: https://github.com/edgexfoundry/device-virtual-go.git
    source-depth: 1
    source-tag: v1.2.1
    plugin: make
    after: [go115]
    override-build: |
      export PATH="$SNAPCRAFT_STAGE/go1.15/bin:$GOPATH/bin:$PATH"
      cd $SNAPCRAFT_PART_SRC
      # create VERSION file (supposed to be created by jenkins pipeline...)
      echo "1.2.1" > ./VERSION
      make build

      install -DT "./cmd/device-virtual" "$SNAPCRAFT_PART_INSTALL/bin/device-virtual"
      install -DT "./cmd/res/configuration.toml" \
        "$SNAPCRAFT_PART_INSTALL/config/device-virtual/res/configuration.toml"

      for profileType in bool float int uint binary; do
        install -T "./cmd/res/device.virtual.$profileType.yaml" \
          "$SNAPCRAFT_PART_INSTALL/config/device-virtual/res/device.virtual.$profileType.yaml"
      done

      install -DT "./Attribution.txt" \
         "$SNAPCRAFT_PART_INSTALL/usr/share/doc/device-virtual/Attribution.txt"
      install -DT "./LICENSE" \
         "$SNAPCRAFT_PART_INSTALL/usr/share/doc/device-virtual/LICENSE"

  app-service-config:
    source: https://github.com/edgexfoundry/app-service-configurable.git
    # TODO(Hanoi): update to source-tag for release
    source-branch: master
    plugin: make
    build-packages: [gcc, git, libzmq3-dev, pkg-config]
    stage-packages: [libzmq5]
    after: [go115]
    override-build: |
      export PATH="$SNAPCRAFT_STAGE/go1.15/bin:$GOPATH/bin:$PATH"
      cd $SNAPCRAFT_PART_SRC
      make build

      # install the service binary, configuration, and license files
      install -DT "./app-service-configurable" \
         "$SNAPCRAFT_PART_INSTALL/bin/app-service-configurable"
      install -DT "./res/rules-engine/configuration.toml" \
         "$SNAPCRAFT_PART_INSTALL/config/app-service-configurable/res/rules-engine/configuration.toml"
      install -DT "./Attribution.txt" \
         "$SNAPCRAFT_PART_INSTALL/usr/share/doc/app-service-configurable/Attribution.txt"
      install -DT "./LICENSE" \
         "$SNAPCRAFT_PART_INSTALL/usr/share/doc/app-service-configurable/LICENSE"

  kuiper:
    source: https://github.com/emqx/kuiper.git
    source-tag: 0.4.1
    plugin: make
    after: [go115]
    override-build: |
      export PATH="$SNAPCRAFT_STAGE/go1.15/bin:$GOPATH/bin:$PATH"

      cd $SNAPCRAFT_PART_SRC
      export BUILD_PATH=$SNAPCRAFT_PART_BUILD
      export PACKAGES_PATH=$SNAPCRAFT_PART_INSTALL
      make build_with_edgex
      make real_pkg
      cd $SNAPCRAFT_PART_INSTALL
      tar -xvf kuiper*.tar.gz --strip-components=1
      rm *.zip *.gz

      install -DT "$SNAPCRAFT_PART_SRC/LICENSE" \
         "$SNAPCRAFT_PART_INSTALL/usr/share/doc/kuiper/LICENSE"
    organize:
      bin/cli: bin/kuiper-cli
      bin/server: bin/kuiper-server
    stage:
      - -etc/mqtt_source.yaml
    stage-packages:
      - libzmq5
