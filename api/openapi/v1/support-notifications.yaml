openapi: 3.0.0
info:
  title: support-notifications
  version: 1.2.0
servers:
- url: http://localhost:48060/api
paths:
  /v1/config:
    get:
      description: Fetch the current state of the service's configuration.
      responses:
        200:
          description: The service's configuration as a JSON document
        400:
          description: Request is either invalid, unparseable, or the
            configuration cannot be serialized.
  /cleanup:
    delete:
      description: Delete all the notifications if the current timestamp minus their
        last modification timestamp is less than a default age setting, and the corresponding
        transmissions will also be deleted.
      responses:
        202:
          description: Return 202 Accepted status code without content when receiving
            the request.
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /cleanup/age/{age}:
    delete:
      description: Delete all the notifications if the current timestamp minus their
        last modification timestamp is less than the age parameter, and the corresponding
        transmissions will also be deleted.
      parameters:
      - name: age
        in: path
        description: Specify the age of the type name, where the format is in milliseconds.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        202:
          description: Return a 202 Accepted status code without content when receiving
            the request.
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/notification:
    post:
      description: Receive alerts or notifications. Notifications of any severity
        level are processed / distributed immediately.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notification'
        required: true
      responses:
        202:
          description: Indicates that the notification has been received.
        409:
          description: The slug is duplicate. Try another one.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/notification/{id}:
    get:
      description: Fetch a specific notification by database specified ID, returning
        null if none are found.
      parameters:
        - name: id
          in: path
          description: database-generated ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: Return a notification
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notification'
        404:
          description: A notification with the specified ID cannot be found.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/notification/age/{age}:
    delete:
      description: Delete the proccessed notifications if the current timestamp minus
        their last modification timestamp is less than the age parameter.
      parameters:
      - name: age
        in: path
        description: Specify the age of notification, and the format is in milliseconds.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        200:
          description: Return true to represent success.
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/notification/end/{end}/{limit}:
    get:
      description: Query the notification by creation timestamp before end date.
      parameters:
      - name: limit
        in: path
        description: The maximum number of records to fetch.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: end
        in: path
        description: End date in long form.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        200:
          description: Return a list of notifications.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotificationArray'
        413:
          description: The assigned limit perameter exceeds the current max limit.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/notification/labels/{labels}/{limit}:
    get:
      description: Query the notification by labels matching any one of them.
      parameters:
      - name: limit
        in: path
        description: The maximum number of records to fetch.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: labels
        in: path
        description: Accept multiple labels separated by comma.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Return a list of notifications.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotificationArray'
        413:
          description: The assigned limit perameter exceeds the current max limit.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/notification/new/{limit}:
    get:
      description: Fetch the unprocessed notification, where status = NEW.
      parameters:
      - name: limit
        in: path
        description: The maximum number of records to fetch.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        200:
          description: Return a list of notifications.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotificationArray'
        413:
          description: The assigned limit perameter exceeds the current max limit.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/notification/sender/{sender}/{limit}:
    get:
      description: Query the notification by sender name with limited returned records.
      parameters:
      - name: limit
        in: path
        description: The maximum number of records to fetch.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: sender
        in: path
        description: The sender name of the subscription, which could be partially
          matched, and is case insensitive for query.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Return a list of notifications.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotificationArray'
        413:
          description: The assigned limit perameter exceeds the current max limit.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/notification/slug/{slug}:
    get:
      description: Query a specific notification by slug.
      parameters:
      - name: slug
        in: path
        description: Slug is a meaningful identifier provided by client, and is case
          insensitive for query.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Return a notification
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notification'
        404:
          description: The targeted resource is not found.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Delete a specific notification by slug.
      parameters:
      - name: slug
        in: path
        description: Slug is a meaningful identifier provided by client, and is case
          insensitive for query.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Return true to represent success.
        404:
          description: The targeted resource is not found.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/notification/start/{start}/end/{end}/{limit}:
    get:
      description: Query the notification by creation timestamp between start date
        and end date.
      parameters:
      - name: limit
        in: path
        description: The maximum number of records to fetch.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: start
        in: path
        description: Start date in long form.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: end
        in: path
        description: End date in long form.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        200:
          description: Return a list of notifications.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotificationArray'
        413:
          description: The assigned limit perameter exceeds the current max limit.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/notification/start/{start}/{limit}:
    get:
      description: Query the notification by creation timestamp after start date.
      parameters:
      - name: limit
        in: path
        description: The maximum number of records to fetch.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: start
        in: path
        description: Start date in long form.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        200:
          description: Return a list of notifications.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotificationArray'
        413:
          description: The assigned limit perameter exceeds the current max limit.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/ping:
    get:
      description: Test service providing an indication that the service is available.
      responses:
        200:
          description: Return value of "pong."
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/subscription:
    get:
      description: List all subscriptions.
      responses:
        200:
          description: Return subscriptions.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SubscriptionArray'
    put:
      description: Update a specific subscription according to the slug in request
        body, and the Boolean value "true" will be returned to indicate updating successfully.
      requestBody:
        $ref: '#/components/requestBodies/subscription'
      responses:
        200:
          description: Return true to represent success.
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Create a new Subscritpion.
      requestBody:
        $ref: '#/components/requestBodies/subscription'
      responses:
        201:
          description: Return the slug when the subscription has been created successfully.
        409:
          description: The slug is duplicate. Try another one.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/subscription/categories/{categories}:
    get:
      description: Query the subscription by subscribed categories matching any one
        of them.
      parameters:
      - name: categories
        in: path
        description: The subscribed categories, accepting multiple categories separated
          by comma.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Return subscriptions.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SubscriptionArray'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/subscription/categories/{categories}/labels/{labels}:
    get:
      description: Query the subscription by subscribed categories and labels matching
        any one of them.
      parameters:
      - name: categories
        in: path
        description: The subscribed categories, accepting multiple categories separated
          by comma.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: labels
        in: path
        description: The subscribed labels, accepting multiple labels separated by
          comma.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Return subscriptions.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SubscriptionArray'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/subscription/labels/{labels}:
    get:
      description: Query the subscription by subscribed labels matching any one of
        them.
      parameters:
      - name: labels
        in: path
        description: The subscribed labels, accepting multiple labels separated by
          comma.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Return subscriptions.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SubscriptionArray'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/subscription/receiver/{receiver}:
    get:
      description: Query the subscriptions by Receiver Name.
      parameters:
      - name: receiver
        in: path
        description: The receiver name of the subscription, which could be partially
          matched, and is case insensitive for query.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Return subscriptions.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SubscriptionArray'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/subscription/slug/{slug}:
    get:
      description: Query a specific subscription by slug.
      parameters:
      - name: slug
        in: path
        description: Slug is a meaningful identifier provided by client, and is case
          insensitive for query.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Return a subscription.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/subscription'
        404:
          description: The targeted resource is not found.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Delete a specific subscription by slug.
      parameters:
      - name: slug
        in: path
        description: Slug is a meaningful identifier provided by client, and is case
          insensitive for query.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Return true to represent success.
        404:
          description: The targeted resource is not found.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/subscription/{id}:
    get:
      description: Fetch a specific subscription by database specified ID, returning
        null if none are found.
        issues
      parameters:
      - name: id
        in: path
        description: database-generated ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: subscription
        404:
          description: If the subscription cannot be found by ID.
        500:
          description: For unknown or unanticipated issues.
    delete:
      description: Delete a subscription given its database-generated ID.
      parameters:
      - name: id
        in: path
        description: Database-generated ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Boolean on success of deletion request
        404:
          description: If the subscription cannot be found by ID.
        500:
          description: For unknown or unanticipated issues.
  /v1/transmission/acknowledged/age/{age}:
    delete:
      description: Delete all the acknowledged transmissions, where status = ACKNOWLEDGED
        if the current timestamp minus their last modification timestamp is less than
        the age parameter.
      parameters:
      - name: age
        in: path
        description: Specify the age of transmission, and the format is in milliseconds.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        200:
          description: Return true to represent success.
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/transmission/end/{end}/{limit}:
    get:
      description: Query the transmissions by creation timestamp before end date.
      parameters:
      - name: limit
        in: path
        description: The maximum number of records to fetch.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: end
        in: path
        description: End date in long form.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        200:
          description: Return transmissions.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TransmissionArray'
        413:
          description: The assigned limit perameter exceeds the current max limit.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/transmission/escalated/age/{age}:
    delete:
      description: Delete all the escalated transmissions, where status = ESCALATED if
        the current timestamp minus their last modification timestamp is less than
        the age parameter.
      parameters:
      - name: age
        in: path
        description: Specify the age of transmission, and the format is in milliseconds.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        200:
          description: Return true to represent success.
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/transmission/escalated/{limit}:
    get:
      description: Query the escalated transmissions, where status = ESCALATED
      parameters:
      - name: limit
        in: path
        description: The maximum number of records to fetch.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        200:
          description: Return transmissions.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TransmissionArray'
        413:
          description: The assigned limit perameter exceeds the current max limit.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/transmission/failed/age/{age}:
    delete:
      description: Delete all the failed transmissions, where status = FAILED and resendCount
        >= resend limit if the current timestamp minus their last modification timestamp
        is less than the age parameter.
      parameters:
      - name: age
        in: path
        description: Specify the age of transmission, and the format is in milliseconds.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        200:
          description: Return true to represent success.
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/transmission/failed/{limit}:
    get:
      description: Query the failed transmissions, where status = FAILED
      parameters:
      - name: limit
        in: path
        description: The maximum number of records to fetch.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        200:
          description: Return transmissions.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TransmissionArray'
        413:
          description: The assigned limit perameter exceeds the current max limit.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/transmission/sent/age/{age}:
    delete:
      description: Delete all the sent transmissions, where status = SENT if the current
        timestamp minus their last modification timestamp is less than the age parameter.
      parameters:
      - name: age
        in: path
        description: Specify the age of transmission, and the format is in milliseconds.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        200:
          description: Return true to represent success.
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/transmission/slug/{slug}/start/{start}/end/{end}/{limit}:
    get:
      description: Query limited transmissions with specified slug and created date
        range
      parameters:
      - name: limit
        in: path
        description: The maximum number of records to fetch.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: slug
        in: path
        description: This is a notification slug which is a meaningful identifier
          provided by client, and it is case insensitive for query.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: start
        in: path
        description: Start date in long form.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: end
        in: path
        description: End date in long form.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        200:
          description: List of transmissions
        400:
          description: Request is invalid or unparseable
        413:
          description: The assigned limit perameter exceeds the current max limit.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: For unknown or unanticipated issues.
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/transmission/slug/{slug}/{limit}:
    get:
      description: Query the transmissions associating a specific notification by
        the notification slug.
      parameters:
      - name: limit
        in: path
        description: The maximum number of records to fetch.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: slug
        in: path
        description: This is a notification slug which is a meaningful identifier
          provided by client, and it is case insensitive for query.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Return transmissions.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TransmissionArray'
        413:
          description: The assigned limit perameter exceeds the current max limit.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/transmission/start/{start}/end/{end}/{limit}:
    get:
      description: Query the transmissions by creation timestamp between start date
        and end date.
      parameters:
      - name: limit
        in: path
        description: The maximum number of records to fetch.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: start
        in: path
        description: Start date in long form.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: end
        in: path
        description: End date in long form.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        200:
          description: Return transmissions.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TransmissionArray'
        413:
          description: The assigned limit perameter exceeds the current max limit.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/transmission/start/{start}/{limit}:
    get:
      description: Query the transmissions by creation timestamp after start date.
      parameters:
      - name: limit
        in: path
        description: The maximum number of records to fetch.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: start
        in: path
        description: Start date in long form.
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        200:
          description: Return transmissions.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TransmissionArray'
        413:
          description: The assigned limit perameter exceeds the current max limit.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: For unanticipated or unknown issues encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /version:
    get:
      description: Get the API version
      responses:
        200:
          description: The service's API version as JSON document
components:
  schemas:
    Error:
      title: Error Schema
      required:
      - error
      - status
      - timestamp
      type: object
      properties:
        error:
          type: string
        exception:
          type: string
          description: The exception class in the code
        message:
          type: string
        path:
          type: string
        status:
          type: integer
          description: HTTP status code
        timestamp:
          type: integer
    notification:
      title: notification Schema
      required:
      - category
      - content
      - sender
      - severity
      - slug
      type: object
      properties:
        category:
          type: string
          enum:
          - SECURITY
          - HW_HEALTH
          - SW_HEALTH
        content:
          type: string
        created:
          minimum: 0
          type: integer
          description: The creation timestamp
        description:
          type: string
        id:
          type: string
          description: Generated and used by system, and users can ignore this property
        labels:
          uniqueItems: true
          type: array
          items:
            type: string
        modified:
          minimum: 0
          type: integer
          description: The last modification timestamp
        sender:
          type: string
        severity:
          type: string
          enum:
          - CRITICAL
          - NORMAL
        slug:
          type: string
          description: A meaningful identifier provided by client
        status:
          type: string
          enum:
          - NEW
          - PROCESSED
          - ESCALATED
    NotificationArray:
      title: The array of notifications
      type: array
      items:
        $ref: '#/components/schemas/notification'
    subscription:
      title: subscription Schema
      required:
      - channels
      - receiver
      - slug
      type: object
      properties:
        channels:
          uniqueItems: true
          type: array
          items:
            type: object
            anyOf:
            - $ref: '#/components/schemas/RESTfulChannel'
            - $ref: '#/components/schemas/EMAILChannel'
        created:
          minimum: 0
          type: integer
          description: The creation timestamp
        description:
          type: string
        id:
          type: string
        modified:
          minimum: 0
          type: integer
          description: The last modification timestamp
        receiver:
          type: string
        slug:
          type: string
          description: A meaningful identifier provided by client
        subscribedCategories:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - SECURITY
            - HW_HEALTH
            - SW_HEALTH
        subscribedLabels:
          uniqueItems: true
          type: array
          items:
            type: string
    SubscriptionArray:
      title: The array of subscriptions
      type: array
      items:
        $ref: '#/components/schemas/subscription'
    transmission:
      title: transmission Schema
      required:
      - channel
      - notification
      - receiver
      - records
      - resendCount
      - status
      type: object
      properties:
        channel:
          type: object
          oneOf:
          - $ref: '#/components/schemas/RESTfulChannel'
          - $ref: '#/components/schemas/EMAILChannel'
        created:
          minimum: 0
          type: integer
          description: The creation timestamp
        id:
          type: string
        modified:
          minimum: 0
          type: integer
          description: The last modification timestamp
        notification:
          $ref: '#/components/schemas/notification'
        receiver:
          type: string
        records:
          minItems: 1
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TransmissionRecord'
        resendCount:
          minimum: 0
          type: integer
        status:
          type: string
          enum:
          - FAILED
          - SENT
          - ACKNOWLEDGED
          - TRXESCALATED
    TransmissionArray:
      title: The array of transmissions
      type: array
      items:
        $ref: '#/components/schemas/transmission'
    EMAILChannel:
      required:
      - mailAddresses
      - type
      type: object
      properties:
        mailAddresses:
          minItems: 1
          uniqueItems: true
          type: array
          items:
            type: string
        type:
          type: string
          enum:
          - EMAIL
    RESTfulChannel:
      required:
      - type
      - url
      type: object
      properties:
        contentType:
          type: string
        httpMethod:
          type: string
          enum:
          - POST
          - PUT
        type:
          type: string
          enum:
          - REST
        url:
          type: string
    TransmissionRecord:
      required:
      - sent
      - status
      type: object
      properties:
        response:
          type: string
        sent:
          minimum: 0
          type: integer
          description: The sending timestamp
        status:
          type: string
          enum:
          - FAILED
          - SENT
          - ACKNOWLEDGED
  requestBodies:
    subscription:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/subscription'
      required: true
