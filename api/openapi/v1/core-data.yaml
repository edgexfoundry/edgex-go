openapi: 3.0.0
info:
  title: core-data
  version: 1.2.0
servers:
- url: http://localhost:48080/api
paths:
  /v1/config:
    get:
      description: Fetch the current state of the service's configuration.
      responses:
        200:
          description: The service's configuration as JSON document
        400:
          description: Request is invalid or unparseable or if the
            underlying configuration cannot be serialized to JSON properly.
  /v1/event:
    get:
      description: Fetch all events with their associated readings.
      responses:
        200:
          description: List of events
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/event'
        413:
          description: If the number of events exceeds the current max limit.
        500:
          description: For unknown or unanticipated issues.
    put:
      description: Update the event data, not including updating the readings.
      requestBody:
        $ref: '#/components/requestBodies/event'
      responses:
        200:
          description: Boolean on success of update request
        400:
          description: Update request is invalid
        404:
          description: If the event cannot be found by ID.
        500:
          description: For unknown or unanticipated issues.
    post:
      description: Add a new event, along with its associated readings.
      requestBody:
        $ref: '#/components/requestBodies/event'
      responses:
        200:
          description: New event ID
        400:
          description: Creation request is invalid
        404:
          description: If a reading is associated with a non-existing value descriptor,
            or if device verification is enabled and the device is not found.
        500:
          description: For unknown or unanticipated issues.
  /v1/event/checksum/{checksum}:
    put:
      description: Update an existing event's pushed time
      parameters:
      - name: checksum
        in: path
        description: Checksum value of the event provided by core-data via the message
          bus
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Success
        404:
          description: If the event cannot be found by checksum.
        500:
          description: For unknown or unanticipated issues.
  /v1/event/count:
    get:
      description: Return a count of the number of events in core data.
      responses:
        200:
          description: Number of events in the collection
        500:
          description: For unknown or unanticipated issues.
  /v1/event/count/{deviceId}:
    get:
      description: Return a count of the number of events in core data for a given
        device, identified by ID or name.
      parameters:
      - name: deviceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Number of events for the device
        400:
          description: Query request is invalid
        500:
          description: For unknown or unanticipated issues.
  /v1/event/device/{deviceId}:
    delete:
      description: Delete all events and the readings associated with a device, given
        the device's ID.
      parameters:
      - name: deviceId
        in: path
        description: The ID or name of the device associated
          to events
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Count of the number of events deleted
        400:
          description: Could not unescape URL
        404:
          description: If the meta data checks are on and no device is found
            for the supplied ID.
        500:
          description: For unknown or unanticipated issues.
  /v1/event/device/{deviceId}/{limit}:
    get:
      description: Return a list of events with associated readings for a given device,
        sorted by event modified date.
      parameters:
      - name: limit
        in: path
        description: Maximum number of events to fetch, must be less than the max limit
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: deviceId
        in: path
        description: The ID or name of the associated device.
          to events
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: List of events associated with the matching device by ID.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/event'
        400:
          description: Request is invalid or unparseable
        404:
          description: If the meta data checks are on and no device is found for the
            supplied ID.
        413:
          description: If the number of events exceeds the current max limit.
        500:
          description: For unknown or unanticipated issues.
  /v1/event/ID/{ID}:
    put:
      description: Update the event to be pushed out of EdgeX to an enterprise or
        cloud system.
      parameters:
      - name: ID
        in: path
        description: Database-generated ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Boolean on success of update request
        404:
          description: If the event cannot be found by ID
        500:
          description: For unknown or unanticipated issues.
    delete:
      description: Delete an event and all its readings.
      parameters:
      - name: ID
        in: path
        description: Database-generated ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Boolean on success of deletion request
        404:
          description: If the event cannot be found by ID.
        500:
          description: For unknown or unanticipated issues.
  /v1/event/removeold/age/{age}:
    delete:
      description: Remove all old events and associated readings
        based on delimiting age.
      parameters:
      - name: age
        in: path
        description: Minimum age in milliseconds (from created timestamp) an event
          should be in order to be removed
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        200:
          description: Count of the number of events removed
        500:
          description: For unknown or unanticipated issues.
  /v1/event/scrub:
    delete:
      description: Remove all pushed events and their associated readings, and
        should only be used by the scrubber micro service.
      responses:
        200:
          description: Count of the number of events scrubbed
        500:
          description: For unknown or unanticipated issues.
  /v1/event/{ID}:
    get:
      description: Fetch a specific event by database specified ID, returning null
        if none are found.
      parameters:
      - name: ID
        in: path
        description: Database-generated ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Event
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/event'
        404:
          description: If the event cannot be found by ID.
        500:
          description: For unknown or unanticipated issues.
  /v1/event/{start}/{end}/{limit}:
    get:
      description: Return all events between a given begin and end date/time sorted
        by event modified date, with newest events at the top.
      parameters:
      - name: limit
        in: path
        description: Maximum number of events to fetch, must be less than max limit
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: start
        in: path
        description: Start date in long form
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: end
        in: path
        description: End date in long form
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        200:
          description: List of events between the specified dates
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/event'
        400:
          description: Request is invalid or unparseable
        413:
          description: If the number of events exceeds the current max limit.
        500:
          description: For unknown or unanticipated issues.
  /v1/ping:
    get:
      description: Test service providing an indication that the service is available.
      responses:
        200:
          description: Return value of "pong"
        503:
          description: For unknown or unanticipated issues
  /v1/reading:
    get:
      description: Return list of all readings, sorted by reading ID.
      responses:
        200:
          description: List of all readings
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reading'
        413:
          description: If the number of readings exceeds the current max limit.
        500:
          description: For unknown or unanticipated issues
    put:
      description: Update the reading
      requestBody:
        $ref: '#/components/requestBodies/reading'
      responses:
        200:
          description: Boolean indicating success of the update operation
        400:
          description: Request is invalid or unparseable
        404:
          description: If the reading cannot be found by ID
        409:
          description: If the associated value descriptor is non-existent.
        500:
          description: For unknown or unanticipated issues
    post:
      description: Add a new reading.
      requestBody:
        $ref: '#/components/requestBodies/reading'
      responses:
        200:
          description: String ID (database ID) of the new Reading
        400:
          description: Request is invalid or unparseable
        409:
          description: If the associated value descriptor is non-existent
        500:
          description: For unknown or unanticipated issues.
  /v1/reading/count:
    get:
      description: Return a count of the number of readings in core data.
      responses:
        200:
          description: Number of readings in the collection
        500:
          description: For unknown or unanticipated issues.
  /v1/reading/device/{deviceId}/{limit}:
    get:
      description: Return a list of all readings for a given device, sorted
        by the readings modified date.
      parameters:
      - name: limit
        in: path
        description: Maximum number of readings requested (not to exceed max limit)
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: deviceId
        in: path
        description: Device ID or device name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: List of readings for a device, could be an empty list if none
            match
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reading'
        400:
          description: Request is invalid or unparseable
        404:
          description: If meta checks are in place and if the device ID or name does
            not match any existing devices
        413:
          description: If the number of readings exceeds the current max limit.
        500:
          description: Unknown or unanticipated issues
  /v1/reading/ID/{ID}:
    delete:
      description: Delete the reading from persistent storage.
      parameters:
      - name: ID
        in: path
        description: The ID for which the reading is to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Boolean indicating success of the delete operation
        404:
          description: If the reading cannot be found by ID
        500:
          description: For unknown or unanticipated issues.
  /v1/reading/label/{label}/{limit}:
    get:
      description: Return a list of readings with an associated value descriptor of
        the label specified, sorted by the readings modified date.
      parameters:
      - name: limit
        in: path
        description: Maximum number of readings to return (must not exceed max limit)
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: label
        in: path
        description: Label that should be in matching Value Descriptor's label array
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: List of matching readings having value descriptor with the
            associated label. Could be an empty list if none match.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reading'
        400:
          description: Request is invalid or unparseable
        413:
          description: If the number of readings exceeds the current max limit.
        500:
          description: For unknown or unanticipated issues.
  /v1/reading/name/{name}/device/{device}/{limit}:
    get:
      description: Return a list of readings that are associated with a value descriptor
        by name and Device by name or ID, sorted by the readings modified date.
      parameters:
      - name: limit
        in: path
        description: Maximum number of readings to return (must not exceed max limit)
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: name
        in: path
        description: Name of the matching value descriptor
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: device
        in: path
        description: Name or ID of the matching device
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: List of readings matching on the value descriptor name and
            device name (or ID)
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reading'
        400:
          description: Request is invalid or unparseable
        413:
          description: If the number of readings exceeds the current max limit.
        500:
          description: For unknown or unanticipated issues.
  /v1/reading/name/{name}/{limit}:
    get:
      description: Return a list of readings that are associated with a value
        descripter by name, sorted by the readings modified date.
      parameters:
      - name: limit
        in: path
        description: Maximum number of readings to return (must not exceed max limit)
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: name
        in: path
        description: Name of the matching value descriptor
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: List of readings matching on the value descriptor name
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reading'
        400:
          description: Request is invalid or unparseable
        413:
          description: If the number of readings exceeds the current max limit.
        500:
          description: For unknown or unanticipated issues.
  /v1/reading/type/{type}/{limit}:
    get:
      description: Return a list of readings with an associated value descriptor of
        the type IoTType specified, sorted by the readings modified date.
      parameters:
      - name: limit
        in: path
        description: maximum number of readings to be allowed to be returned
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: type
        in: path
        description: An IoTType in string form, being one of I, B, F, S for
          integer, Boolean, Floating point or String.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: List of matching readings having value descriptor of the types
            specified.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reading'
        400:
          description: request is invalid or unparseable
        413:
          description: if the number of readings exceeds the current max limit.
        500:
          description: for unknown or unanticipated issues.
  /v1/reading/uomlabel/{uomLabel}/{limit}:
    get:
      description: Return a list of readings with an associated value descriptor of
        the UoM label specified, sorted by the readings modified date.
      parameters:
      - name: limit
        in: path
        description: exceed max limit)
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: uomLabel
        in: path
        description: Unit of Measure label (UoMLabel) matching the value descriptor
          associated with the reading
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: List of matching readings having value descriptor with UoM
            label specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reading'
        400:
          description: Request is invalid or unparseable
        413:
          description: If the number of readings exceeds the current max limit.
        500:
          description: For unknown or unanticipated issues.
  /v1/reading/{ID}:
    get:
      description: Retrieve a reading by its ID.
      parameters:
      - name: ID
        in: path
        description: Reading database-generated ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Reading
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reading'
        404:
          description: if the reading cannot be found by ID
        500:
          description: for unknown or unanticipated issues
  /v1/reading/{start}/{end}/{limit}:
    get:
      description: Return a list of readings between two timestamps which
        is limited by the number specified in the limit parameter, being sorted
        by the readings modified date.
      parameters:
      - name: limit
        in: path
        description: Maximum number of readings to be allowed to be returned
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: start
        in: path
        description: Millisecond timestamp of the beginning of the time range
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: end
        in: path
        description: Millisecond timestamp of the end of the time rage
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        200:
          description: list of matching readings in this range (limited by the limit
            parameter)
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reading'
        400:
          description: Request is invalid or unparseable
        413:
          description: If the number of readings exceeds the current max limit.
        500:
          description: For unknown or unanticipated issues.
  /v1/valuedescriptor:
    get:
      description: Return all value descriptor objects.
      responses:
        200:
          description: List of value descriptors
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/valueDescriptor'
        413:
          description: If the number of value descriptors exceeds the current max
            limit
        500:
          description: For unknown or unanticipated issues.
    put:
      description: Update the value descriptor identified by the ID or name in the
        object provided.
      requestBody:
        $ref: '#/components/requestBodies/valueDescriptor'
      responses:
        200:
          description: Boolean indicating success of the update
        400:
          description: Request is invalid or unparseable
        404:
          description: If the value descriptor cannot be located by the identifier.
        500:
          description: For unknown or unanticipated issues
    post:
      description: Add a new value descriptor whose name must be unique.
      requestBody:
        $ref: '#/components/requestBodies/valueDescriptor'
      responses:
        200:
          description: The ID of the new value descriptor
        400:
          description: Request is invalid or unparseable
        409:
          description: If the a formatting string of the value descriptor is not a
            valid printf format or if the name is determined to not be unique with
            regard to other value descriptors.
        500:
          description: for unknown or unanticipated issues
  /v1/valuedescriptor/deviceid/{id}:
    get:
      description: Fetch all value descriptors that are associated with a
        Device's command set as either a put command parameter name or
        get/put response expected value.
      parameters:
      - name: id
        in: path
        description: The ID of the device
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: list of value descriptors
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/valueDescriptor'
        400:
          description: If the request is malformed or unparsable
        404:
          description: If the device cannot be found by the ID provided
        500:
          description: For unknown or unanticipated issues.
  /v1/valuedescriptor/devicename/{name}:
    get:
      description: Fetch all value descriptors that are associated with
        a Device's command set.
      parameters:
      - name: name
        in: path
        description: Unique name of the device
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: List of value descriptors
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/valueDescriptor'
        400:
          description: If the request is malformed or unparsable
        404:
          description: If the device cannot be found by the name provided
        500:
          description: For unknown or unanticipated issues.
  /v1/valuedescriptor/id/{id}:
    delete:
      description: Remove the value descriptor designated by by its ID.
      parameters:
      - name: id
        in: path
        description: Value descriptor's ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Boolean indicating success of the remove operation
        400:
          description: ID is invalid or unparseable
        404:
          description: If the value descriptor cannot be located by the identifier.
        409:
          description: If the value descriptor is still referenced in Readings
        500:
          description: For unknown or unanticipated issues
  /v1/valuedescriptor/label/{label}:
    get:
      description: Return value descriptor objects with given label.
      parameters:
      - name: label
        in: path
        description: Tag or label
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: List of value descriptor matching UoM Label
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/valueDescriptor'
        400:
          description: Request is invalid or unparseable
        500:
          description: For unknown or unanticipated issues.
  /v1/valuedescriptor/name/{name}:
    get:
      description: Return value descriptor object with given name, which can be null if
        no value descriptors found by the name.
      parameters:
      - name: name
        in: path
        description: Unique name of the value descriptor
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: value descriptor having the provided name, could be null if
            none are found.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/valueDescriptor'
        400:
          description: Request is invalid or unparseable
        404:
          description: If the value descriptor cannot be located by the name
        500:
          description: For unknown or unanticipated issues.
    delete:
      description: Remove the value descriptor designated by name.
      parameters:
      - name: name
        in: path
        description: Unique name of the value descriptor
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Boolean indicating success of the remove operation
        400:
          description: Request is invalid or unparseable
        404:
          description: If the value descriptor cannot be located by the identifier
        409:
          description: If the value descriptor is still referenced in Readings
        500:
          description: For unknown or unanticipated issues.
  /v1/valuedescriptor/uomlabel/{uomLabel}:
    get:
      description: Return value descriptor objects with given UoM label.
      parameters:
      - name: uomLabel
        in: path
        description: Unit of measure
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: List of value descriptors matching UoM Label
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/valueDescriptor'
        400:
          description: Request is invalid or unparseable
        500:
          description: For unknown or unanticipated issues.
  /v1/valuedescriptor/usage:
    get:
      description: Get a list of value descriptors and usage state.
      parameters:
      - name: names
        in: query
        description: A comma separated list of value descriptor names for which to
          perform the usage check.
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: List of value descriptors and thier current usage state
        400:
          description: Malformed query parameters
        413:
          description: The maximum number of results has been exceeded
        500:
          description: For unknown or unanticipated issues
  /v1/valuedescriptor/{id}:
    get:
      description: Fetch a specific value descriptor by its ID.
      parameters:
      - name: id
        in: path
        description: The ID for the value descriptor
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Value descriptor
        404:
          description: If the value descriptor cannot be located by the identifier
        500:
          description: For unknown or unanticipated issues
  /version:
    get:
      description: Get the API version
      responses:
        200:
          description: The service's API version as JSON document
components:
  schemas:
    event:
      title: event
      type: object
      properties:
        created:
          title: created
          type: integer
        device:
          title: device
          type: string
        id:
          title: id
          type: string
        modified:
          title: modified
          type: integer
        origin:
          title: origin
          type: integer
        pushed:
          title: pushed
          type: integer
        readings:
          title: readings
          uniqueItems: false
          type: array
          items:
            $ref: '#/components/schemas/reading'
      description: Core device/sensor event
    reading:
      title: reading
      type: object
      properties:
        created:
          title: created
          type: integer
        id:
          title: id
          type: string
        modified:
          title: modified
          type: integer
        name:
          title: name
          type: string
        origin:
          title: origin
          type: integer
        pushed:
          title: pushed
          type: integer
        value:
          title: value
          type: string
      description: Core device/sensor reading
    valueDescriptor:
      title: valueDescriptor
      type: object
      properties:
        created:
          title: created
          type: integer
        defaultValue:
          title: defaultValue
          type: string
        description:
          title: description
          type: string
        formatting:
          title: formatting
          type: string
        id:
          title: id
          type: string
        labels:
          title: labels
          uniqueItems: false
          type: array
          items:
            title: labels
            type: string
        max:
          title: max
          type: string
        min:
          title: min
          type: string
        modified:
          title: modified
          type: integer
        name:
          title: name
          type: string
        origin:
          title: origin
          type: integer
        type:
          title: type
          type: string
        uomLabel:
          title: uomLabel
          type: string
      description: Core and MetaData value descriptor that describes
        device/sensor data sent and received
  requestBodies:
    event:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/event'
      required: true
    reading:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/reading'
      required: true
    valueDescriptor:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/valueDescriptor'
      required: true
