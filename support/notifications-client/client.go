/*******************************************************************************
 * Copyright 2017 Dell Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *
 * @microservice: support-notifications-client-go library
 * @author: Ryan Comer, Dell
 * @version: 0.5.0
 *******************************************************************************/
package notifications

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
)

type CategoryEnum string

const (
	SECURITY  CategoryEnum = "SECURITY"
	HW_HEALTH CategoryEnum = "HW_HEALTH"
	SW_HEALTH CategoryEnum = "SW_HEALTH"
)

type SeverityEnum string

const (
	CRITICAL SeverityEnum = "CRITICAL"
	NORMAL   SeverityEnum = "NORMAL"
)

type StatusEnum string

const (
	NEW       StatusEnum = "NEW"
	PROCESSED StatusEnum = "PROCESSED"
	ESCALATED StatusEnum = "ESCALATED"
)

// Struct to represent the notifications client
type NotificationsClient struct {
	RemoteUrl     string
	OwningService string
}

// Struct to represent a notification being sent to the notifications service
type Notification struct {
	Id          string       `json:"id,omitempty"` // Generated by the system, users can ignore
	Slug        string       `json:"slug"`         // A meaningful identifier provided by client
	Sender      string       `json:"sender"`
	Category    CategoryEnum `json:"category"`
	Severity    SeverityEnum `json:"severity"`
	Content     string       `json:"content"`
	Description string       `json:"description,omitempty"`
	Status      StatusEnum   `json:"status,omitempty"`
	Labels      []string     `json:"labels,omitempty"`
	Created     int          `json:"created,omitempty"`  // The creation timestamp
	Modified    int          `json:"modified,omitempty"` // The last modification timestamp
}

// Send a POST call to the notifications service
func (nc NotificationsClient) RecieveNotification(n Notification) error {
	client := &http.Client{}

	// Get the JSON request body
	requestBody, err := json.Marshal(n)
	if err != nil {
		fmt.Println(err.Error())
		return err
	}

	// Create the request
	req, err := http.NewRequest(http.MethodPost, nc.RemoteUrl, bytes.NewBuffer(requestBody))
	req.Header.Add("Content-Type", "application/json")
	if err != nil {
		fmt.Println(err.Error())
		return err
	}

	// Asynchronous call
	go makeRequest(client, req)

	return nil
}

// Function to actually make the HTTP request
func makeRequest(client *http.Client, req *http.Request) {
	resp, err := client.Do(req)
	if err == nil {
		defer resp.Body.Close()
		resp.Close = true
	} else {
		fmt.Println(err.Error())
	}
}
