// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/edgexfoundry/edgex-go/pkg/models"

// DeviceClient is an autogenerated mock type for the DeviceClient type
type DeviceClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: dev
func (_m *DeviceClient) Add(dev *models.Device) (string, error) {
	ret := _m.Called(dev)

	var r0 string
	if rf, ok := ret.Get(0).(func(*models.Device) string); ok {
		r0 = rf(dev)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Device) error); ok {
		r1 = rf(dev)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckForDevice provides a mock function with given fields: token
func (_m *DeviceClient) CheckForDevice(token string) (models.Device, error) {
	ret := _m.Called(token)

	var r0 models.Device
	if rf, ok := ret.Get(0).(func(string) models.Device); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(models.Device)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *DeviceClient) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByName provides a mock function with given fields: name
func (_m *DeviceClient) DeleteByName(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Device provides a mock function with given fields: id
func (_m *DeviceClient) Device(id string) (models.Device, error) {
	ret := _m.Called(id)

	var r0 models.Device
	if rf, ok := ret.Get(0).(func(string) models.Device); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Device)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceForName provides a mock function with given fields: name
func (_m *DeviceClient) DeviceForName(name string) (models.Device, error) {
	ret := _m.Called(name)

	var r0 models.Device
	if rf, ok := ret.Get(0).(func(string) models.Device); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.Device)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Devices provides a mock function with given fields:
func (_m *DeviceClient) Devices() ([]models.Device, error) {
	ret := _m.Called()

	var r0 []models.Device
	if rf, ok := ret.Get(0).(func() []models.Device); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DevicesByLabel provides a mock function with given fields: label
func (_m *DeviceClient) DevicesByLabel(label string) ([]models.Device, error) {
	ret := _m.Called(label)

	var r0 []models.Device
	if rf, ok := ret.Get(0).(func(string) []models.Device); ok {
		r0 = rf(label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DevicesForAddressable provides a mock function with given fields: addressableid
func (_m *DeviceClient) DevicesForAddressable(addressableid string) ([]models.Device, error) {
	ret := _m.Called(addressableid)

	var r0 []models.Device
	if rf, ok := ret.Get(0).(func(string) []models.Device); ok {
		r0 = rf(addressableid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(addressableid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DevicesForAddressableByName provides a mock function with given fields: addressableName
func (_m *DeviceClient) DevicesForAddressableByName(addressableName string) ([]models.Device, error) {
	ret := _m.Called(addressableName)

	var r0 []models.Device
	if rf, ok := ret.Get(0).(func(string) []models.Device); ok {
		r0 = rf(addressableName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(addressableName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DevicesForProfile provides a mock function with given fields: profileid
func (_m *DeviceClient) DevicesForProfile(profileid string) ([]models.Device, error) {
	ret := _m.Called(profileid)

	var r0 []models.Device
	if rf, ok := ret.Get(0).(func(string) []models.Device); ok {
		r0 = rf(profileid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(profileid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DevicesForProfileByName provides a mock function with given fields: profileName
func (_m *DeviceClient) DevicesForProfileByName(profileName string) ([]models.Device, error) {
	ret := _m.Called(profileName)

	var r0 []models.Device
	if rf, ok := ret.Get(0).(func(string) []models.Device); ok {
		r0 = rf(profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(profileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DevicesForService provides a mock function with given fields: serviceid
func (_m *DeviceClient) DevicesForService(serviceid string) ([]models.Device, error) {
	ret := _m.Called(serviceid)

	var r0 []models.Device
	if rf, ok := ret.Get(0).(func(string) []models.Device); ok {
		r0 = rf(serviceid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serviceid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DevicesForServiceByName provides a mock function with given fields: serviceName
func (_m *DeviceClient) DevicesForServiceByName(serviceName string) ([]models.Device, error) {
	ret := _m.Called(serviceName)

	var r0 []models.Device
	if rf, ok := ret.Get(0).(func(string) []models.Device); ok {
		r0 = rf(serviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: dev
func (_m *DeviceClient) Update(dev models.Device) error {
	ret := _m.Called(dev)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Device) error); ok {
		r0 = rf(dev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAdminState provides a mock function with given fields: id, adminState
func (_m *DeviceClient) UpdateAdminState(id string, adminState string) error {
	ret := _m.Called(id, adminState)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, adminState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAdminStateByName provides a mock function with given fields: name, adminState
func (_m *DeviceClient) UpdateAdminStateByName(name string, adminState string) error {
	ret := _m.Called(name, adminState)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, adminState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLastConnected provides a mock function with given fields: id, time
func (_m *DeviceClient) UpdateLastConnected(id string, time int64) error {
	ret := _m.Called(id, time)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = rf(id, time)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLastConnectedByName provides a mock function with given fields: name, time
func (_m *DeviceClient) UpdateLastConnectedByName(name string, time int64) error {
	ret := _m.Called(name, time)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = rf(name, time)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLastReported provides a mock function with given fields: id, time
func (_m *DeviceClient) UpdateLastReported(id string, time int64) error {
	ret := _m.Called(id, time)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = rf(id, time)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLastReportedByName provides a mock function with given fields: name, time
func (_m *DeviceClient) UpdateLastReportedByName(name string, time int64) error {
	ret := _m.Called(name, time)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = rf(name, time)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOpState provides a mock function with given fields: id, opState
func (_m *DeviceClient) UpdateOpState(id string, opState string) error {
	ret := _m.Called(id, opState)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, opState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOpStateByName provides a mock function with given fields: name, opState
func (_m *DeviceClient) UpdateOpStateByName(name string, opState string) error {
	ret := _m.Called(name, opState)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, opState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
