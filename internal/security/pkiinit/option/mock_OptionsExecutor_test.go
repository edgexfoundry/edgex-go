//
// Copyright (c) 2019 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied. See the License for the specific language governing permissions and limitations under
// the License.
//
// SPDX-License-Identifier: Apache-2.0'
//
package option

import mock "github.com/stretchr/testify/mock"

// Note: this is a test helper

// mockOptionsExecutor is an autogenerated mock type for the OptionsExecutor type
type mockOptionsExecutor struct {
	mock.Mock
}

// ProcessOptions provides a mock function with given fields:
func (_m *mockOptionsExecutor) ProcessOptions() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// executeOptions provides a mock function with given fields: _a0
func (_m *mockOptionsExecutor) executeOptions(_a0 ...func(*PkiInitOption) (exitCode, error)) (exitCode, error) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 exitCode
	if rf, ok := ret.Get(0).(func(...func(*PkiInitOption) (exitCode, error)) exitCode); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Get(0).(exitCode)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...func(*PkiInitOption) (exitCode, error)) error); ok {
		r1 = rf(_a0...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
