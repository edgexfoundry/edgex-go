// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	errors "github.com/edgexfoundry/go-mod-core-contracts/v4/errors"

	mock "github.com/stretchr/testify/mock"

	models "github.com/edgexfoundry/go-mod-core-contracts/v4/models"
)

// DBClient is an autogenerated mock type for the DBClient type
type DBClient struct {
	mock.Mock
}

// AddDevice provides a mock function with given fields: d
func (_m *DBClient) AddDevice(d models.Device) (models.Device, errors.EdgeX) {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for AddDevice")
	}

	var r0 models.Device
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.Device) (models.Device, errors.EdgeX)); ok {
		return rf(d)
	}
	if rf, ok := ret.Get(0).(func(models.Device) models.Device); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Get(0).(models.Device)
	}

	if rf, ok := ret.Get(1).(func(models.Device) errors.EdgeX); ok {
		r1 = rf(d)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AddDeviceProfile provides a mock function with given fields: e
func (_m *DBClient) AddDeviceProfile(e models.DeviceProfile) (models.DeviceProfile, errors.EdgeX) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for AddDeviceProfile")
	}

	var r0 models.DeviceProfile
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.DeviceProfile) (models.DeviceProfile, errors.EdgeX)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(models.DeviceProfile) models.DeviceProfile); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(models.DeviceProfile)
	}

	if rf, ok := ret.Get(1).(func(models.DeviceProfile) errors.EdgeX); ok {
		r1 = rf(e)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AddDeviceService provides a mock function with given fields: ds
func (_m *DBClient) AddDeviceService(ds models.DeviceService) (models.DeviceService, errors.EdgeX) {
	ret := _m.Called(ds)

	if len(ret) == 0 {
		panic("no return value specified for AddDeviceService")
	}

	var r0 models.DeviceService
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.DeviceService) (models.DeviceService, errors.EdgeX)); ok {
		return rf(ds)
	}
	if rf, ok := ret.Get(0).(func(models.DeviceService) models.DeviceService); ok {
		r0 = rf(ds)
	} else {
		r0 = ret.Get(0).(models.DeviceService)
	}

	if rf, ok := ret.Get(1).(func(models.DeviceService) errors.EdgeX); ok {
		r1 = rf(ds)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AddProvisionWatcher provides a mock function with given fields: pw
func (_m *DBClient) AddProvisionWatcher(pw models.ProvisionWatcher) (models.ProvisionWatcher, errors.EdgeX) {
	ret := _m.Called(pw)

	if len(ret) == 0 {
		panic("no return value specified for AddProvisionWatcher")
	}

	var r0 models.ProvisionWatcher
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.ProvisionWatcher) (models.ProvisionWatcher, errors.EdgeX)); ok {
		return rf(pw)
	}
	if rf, ok := ret.Get(0).(func(models.ProvisionWatcher) models.ProvisionWatcher); ok {
		r0 = rf(pw)
	} else {
		r0 = ret.Get(0).(models.ProvisionWatcher)
	}

	if rf, ok := ret.Get(1).(func(models.ProvisionWatcher) errors.EdgeX); ok {
		r1 = rf(pw)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AllDeviceProfiles provides a mock function with given fields: offset, limit, labels
func (_m *DBClient) AllDeviceProfiles(offset int, limit int, labels []string) ([]models.DeviceProfile, errors.EdgeX) {
	ret := _m.Called(offset, limit, labels)

	if len(ret) == 0 {
		panic("no return value specified for AllDeviceProfiles")
	}

	var r0 []models.DeviceProfile
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, []string) ([]models.DeviceProfile, errors.EdgeX)); ok {
		return rf(offset, limit, labels)
	}
	if rf, ok := ret.Get(0).(func(int, int, []string) []models.DeviceProfile); ok {
		r0 = rf(offset, limit, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DeviceProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, []string) errors.EdgeX); ok {
		r1 = rf(offset, limit, labels)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AllDeviceServices provides a mock function with given fields: offset, limit, labels
func (_m *DBClient) AllDeviceServices(offset int, limit int, labels []string) ([]models.DeviceService, errors.EdgeX) {
	ret := _m.Called(offset, limit, labels)

	if len(ret) == 0 {
		panic("no return value specified for AllDeviceServices")
	}

	var r0 []models.DeviceService
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, []string) ([]models.DeviceService, errors.EdgeX)); ok {
		return rf(offset, limit, labels)
	}
	if rf, ok := ret.Get(0).(func(int, int, []string) []models.DeviceService); ok {
		r0 = rf(offset, limit, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DeviceService)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, []string) errors.EdgeX); ok {
		r1 = rf(offset, limit, labels)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AllDevices provides a mock function with given fields: offset, limit, labels
func (_m *DBClient) AllDevices(offset int, limit int, labels []string) ([]models.Device, errors.EdgeX) {
	ret := _m.Called(offset, limit, labels)

	if len(ret) == 0 {
		panic("no return value specified for AllDevices")
	}

	var r0 []models.Device
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, []string) ([]models.Device, errors.EdgeX)); ok {
		return rf(offset, limit, labels)
	}
	if rf, ok := ret.Get(0).(func(int, int, []string) []models.Device); ok {
		r0 = rf(offset, limit, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, []string) errors.EdgeX); ok {
		r1 = rf(offset, limit, labels)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AllProvisionWatchers provides a mock function with given fields: offset, limit, labels
func (_m *DBClient) AllProvisionWatchers(offset int, limit int, labels []string) ([]models.ProvisionWatcher, errors.EdgeX) {
	ret := _m.Called(offset, limit, labels)

	if len(ret) == 0 {
		panic("no return value specified for AllProvisionWatchers")
	}

	var r0 []models.ProvisionWatcher
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, []string) ([]models.ProvisionWatcher, errors.EdgeX)); ok {
		return rf(offset, limit, labels)
	}
	if rf, ok := ret.Get(0).(func(int, int, []string) []models.ProvisionWatcher); ok {
		r0 = rf(offset, limit, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProvisionWatcher)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, []string) errors.EdgeX); ok {
		r1 = rf(offset, limit, labels)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// CloseSession provides a mock function with given fields:
func (_m *DBClient) CloseSession() {
	_m.Called()
}

// DeleteDeviceById provides a mock function with given fields: id
func (_m *DBClient) DeleteDeviceById(id string) errors.EdgeX {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceById")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteDeviceByName provides a mock function with given fields: name
func (_m *DBClient) DeleteDeviceByName(name string) errors.EdgeX {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceByName")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteDeviceProfileById provides a mock function with given fields: id
func (_m *DBClient) DeleteDeviceProfileById(id string) errors.EdgeX {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceProfileById")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteDeviceProfileByName provides a mock function with given fields: name
func (_m *DBClient) DeleteDeviceProfileByName(name string) errors.EdgeX {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceProfileByName")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteDeviceServiceById provides a mock function with given fields: id
func (_m *DBClient) DeleteDeviceServiceById(id string) errors.EdgeX {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceServiceById")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteDeviceServiceByName provides a mock function with given fields: name
func (_m *DBClient) DeleteDeviceServiceByName(name string) errors.EdgeX {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceServiceByName")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteProvisionWatcherByName provides a mock function with given fields: name
func (_m *DBClient) DeleteProvisionWatcherByName(name string) errors.EdgeX {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProvisionWatcherByName")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeviceById provides a mock function with given fields: id
func (_m *DBClient) DeviceById(id string) (models.Device, errors.EdgeX) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeviceById")
	}

	var r0 models.Device
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (models.Device, errors.EdgeX)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Device); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Device)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceByName provides a mock function with given fields: name
func (_m *DBClient) DeviceByName(name string) (models.Device, errors.EdgeX) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeviceByName")
	}

	var r0 models.Device
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (models.Device, errors.EdgeX)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) models.Device); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.Device)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceCountByLabels provides a mock function with given fields: labels
func (_m *DBClient) DeviceCountByLabels(labels []string) (uint32, errors.EdgeX) {
	ret := _m.Called(labels)

	if len(ret) == 0 {
		panic("no return value specified for DeviceCountByLabels")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func([]string) (uint32, errors.EdgeX)); ok {
		return rf(labels)
	}
	if rf, ok := ret.Get(0).(func([]string) uint32); ok {
		r0 = rf(labels)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func([]string) errors.EdgeX); ok {
		r1 = rf(labels)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceCountByProfileName provides a mock function with given fields: profileName
func (_m *DBClient) DeviceCountByProfileName(profileName string) (uint32, errors.EdgeX) {
	ret := _m.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for DeviceCountByProfileName")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (uint32, errors.EdgeX)); ok {
		return rf(profileName)
	}
	if rf, ok := ret.Get(0).(func(string) uint32); ok {
		r0 = rf(profileName)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(profileName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceCountByServiceName provides a mock function with given fields: serviceName
func (_m *DBClient) DeviceCountByServiceName(serviceName string) (uint32, errors.EdgeX) {
	ret := _m.Called(serviceName)

	if len(ret) == 0 {
		panic("no return value specified for DeviceCountByServiceName")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (uint32, errors.EdgeX)); ok {
		return rf(serviceName)
	}
	if rf, ok := ret.Get(0).(func(string) uint32); ok {
		r0 = rf(serviceName)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(serviceName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceIdExists provides a mock function with given fields: id
func (_m *DBClient) DeviceIdExists(id string) (bool, errors.EdgeX) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeviceIdExists")
	}

	var r0 bool
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (bool, errors.EdgeX)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceNameExists provides a mock function with given fields: name
func (_m *DBClient) DeviceNameExists(name string) (bool, errors.EdgeX) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeviceNameExists")
	}

	var r0 bool
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (bool, errors.EdgeX)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceProfileById provides a mock function with given fields: id
func (_m *DBClient) DeviceProfileById(id string) (models.DeviceProfile, errors.EdgeX) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeviceProfileById")
	}

	var r0 models.DeviceProfile
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (models.DeviceProfile, errors.EdgeX)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.DeviceProfile); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.DeviceProfile)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceProfileByName provides a mock function with given fields: name
func (_m *DBClient) DeviceProfileByName(name string) (models.DeviceProfile, errors.EdgeX) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeviceProfileByName")
	}

	var r0 models.DeviceProfile
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (models.DeviceProfile, errors.EdgeX)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) models.DeviceProfile); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.DeviceProfile)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceProfileCountByLabels provides a mock function with given fields: labels
func (_m *DBClient) DeviceProfileCountByLabels(labels []string) (uint32, errors.EdgeX) {
	ret := _m.Called(labels)

	if len(ret) == 0 {
		panic("no return value specified for DeviceProfileCountByLabels")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func([]string) (uint32, errors.EdgeX)); ok {
		return rf(labels)
	}
	if rf, ok := ret.Get(0).(func([]string) uint32); ok {
		r0 = rf(labels)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func([]string) errors.EdgeX); ok {
		r1 = rf(labels)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceProfileCountByManufacturer provides a mock function with given fields: manufacturer
func (_m *DBClient) DeviceProfileCountByManufacturer(manufacturer string) (uint32, errors.EdgeX) {
	ret := _m.Called(manufacturer)

	if len(ret) == 0 {
		panic("no return value specified for DeviceProfileCountByManufacturer")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (uint32, errors.EdgeX)); ok {
		return rf(manufacturer)
	}
	if rf, ok := ret.Get(0).(func(string) uint32); ok {
		r0 = rf(manufacturer)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(manufacturer)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceProfileCountByManufacturerAndModel provides a mock function with given fields: manufacturer, model
func (_m *DBClient) DeviceProfileCountByManufacturerAndModel(manufacturer string, model string) (uint32, errors.EdgeX) {
	ret := _m.Called(manufacturer, model)

	if len(ret) == 0 {
		panic("no return value specified for DeviceProfileCountByManufacturerAndModel")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string, string) (uint32, errors.EdgeX)); ok {
		return rf(manufacturer, model)
	}
	if rf, ok := ret.Get(0).(func(string, string) uint32); ok {
		r0 = rf(manufacturer, model)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.EdgeX); ok {
		r1 = rf(manufacturer, model)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceProfileCountByModel provides a mock function with given fields: model
func (_m *DBClient) DeviceProfileCountByModel(model string) (uint32, errors.EdgeX) {
	ret := _m.Called(model)

	if len(ret) == 0 {
		panic("no return value specified for DeviceProfileCountByModel")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (uint32, errors.EdgeX)); ok {
		return rf(model)
	}
	if rf, ok := ret.Get(0).(func(string) uint32); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(model)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceProfileNameExists provides a mock function with given fields: name
func (_m *DBClient) DeviceProfileNameExists(name string) (bool, errors.EdgeX) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeviceProfileNameExists")
	}

	var r0 bool
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (bool, errors.EdgeX)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceProfilesByManufacturer provides a mock function with given fields: offset, limit, manufacturer
func (_m *DBClient) DeviceProfilesByManufacturer(offset int, limit int, manufacturer string) ([]models.DeviceProfile, errors.EdgeX) {
	ret := _m.Called(offset, limit, manufacturer)

	if len(ret) == 0 {
		panic("no return value specified for DeviceProfilesByManufacturer")
	}

	var r0 []models.DeviceProfile
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, string) ([]models.DeviceProfile, errors.EdgeX)); ok {
		return rf(offset, limit, manufacturer)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []models.DeviceProfile); ok {
		r0 = rf(offset, limit, manufacturer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DeviceProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, manufacturer)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceProfilesByManufacturerAndModel provides a mock function with given fields: offset, limit, manufacturer, model
func (_m *DBClient) DeviceProfilesByManufacturerAndModel(offset int, limit int, manufacturer string, model string) ([]models.DeviceProfile, errors.EdgeX) {
	ret := _m.Called(offset, limit, manufacturer, model)

	if len(ret) == 0 {
		panic("no return value specified for DeviceProfilesByManufacturerAndModel")
	}

	var r0 []models.DeviceProfile
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]models.DeviceProfile, errors.EdgeX)); ok {
		return rf(offset, limit, manufacturer, model)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []models.DeviceProfile); ok {
		r0 = rf(offset, limit, manufacturer, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DeviceProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, manufacturer, model)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceProfilesByModel provides a mock function with given fields: offset, limit, model
func (_m *DBClient) DeviceProfilesByModel(offset int, limit int, model string) ([]models.DeviceProfile, errors.EdgeX) {
	ret := _m.Called(offset, limit, model)

	if len(ret) == 0 {
		panic("no return value specified for DeviceProfilesByModel")
	}

	var r0 []models.DeviceProfile
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, string) ([]models.DeviceProfile, errors.EdgeX)); ok {
		return rf(offset, limit, model)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []models.DeviceProfile); ok {
		r0 = rf(offset, limit, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DeviceProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, model)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceServiceById provides a mock function with given fields: id
func (_m *DBClient) DeviceServiceById(id string) (models.DeviceService, errors.EdgeX) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeviceServiceById")
	}

	var r0 models.DeviceService
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (models.DeviceService, errors.EdgeX)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.DeviceService); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.DeviceService)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceServiceByName provides a mock function with given fields: name
func (_m *DBClient) DeviceServiceByName(name string) (models.DeviceService, errors.EdgeX) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeviceServiceByName")
	}

	var r0 models.DeviceService
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (models.DeviceService, errors.EdgeX)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) models.DeviceService); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.DeviceService)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceServiceCountByLabels provides a mock function with given fields: labels
func (_m *DBClient) DeviceServiceCountByLabels(labels []string) (uint32, errors.EdgeX) {
	ret := _m.Called(labels)

	if len(ret) == 0 {
		panic("no return value specified for DeviceServiceCountByLabels")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func([]string) (uint32, errors.EdgeX)); ok {
		return rf(labels)
	}
	if rf, ok := ret.Get(0).(func([]string) uint32); ok {
		r0 = rf(labels)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func([]string) errors.EdgeX); ok {
		r1 = rf(labels)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceServiceNameExists provides a mock function with given fields: name
func (_m *DBClient) DeviceServiceNameExists(name string) (bool, errors.EdgeX) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeviceServiceNameExists")
	}

	var r0 bool
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (bool, errors.EdgeX)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceTree provides a mock function with given fields: parent, levels, offset, limit, labels
func (_m *DBClient) DeviceTree(parent string, levels int, offset int, limit int, labels []string) (uint32, []models.Device, errors.EdgeX) {
	ret := _m.Called(parent, levels, offset, limit, labels)

	if len(ret) == 0 {
		panic("no return value specified for DeviceTree")
	}

	var r0 uint32
	var r1 []models.Device
	var r2 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string, int, int, int, []string) (uint32, []models.Device, errors.EdgeX)); ok {
		return rf(parent, levels, offset, limit, labels)
	}
	if rf, ok := ret.Get(0).(func(string, int, int, int, []string) uint32); ok {
		r0 = rf(parent, levels, offset, limit, labels)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(string, int, int, int, []string) []models.Device); ok {
		r1 = rf(parent, levels, offset, limit, labels)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]models.Device)
		}
	}

	if rf, ok := ret.Get(2).(func(string, int, int, int, []string) errors.EdgeX); ok {
		r2 = rf(parent, levels, offset, limit, labels)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(errors.EdgeX)
		}
	}

	return r0, r1, r2
}

// DevicesByProfileName provides a mock function with given fields: offset, limit, profileName
func (_m *DBClient) DevicesByProfileName(offset int, limit int, profileName string) ([]models.Device, errors.EdgeX) {
	ret := _m.Called(offset, limit, profileName)

	if len(ret) == 0 {
		panic("no return value specified for DevicesByProfileName")
	}

	var r0 []models.Device
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, string) ([]models.Device, errors.EdgeX)); ok {
		return rf(offset, limit, profileName)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []models.Device); ok {
		r0 = rf(offset, limit, profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, profileName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DevicesByServiceName provides a mock function with given fields: offset, limit, name
func (_m *DBClient) DevicesByServiceName(offset int, limit int, name string) ([]models.Device, errors.EdgeX) {
	ret := _m.Called(offset, limit, name)

	if len(ret) == 0 {
		panic("no return value specified for DevicesByServiceName")
	}

	var r0 []models.Device
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, string) ([]models.Device, errors.EdgeX)); ok {
		return rf(offset, limit, name)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []models.Device); ok {
		r0 = rf(offset, limit, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// InUseResourceCount provides a mock function with given fields:
func (_m *DBClient) InUseResourceCount() (uint32, errors.EdgeX) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InUseResourceCount")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func() (uint32, errors.EdgeX)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func() errors.EdgeX); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ProvisionWatcherById provides a mock function with given fields: id
func (_m *DBClient) ProvisionWatcherById(id string) (models.ProvisionWatcher, errors.EdgeX) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ProvisionWatcherById")
	}

	var r0 models.ProvisionWatcher
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (models.ProvisionWatcher, errors.EdgeX)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.ProvisionWatcher); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.ProvisionWatcher)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ProvisionWatcherByName provides a mock function with given fields: name
func (_m *DBClient) ProvisionWatcherByName(name string) (models.ProvisionWatcher, errors.EdgeX) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ProvisionWatcherByName")
	}

	var r0 models.ProvisionWatcher
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (models.ProvisionWatcher, errors.EdgeX)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) models.ProvisionWatcher); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.ProvisionWatcher)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ProvisionWatcherCountByLabels provides a mock function with given fields: labels
func (_m *DBClient) ProvisionWatcherCountByLabels(labels []string) (uint32, errors.EdgeX) {
	ret := _m.Called(labels)

	if len(ret) == 0 {
		panic("no return value specified for ProvisionWatcherCountByLabels")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func([]string) (uint32, errors.EdgeX)); ok {
		return rf(labels)
	}
	if rf, ok := ret.Get(0).(func([]string) uint32); ok {
		r0 = rf(labels)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func([]string) errors.EdgeX); ok {
		r1 = rf(labels)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ProvisionWatcherCountByProfileName provides a mock function with given fields: name
func (_m *DBClient) ProvisionWatcherCountByProfileName(name string) (uint32, errors.EdgeX) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ProvisionWatcherCountByProfileName")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (uint32, errors.EdgeX)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) uint32); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ProvisionWatcherCountByServiceName provides a mock function with given fields: name
func (_m *DBClient) ProvisionWatcherCountByServiceName(name string) (uint32, errors.EdgeX) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ProvisionWatcherCountByServiceName")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (uint32, errors.EdgeX)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) uint32); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ProvisionWatchersByProfileName provides a mock function with given fields: offset, limit, name
func (_m *DBClient) ProvisionWatchersByProfileName(offset int, limit int, name string) ([]models.ProvisionWatcher, errors.EdgeX) {
	ret := _m.Called(offset, limit, name)

	if len(ret) == 0 {
		panic("no return value specified for ProvisionWatchersByProfileName")
	}

	var r0 []models.ProvisionWatcher
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, string) ([]models.ProvisionWatcher, errors.EdgeX)); ok {
		return rf(offset, limit, name)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []models.ProvisionWatcher); ok {
		r0 = rf(offset, limit, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProvisionWatcher)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ProvisionWatchersByServiceName provides a mock function with given fields: offset, limit, name
func (_m *DBClient) ProvisionWatchersByServiceName(offset int, limit int, name string) ([]models.ProvisionWatcher, errors.EdgeX) {
	ret := _m.Called(offset, limit, name)

	if len(ret) == 0 {
		panic("no return value specified for ProvisionWatchersByServiceName")
	}

	var r0 []models.ProvisionWatcher
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, string) ([]models.ProvisionWatcher, errors.EdgeX)); ok {
		return rf(offset, limit, name)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []models.ProvisionWatcher); ok {
		r0 = rf(offset, limit, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProvisionWatcher)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// UpdateDevice provides a mock function with given fields: d
func (_m *DBClient) UpdateDevice(d models.Device) errors.EdgeX {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDevice")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.Device) errors.EdgeX); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// UpdateDeviceProfile provides a mock function with given fields: e
func (_m *DBClient) UpdateDeviceProfile(e models.DeviceProfile) errors.EdgeX {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceProfile")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.DeviceProfile) errors.EdgeX); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// UpdateDeviceService provides a mock function with given fields: ds
func (_m *DBClient) UpdateDeviceService(ds models.DeviceService) errors.EdgeX {
	ret := _m.Called(ds)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceService")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.DeviceService) errors.EdgeX); ok {
		r0 = rf(ds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// UpdateProvisionWatcher provides a mock function with given fields: pw
func (_m *DBClient) UpdateProvisionWatcher(pw models.ProvisionWatcher) errors.EdgeX {
	ret := _m.Called(pw)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProvisionWatcher")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.ProvisionWatcher) errors.EdgeX); ok {
		r0 = rf(pw)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// NewDBClient creates a new instance of DBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBClient {
	mock := &DBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
