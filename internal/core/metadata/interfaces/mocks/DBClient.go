// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/edgexfoundry/edgex-go/pkg/models"

// DBClient is an autogenerated mock type for the DBClient type
type DBClient struct {
	mock.Mock
}

// AddAddressable provides a mock function with given fields: a
func (_m *DBClient) AddAddressable(a models.Addressable) (string, error) {
	ret := _m.Called(a)

	var r0 string
	if rf, ok := ret.Get(0).(func(models.Addressable) string); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Addressable) error); ok {
		r1 = rf(a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddCommand provides a mock function with given fields: c
func (_m *DBClient) AddCommand(c models.Command) (string, error) {
	ret := _m.Called(c)

	var r0 string
	if rf, ok := ret.Get(0).(func(models.Command) string); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Command) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddDevice provides a mock function with given fields: d
func (_m *DBClient) AddDevice(d *models.Device) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Device) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddDeviceProfile provides a mock function with given fields: d
func (_m *DBClient) AddDeviceProfile(d *models.DeviceProfile) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.DeviceProfile) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddDeviceReport provides a mock function with given fields: dr
func (_m *DBClient) AddDeviceReport(dr models.DeviceReport) (string, error) {
	ret := _m.Called(dr)

	var r0 string
	if rf, ok := ret.Get(0).(func(models.DeviceReport) string); ok {
		r0 = rf(dr)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.DeviceReport) error); ok {
		r1 = rf(dr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddDeviceService provides a mock function with given fields: ds
func (_m *DBClient) AddDeviceService(ds *models.DeviceService) error {
	ret := _m.Called(ds)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.DeviceService) error); ok {
		r0 = rf(ds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddProvisionWatcher provides a mock function with given fields: pw
func (_m *DBClient) AddProvisionWatcher(pw *models.ProvisionWatcher) error {
	ret := _m.Called(pw)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ProvisionWatcher) error); ok {
		r0 = rf(pw)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddSchedule provides a mock function with given fields: s
func (_m *DBClient) AddSchedule(s *models.Schedule) error {
	ret := _m.Called(s)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Schedule) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddScheduleEvent provides a mock function with given fields: se
func (_m *DBClient) AddScheduleEvent(se *models.ScheduleEvent) error {
	ret := _m.Called(se)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ScheduleEvent) error); ok {
		r0 = rf(se)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseSession provides a mock function with given fields:
func (_m *DBClient) CloseSession() {
	_m.Called()
}

// Connect provides a mock function with given fields:
func (_m *DBClient) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAddressableById provides a mock function with given fields: id
func (_m *DBClient) DeleteAddressableById(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCommandById provides a mock function with given fields: id
func (_m *DBClient) DeleteCommandById(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDeviceById provides a mock function with given fields: id
func (_m *DBClient) DeleteDeviceById(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDeviceProfileById provides a mock function with given fields: id
func (_m *DBClient) DeleteDeviceProfileById(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDeviceReportById provides a mock function with given fields: id
func (_m *DBClient) DeleteDeviceReportById(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDeviceServiceById provides a mock function with given fields: id
func (_m *DBClient) DeleteDeviceServiceById(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProvisionWatcherById provides a mock function with given fields: id
func (_m *DBClient) DeleteProvisionWatcherById(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteScheduleById provides a mock function with given fields: id
func (_m *DBClient) DeleteScheduleById(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteScheduleEventById provides a mock function with given fields: id
func (_m *DBClient) DeleteScheduleEventById(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAddressableById provides a mock function with given fields: id
func (_m *DBClient) GetAddressableById(id string) (models.Addressable, error) {
	ret := _m.Called(id)

	var r0 models.Addressable
	if rf, ok := ret.Get(0).(func(string) models.Addressable); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Addressable)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressableByName provides a mock function with given fields: n
func (_m *DBClient) GetAddressableByName(n string) (models.Addressable, error) {
	ret := _m.Called(n)

	var r0 models.Addressable
	if rf, ok := ret.Get(0).(func(string) models.Addressable); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Get(0).(models.Addressable)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressables provides a mock function with given fields:
func (_m *DBClient) GetAddressables() ([]models.Addressable, error) {
	ret := _m.Called()

	var r0 []models.Addressable
	if rf, ok := ret.Get(0).(func() []models.Addressable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Addressable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressablesByAddress provides a mock function with given fields: add
func (_m *DBClient) GetAddressablesByAddress(add string) ([]models.Addressable, error) {
	ret := _m.Called(add)

	var r0 []models.Addressable
	if rf, ok := ret.Get(0).(func(string) []models.Addressable); ok {
		r0 = rf(add)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Addressable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(add)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressablesByPort provides a mock function with given fields: p
func (_m *DBClient) GetAddressablesByPort(p int) ([]models.Addressable, error) {
	ret := _m.Called(p)

	var r0 []models.Addressable
	if rf, ok := ret.Get(0).(func(int) []models.Addressable); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Addressable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressablesByPublisher provides a mock function with given fields: p
func (_m *DBClient) GetAddressablesByPublisher(p string) ([]models.Addressable, error) {
	ret := _m.Called(p)

	var r0 []models.Addressable
	if rf, ok := ret.Get(0).(func(string) []models.Addressable); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Addressable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressablesByTopic provides a mock function with given fields: t
func (_m *DBClient) GetAddressablesByTopic(t string) ([]models.Addressable, error) {
	ret := _m.Called(t)

	var r0 []models.Addressable
	if rf, ok := ret.Get(0).(func(string) []models.Addressable); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Addressable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCommands provides a mock function with given fields:
func (_m *DBClient) GetAllCommands() ([]models.Command, error) {
	ret := _m.Called()

	var r0 []models.Command
	if rf, ok := ret.Get(0).(func() []models.Command); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Command)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDeviceProfiles provides a mock function with given fields: d
func (_m *DBClient) GetAllDeviceProfiles(d *[]models.DeviceProfile) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.DeviceProfile) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllDeviceReports provides a mock function with given fields:
func (_m *DBClient) GetAllDeviceReports() ([]models.DeviceReport, error) {
	ret := _m.Called()

	var r0 []models.DeviceReport
	if rf, ok := ret.Get(0).(func() []models.DeviceReport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DeviceReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDeviceServices provides a mock function with given fields: d
func (_m *DBClient) GetAllDeviceServices(d *[]models.DeviceService) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.DeviceService) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllDevices provides a mock function with given fields: d
func (_m *DBClient) GetAllDevices(d *[]models.Device) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.Device) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProvisionWatchers provides a mock function with given fields: pw
func (_m *DBClient) GetAllProvisionWatchers(pw *[]models.ProvisionWatcher) error {
	ret := _m.Called(pw)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.ProvisionWatcher) error); ok {
		r0 = rf(pw)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllScheduleEvents provides a mock function with given fields: se
func (_m *DBClient) GetAllScheduleEvents(se *[]models.ScheduleEvent) error {
	ret := _m.Called(se)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.ScheduleEvent) error); ok {
		r0 = rf(se)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllSchedules provides a mock function with given fields: s
func (_m *DBClient) GetAllSchedules(s *[]models.Schedule) error {
	ret := _m.Called(s)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.Schedule) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCommandById provides a mock function with given fields: id
func (_m *DBClient) GetCommandById(id string) (models.Command, error) {
	ret := _m.Called(id)

	var r0 models.Command
	if rf, ok := ret.Get(0).(func(string) models.Command); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Command)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommandByName provides a mock function with given fields: id
func (_m *DBClient) GetCommandByName(id string) ([]models.Command, error) {
	ret := _m.Called(id)

	var r0 []models.Command
	if rf, ok := ret.Get(0).(func(string) []models.Command); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Command)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceById provides a mock function with given fields: d, id
func (_m *DBClient) GetDeviceById(d *models.Device, id string) error {
	ret := _m.Called(d, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Device, string) error); ok {
		r0 = rf(d, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceByName provides a mock function with given fields: d, n
func (_m *DBClient) GetDeviceByName(d *models.Device, n string) error {
	ret := _m.Called(d, n)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Device, string) error); ok {
		r0 = rf(d, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceProfileById provides a mock function with given fields: d, id
func (_m *DBClient) GetDeviceProfileById(d *models.DeviceProfile, id string) error {
	ret := _m.Called(d, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.DeviceProfile, string) error); ok {
		r0 = rf(d, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceProfileByName provides a mock function with given fields: dp, n
func (_m *DBClient) GetDeviceProfileByName(dp *models.DeviceProfile, n string) error {
	ret := _m.Called(dp, n)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.DeviceProfile, string) error); ok {
		r0 = rf(dp, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceProfilesByManufacturer provides a mock function with given fields: dp, man
func (_m *DBClient) GetDeviceProfilesByManufacturer(dp *[]models.DeviceProfile, man string) error {
	ret := _m.Called(dp, man)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.DeviceProfile, string) error); ok {
		r0 = rf(dp, man)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceProfilesByManufacturerModel provides a mock function with given fields: dp, man, mod
func (_m *DBClient) GetDeviceProfilesByManufacturerModel(dp *[]models.DeviceProfile, man string, mod string) error {
	ret := _m.Called(dp, man, mod)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.DeviceProfile, string, string) error); ok {
		r0 = rf(dp, man, mod)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceProfilesByModel provides a mock function with given fields: dp, m
func (_m *DBClient) GetDeviceProfilesByModel(dp *[]models.DeviceProfile, m string) error {
	ret := _m.Called(dp, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.DeviceProfile, string) error); ok {
		r0 = rf(dp, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceProfilesUsingCommand provides a mock function with given fields: dp, c
func (_m *DBClient) GetDeviceProfilesUsingCommand(dp *[]models.DeviceProfile, c models.Command) error {
	ret := _m.Called(dp, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.DeviceProfile, models.Command) error); ok {
		r0 = rf(dp, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceProfilesWithLabel provides a mock function with given fields: dp, l
func (_m *DBClient) GetDeviceProfilesWithLabel(dp *[]models.DeviceProfile, l string) error {
	ret := _m.Called(dp, l)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.DeviceProfile, string) error); ok {
		r0 = rf(dp, l)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceReportByDeviceName provides a mock function with given fields: n
func (_m *DBClient) GetDeviceReportByDeviceName(n string) ([]models.DeviceReport, error) {
	ret := _m.Called(n)

	var r0 []models.DeviceReport
	if rf, ok := ret.Get(0).(func(string) []models.DeviceReport); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DeviceReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceReportById provides a mock function with given fields: id
func (_m *DBClient) GetDeviceReportById(id string) (models.DeviceReport, error) {
	ret := _m.Called(id)

	var r0 models.DeviceReport
	if rf, ok := ret.Get(0).(func(string) models.DeviceReport); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.DeviceReport)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceReportByName provides a mock function with given fields: n
func (_m *DBClient) GetDeviceReportByName(n string) (models.DeviceReport, error) {
	ret := _m.Called(n)

	var r0 models.DeviceReport
	if rf, ok := ret.Get(0).(func(string) models.DeviceReport); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Get(0).(models.DeviceReport)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceReportsByScheduleEventName provides a mock function with given fields: n
func (_m *DBClient) GetDeviceReportsByScheduleEventName(n string) ([]models.DeviceReport, error) {
	ret := _m.Called(n)

	var r0 []models.DeviceReport
	if rf, ok := ret.Get(0).(func(string) []models.DeviceReport); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DeviceReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceServiceById provides a mock function with given fields: d, id
func (_m *DBClient) GetDeviceServiceById(d *models.DeviceService, id string) error {
	ret := _m.Called(d, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.DeviceService, string) error); ok {
		r0 = rf(d, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceServiceByName provides a mock function with given fields: d, n
func (_m *DBClient) GetDeviceServiceByName(d *models.DeviceService, n string) error {
	ret := _m.Called(d, n)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.DeviceService, string) error); ok {
		r0 = rf(d, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceServicesByAddressableId provides a mock function with given fields: d, id
func (_m *DBClient) GetDeviceServicesByAddressableId(d *[]models.DeviceService, id string) error {
	ret := _m.Called(d, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.DeviceService, string) error); ok {
		r0 = rf(d, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceServicesWithLabel provides a mock function with given fields: d, l
func (_m *DBClient) GetDeviceServicesWithLabel(d *[]models.DeviceService, l string) error {
	ret := _m.Called(d, l)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.DeviceService, string) error); ok {
		r0 = rf(d, l)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDevicesByAddressableId provides a mock function with given fields: d, aid
func (_m *DBClient) GetDevicesByAddressableId(d *[]models.Device, aid string) error {
	ret := _m.Called(d, aid)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.Device, string) error); ok {
		r0 = rf(d, aid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDevicesByProfileId provides a mock function with given fields: d, pid
func (_m *DBClient) GetDevicesByProfileId(d *[]models.Device, pid string) error {
	ret := _m.Called(d, pid)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.Device, string) error); ok {
		r0 = rf(d, pid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDevicesByServiceId provides a mock function with given fields: d, sid
func (_m *DBClient) GetDevicesByServiceId(d *[]models.Device, sid string) error {
	ret := _m.Called(d, sid)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.Device, string) error); ok {
		r0 = rf(d, sid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDevicesWithLabel provides a mock function with given fields: d, l
func (_m *DBClient) GetDevicesWithLabel(d *[]models.Device, l string) error {
	ret := _m.Called(d, l)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.Device, string) error); ok {
		r0 = rf(d, l)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProvisionWatcherById provides a mock function with given fields: pw, id
func (_m *DBClient) GetProvisionWatcherById(pw *models.ProvisionWatcher, id string) error {
	ret := _m.Called(pw, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ProvisionWatcher, string) error); ok {
		r0 = rf(pw, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProvisionWatcherByName provides a mock function with given fields: pw, n
func (_m *DBClient) GetProvisionWatcherByName(pw *models.ProvisionWatcher, n string) error {
	ret := _m.Called(pw, n)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ProvisionWatcher, string) error); ok {
		r0 = rf(pw, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProvisionWatchersByIdentifier provides a mock function with given fields: pw, k, v
func (_m *DBClient) GetProvisionWatchersByIdentifier(pw *[]models.ProvisionWatcher, k string, v string) error {
	ret := _m.Called(pw, k, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.ProvisionWatcher, string, string) error); ok {
		r0 = rf(pw, k, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProvisionWatchersByProfileId provides a mock function with given fields: pw, id
func (_m *DBClient) GetProvisionWatchersByProfileId(pw *[]models.ProvisionWatcher, id string) error {
	ret := _m.Called(pw, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.ProvisionWatcher, string) error); ok {
		r0 = rf(pw, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProvisionWatchersByServiceId provides a mock function with given fields: pw, id
func (_m *DBClient) GetProvisionWatchersByServiceId(pw *[]models.ProvisionWatcher, id string) error {
	ret := _m.Called(pw, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.ProvisionWatcher, string) error); ok {
		r0 = rf(pw, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetScheduleById provides a mock function with given fields: s, id
func (_m *DBClient) GetScheduleById(s *models.Schedule, id string) error {
	ret := _m.Called(s, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Schedule, string) error); ok {
		r0 = rf(s, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetScheduleByName provides a mock function with given fields: s, n
func (_m *DBClient) GetScheduleByName(s *models.Schedule, n string) error {
	ret := _m.Called(s, n)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Schedule, string) error); ok {
		r0 = rf(s, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetScheduleEventById provides a mock function with given fields: se, id
func (_m *DBClient) GetScheduleEventById(se *models.ScheduleEvent, id string) error {
	ret := _m.Called(se, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ScheduleEvent, string) error); ok {
		r0 = rf(se, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetScheduleEventByName provides a mock function with given fields: se, n
func (_m *DBClient) GetScheduleEventByName(se *models.ScheduleEvent, n string) error {
	ret := _m.Called(se, n)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ScheduleEvent, string) error); ok {
		r0 = rf(se, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetScheduleEventsByAddressableId provides a mock function with given fields: se, id
func (_m *DBClient) GetScheduleEventsByAddressableId(se *[]models.ScheduleEvent, id string) error {
	ret := _m.Called(se, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.ScheduleEvent, string) error); ok {
		r0 = rf(se, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetScheduleEventsByScheduleName provides a mock function with given fields: se, n
func (_m *DBClient) GetScheduleEventsByScheduleName(se *[]models.ScheduleEvent, n string) error {
	ret := _m.Called(se, n)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.ScheduleEvent, string) error); ok {
		r0 = rf(se, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetScheduleEventsByServiceName provides a mock function with given fields: se, n
func (_m *DBClient) GetScheduleEventsByServiceName(se *[]models.ScheduleEvent, n string) error {
	ret := _m.Called(se, n)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.ScheduleEvent, string) error); ok {
		r0 = rf(se, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScrubMetadata provides a mock function with given fields:
func (_m *DBClient) ScrubMetadata() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAddressable provides a mock function with given fields: a
func (_m *DBClient) UpdateAddressable(a models.Addressable) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Addressable) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCommand provides a mock function with given fields: c
func (_m *DBClient) UpdateCommand(c *models.Command) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Command) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDevice provides a mock function with given fields: d
func (_m *DBClient) UpdateDevice(d models.Device) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Device) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeviceProfile provides a mock function with given fields: dp
func (_m *DBClient) UpdateDeviceProfile(dp *models.DeviceProfile) error {
	ret := _m.Called(dp)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.DeviceProfile) error); ok {
		r0 = rf(dp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeviceReport provides a mock function with given fields: dr
func (_m *DBClient) UpdateDeviceReport(dr models.DeviceReport) error {
	ret := _m.Called(dr)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.DeviceReport) error); ok {
		r0 = rf(dr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeviceService provides a mock function with given fields: ds
func (_m *DBClient) UpdateDeviceService(ds models.DeviceService) error {
	ret := _m.Called(ds)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.DeviceService) error); ok {
		r0 = rf(ds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProvisionWatcher provides a mock function with given fields: pw
func (_m *DBClient) UpdateProvisionWatcher(pw models.ProvisionWatcher) error {
	ret := _m.Called(pw)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.ProvisionWatcher) error); ok {
		r0 = rf(pw)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSchedule provides a mock function with given fields: s
func (_m *DBClient) UpdateSchedule(s models.Schedule) error {
	ret := _m.Called(s)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Schedule) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateScheduleEvent provides a mock function with given fields: se
func (_m *DBClient) UpdateScheduleEvent(se models.ScheduleEvent) error {
	ret := _m.Called(se)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.ScheduleEvent) error); ok {
		r0 = rf(se)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
