// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	errors "github.com/edgexfoundry/go-mod-core-contracts/v2/errors"

	mock "github.com/stretchr/testify/mock"

	models "github.com/edgexfoundry/go-mod-core-contracts/v2/models"
)

// DBClient is an autogenerated mock type for the DBClient type
type DBClient struct {
	mock.Mock
}

// AddEvent provides a mock function with given fields: e
func (_m *DBClient) AddEvent(e models.Event) (models.Event, errors.EdgeX) {
	ret := _m.Called(e)

	var r0 models.Event
	if rf, ok := ret.Get(0).(func(models.Event) models.Event); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(models.Event)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(models.Event) errors.EdgeX); ok {
		r1 = rf(e)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AllEvents provides a mock function with given fields: offset, limit
func (_m *DBClient) AllEvents(offset int, limit int) ([]models.Event, errors.EdgeX) {
	ret := _m.Called(offset, limit)

	var r0 []models.Event
	if rf, ok := ret.Get(0).(func(int, int) []models.Event); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Event)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(int, int) errors.EdgeX); ok {
		r1 = rf(offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AllReadings provides a mock function with given fields: offset, limit
func (_m *DBClient) AllReadings(offset int, limit int) ([]models.Reading, errors.EdgeX) {
	ret := _m.Called(offset, limit)

	var r0 []models.Reading
	if rf, ok := ret.Get(0).(func(int, int) []models.Reading); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reading)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(int, int) errors.EdgeX); ok {
		r1 = rf(offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// CloseSession provides a mock function with given fields:
func (_m *DBClient) CloseSession() {
	_m.Called()
}

// DeleteEventById provides a mock function with given fields: id
func (_m *DBClient) DeleteEventById(id string) errors.EdgeX {
	ret := _m.Called(id)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteEventsByAge provides a mock function with given fields: age
func (_m *DBClient) DeleteEventsByAge(age int64) errors.EdgeX {
	ret := _m.Called(age)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int64) errors.EdgeX); ok {
		r0 = rf(age)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteEventsByDeviceName provides a mock function with given fields: deviceName
func (_m *DBClient) DeleteEventsByDeviceName(deviceName string) errors.EdgeX {
	ret := _m.Called(deviceName)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(deviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// EventById provides a mock function with given fields: id
func (_m *DBClient) EventById(id string) (models.Event, errors.EdgeX) {
	ret := _m.Called(id)

	var r0 models.Event
	if rf, ok := ret.Get(0).(func(string) models.Event); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Event)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// EventCountByDeviceName provides a mock function with given fields: deviceName
func (_m *DBClient) EventCountByDeviceName(deviceName string) (uint32, errors.EdgeX) {
	ret := _m.Called(deviceName)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(string) uint32); ok {
		r0 = rf(deviceName)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(deviceName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// EventCountByTimeRange provides a mock function with given fields: start, end
func (_m *DBClient) EventCountByTimeRange(start int, end int) (uint32, errors.EdgeX) {
	ret := _m.Called(start, end)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(int, int) uint32); ok {
		r0 = rf(start, end)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(int, int) errors.EdgeX); ok {
		r1 = rf(start, end)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// EventTotalCount provides a mock function with given fields:
func (_m *DBClient) EventTotalCount() (uint32, errors.EdgeX) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func() errors.EdgeX); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// EventsByDeviceName provides a mock function with given fields: offset, limit, name
func (_m *DBClient) EventsByDeviceName(offset int, limit int, name string) ([]models.Event, errors.EdgeX) {
	ret := _m.Called(offset, limit, name)

	var r0 []models.Event
	if rf, ok := ret.Get(0).(func(int, int, string) []models.Event); ok {
		r0 = rf(offset, limit, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Event)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(int, int, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// EventsByTimeRange provides a mock function with given fields: start, end, offset, limit
func (_m *DBClient) EventsByTimeRange(start int, end int, offset int, limit int) ([]models.Event, errors.EdgeX) {
	ret := _m.Called(start, end, offset, limit)

	var r0 []models.Event
	if rf, ok := ret.Get(0).(func(int, int, int, int) []models.Event); ok {
		r0 = rf(start, end, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Event)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(int, int, int, int) errors.EdgeX); ok {
		r1 = rf(start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingCountByDeviceName provides a mock function with given fields: deviceName
func (_m *DBClient) ReadingCountByDeviceName(deviceName string) (uint32, errors.EdgeX) {
	ret := _m.Called(deviceName)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(string) uint32); ok {
		r0 = rf(deviceName)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(deviceName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingCountByDeviceNameAndResourceName provides a mock function with given fields: deviceName, resourceName
func (_m *DBClient) ReadingCountByDeviceNameAndResourceName(deviceName string, resourceName string) (uint32, errors.EdgeX) {
	ret := _m.Called(deviceName, resourceName)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(string, string) uint32); ok {
		r0 = rf(deviceName, resourceName)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string, string) errors.EdgeX); ok {
		r1 = rf(deviceName, resourceName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingCountByDeviceNameAndResourceNameAndTimeRange provides a mock function with given fields: deviceName, resourceName, start, end
func (_m *DBClient) ReadingCountByDeviceNameAndResourceNameAndTimeRange(deviceName string, resourceName string, start int, end int) (uint32, errors.EdgeX) {
	ret := _m.Called(deviceName, resourceName, start, end)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(string, string, int, int) uint32); ok {
		r0 = rf(deviceName, resourceName, start, end)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string, string, int, int) errors.EdgeX); ok {
		r1 = rf(deviceName, resourceName, start, end)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingCountByDeviceNameAndTimeRange provides a mock function with given fields: deviceName, start, end
func (_m *DBClient) ReadingCountByDeviceNameAndTimeRange(deviceName string, start int, end int) (uint32, errors.EdgeX) {
	ret := _m.Called(deviceName, start, end)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(string, int, int) uint32); ok {
		r0 = rf(deviceName, start, end)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string, int, int) errors.EdgeX); ok {
		r1 = rf(deviceName, start, end)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingCountByResourceName provides a mock function with given fields: resourceName
func (_m *DBClient) ReadingCountByResourceName(resourceName string) (uint32, errors.EdgeX) {
	ret := _m.Called(resourceName)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(string) uint32); ok {
		r0 = rf(resourceName)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(resourceName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingCountByResourceNameAndTimeRange provides a mock function with given fields: resourceName, start, end
func (_m *DBClient) ReadingCountByResourceNameAndTimeRange(resourceName string, start int, end int) (uint32, errors.EdgeX) {
	ret := _m.Called(resourceName, start, end)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(string, int, int) uint32); ok {
		r0 = rf(resourceName, start, end)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string, int, int) errors.EdgeX); ok {
		r1 = rf(resourceName, start, end)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingCountByTimeRange provides a mock function with given fields: start, end
func (_m *DBClient) ReadingCountByTimeRange(start int, end int) (uint32, errors.EdgeX) {
	ret := _m.Called(start, end)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(int, int) uint32); ok {
		r0 = rf(start, end)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(int, int) errors.EdgeX); ok {
		r1 = rf(start, end)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingTotalCount provides a mock function with given fields:
func (_m *DBClient) ReadingTotalCount() (uint32, errors.EdgeX) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func() errors.EdgeX); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingsByDeviceName provides a mock function with given fields: offset, limit, name
func (_m *DBClient) ReadingsByDeviceName(offset int, limit int, name string) ([]models.Reading, errors.EdgeX) {
	ret := _m.Called(offset, limit, name)

	var r0 []models.Reading
	if rf, ok := ret.Get(0).(func(int, int, string) []models.Reading); ok {
		r0 = rf(offset, limit, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reading)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(int, int, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingsByDeviceNameAndResourceName provides a mock function with given fields: deviceName, resourceName, offset, limit
func (_m *DBClient) ReadingsByDeviceNameAndResourceName(deviceName string, resourceName string, offset int, limit int) ([]models.Reading, errors.EdgeX) {
	ret := _m.Called(deviceName, resourceName, offset, limit)

	var r0 []models.Reading
	if rf, ok := ret.Get(0).(func(string, string, int, int) []models.Reading); ok {
		r0 = rf(deviceName, resourceName, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reading)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string, string, int, int) errors.EdgeX); ok {
		r1 = rf(deviceName, resourceName, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingsByDeviceNameAndResourceNameAndTimeRange provides a mock function with given fields: deviceName, resourceName, start, end, offset, limit
func (_m *DBClient) ReadingsByDeviceNameAndResourceNameAndTimeRange(deviceName string, resourceName string, start int, end int, offset int, limit int) ([]models.Reading, errors.EdgeX) {
	ret := _m.Called(deviceName, resourceName, start, end, offset, limit)

	var r0 []models.Reading
	if rf, ok := ret.Get(0).(func(string, string, int, int, int, int) []models.Reading); ok {
		r0 = rf(deviceName, resourceName, start, end, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reading)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string, string, int, int, int, int) errors.EdgeX); ok {
		r1 = rf(deviceName, resourceName, start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingsByDeviceNameAndResourceNamesAndTimeRange provides a mock function with given fields: deviceName, resourceNames, start, end, offset, limit
func (_m *DBClient) ReadingsByDeviceNameAndResourceNamesAndTimeRange(deviceName string, resourceNames []string, start int, end int, offset int, limit int) ([]models.Reading, uint32, errors.EdgeX) {
	ret := _m.Called(deviceName, resourceNames, start, end, offset, limit)

	var r0 []models.Reading
	if rf, ok := ret.Get(0).(func(string, []string, int, int, int, int) []models.Reading); ok {
		r0 = rf(deviceName, resourceNames, start, end, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reading)
		}
	}

	var r1 uint32
	if rf, ok := ret.Get(1).(func(string, []string, int, int, int, int) uint32); ok {
		r1 = rf(deviceName, resourceNames, start, end, offset, limit)
	} else {
		r1 = ret.Get(1).(uint32)
	}

	var r2 errors.EdgeX
	if rf, ok := ret.Get(2).(func(string, []string, int, int, int, int) errors.EdgeX); ok {
		r2 = rf(deviceName, resourceNames, start, end, offset, limit)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(errors.EdgeX)
		}
	}

	return r0, r1, r2
}

// ReadingsByDeviceNameAndTimeRange provides a mock function with given fields: deviceName, start, end, offset, limit
func (_m *DBClient) ReadingsByDeviceNameAndTimeRange(deviceName string, start int, end int, offset int, limit int) ([]models.Reading, errors.EdgeX) {
	ret := _m.Called(deviceName, start, end, offset, limit)

	var r0 []models.Reading
	if rf, ok := ret.Get(0).(func(string, int, int, int, int) []models.Reading); ok {
		r0 = rf(deviceName, start, end, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reading)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string, int, int, int, int) errors.EdgeX); ok {
		r1 = rf(deviceName, start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingsByResourceName provides a mock function with given fields: offset, limit, resourceName
func (_m *DBClient) ReadingsByResourceName(offset int, limit int, resourceName string) ([]models.Reading, errors.EdgeX) {
	ret := _m.Called(offset, limit, resourceName)

	var r0 []models.Reading
	if rf, ok := ret.Get(0).(func(int, int, string) []models.Reading); ok {
		r0 = rf(offset, limit, resourceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reading)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(int, int, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, resourceName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingsByResourceNameAndTimeRange provides a mock function with given fields: resourceName, start, end, offset, limit
func (_m *DBClient) ReadingsByResourceNameAndTimeRange(resourceName string, start int, end int, offset int, limit int) ([]models.Reading, errors.EdgeX) {
	ret := _m.Called(resourceName, start, end, offset, limit)

	var r0 []models.Reading
	if rf, ok := ret.Get(0).(func(string, int, int, int, int) []models.Reading); ok {
		r0 = rf(resourceName, start, end, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reading)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string, int, int, int, int) errors.EdgeX); ok {
		r1 = rf(resourceName, start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingsByTimeRange provides a mock function with given fields: start, end, offset, limit
func (_m *DBClient) ReadingsByTimeRange(start int, end int, offset int, limit int) ([]models.Reading, errors.EdgeX) {
	ret := _m.Called(start, end, offset, limit)

	var r0 []models.Reading
	if rf, ok := ret.Get(0).(func(int, int, int, int) []models.Reading); ok {
		r0 = rf(start, end, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reading)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(int, int, int, int) errors.EdgeX); ok {
		r1 = rf(start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}
