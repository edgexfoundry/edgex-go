// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	errors "github.com/edgexfoundry/go-mod-core-contracts/errors"

	mock "github.com/stretchr/testify/mock"

	models "github.com/edgexfoundry/go-mod-core-contracts/v2/models"
)

// DBClient is an autogenerated mock type for the DBClient type
type DBClient struct {
	mock.Mock
}

// AddEvent provides a mock function with given fields: e
func (_m *DBClient) AddEvent(e models.Event) (models.Event, errors.EdgeX) {
	ret := _m.Called(e)

	var r0 models.Event
	if rf, ok := ret.Get(0).(func(models.Event) models.Event); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(models.Event)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(models.Event) errors.EdgeX); ok {
		r1 = rf(e)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// CloseSession provides a mock function with given fields:
func (_m *DBClient) CloseSession() {
	_m.Called()
}

// EventById provides a mock function with given fields: id
func (_m *DBClient) EventById(id string) (models.Event, errors.EdgeX) {
	ret := _m.Called(id)

	var r0 models.Event
	if rf, ok := ret.Get(0).(func(string) models.Event); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Event)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// EventTotalCount provides a mock function with given fields:
func (_m *DBClient) EventTotalCount() (uint32, errors.EdgeX) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func() errors.EdgeX); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}
