// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	errors "github.com/edgexfoundry/go-mod-core-contracts/v2/errors"

	mock "github.com/stretchr/testify/mock"

	models "github.com/edgexfoundry/go-mod-core-contracts/v2/models"
)

// SchedulerManager is an autogenerated mock type for the SchedulerManager type
type SchedulerManager struct {
	mock.Mock
}

// AddInterval provides a mock function with given fields: interval
func (_m *SchedulerManager) AddInterval(interval models.Interval) errors.EdgeX {
	ret := _m.Called(interval)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.Interval) errors.EdgeX); ok {
		r0 = rf(interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// AddIntervalAction provides a mock function with given fields: intervalAction
func (_m *SchedulerManager) AddIntervalAction(intervalAction models.IntervalAction) errors.EdgeX {
	ret := _m.Called(intervalAction)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.IntervalAction) errors.EdgeX); ok {
		r0 = rf(intervalAction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteIntervalActionByName provides a mock function with given fields: name
func (_m *SchedulerManager) DeleteIntervalActionByName(name string) errors.EdgeX {
	ret := _m.Called(name)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteIntervalByName provides a mock function with given fields: name
func (_m *SchedulerManager) DeleteIntervalByName(name string) errors.EdgeX {
	ret := _m.Called(name)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// IntervalActionByName provides a mock function with given fields: name
func (_m *SchedulerManager) IntervalActionByName(name string) (models.IntervalAction, errors.EdgeX) {
	ret := _m.Called(name)

	var r0 models.IntervalAction
	if rf, ok := ret.Get(0).(func(string) models.IntervalAction); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.IntervalAction)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// IntervalByName provides a mock function with given fields: intervalName
func (_m *SchedulerManager) IntervalByName(intervalName string) (models.Interval, errors.EdgeX) {
	ret := _m.Called(intervalName)

	var r0 models.Interval
	if rf, ok := ret.Get(0).(func(string) models.Interval); ok {
		r0 = rf(intervalName)
	} else {
		r0 = ret.Get(0).(models.Interval)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(intervalName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// StartTicker provides a mock function with given fields:
func (_m *SchedulerManager) StartTicker() {
	_m.Called()
}

// StopTicker provides a mock function with given fields:
func (_m *SchedulerManager) StopTicker() {
	_m.Called()
}

// UpdateInterval provides a mock function with given fields: interval
func (_m *SchedulerManager) UpdateInterval(interval models.Interval) errors.EdgeX {
	ret := _m.Called(interval)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.Interval) errors.EdgeX); ok {
		r0 = rf(interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// UpdateIntervalAction provides a mock function with given fields: intervalAction
func (_m *SchedulerManager) UpdateIntervalAction(intervalAction models.IntervalAction) errors.EdgeX {
	ret := _m.Called(intervalAction)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.IntervalAction) errors.EdgeX); ok {
		r0 = rf(intervalAction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}
