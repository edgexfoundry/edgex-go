// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	errors "github.com/edgexfoundry/go-mod-core-contracts/v3/errors"

	mock "github.com/stretchr/testify/mock"

	models "github.com/edgexfoundry/go-mod-core-contracts/v3/models"
)

// SchedulerManager is an autogenerated mock type for the SchedulerManager type
type SchedulerManager struct {
	mock.Mock
}

// AddInterval provides a mock function with given fields: interval
func (_m *SchedulerManager) AddInterval(interval models.Interval) errors.EdgeX {
	ret := _m.Called(interval)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.Interval) errors.EdgeX); ok {
		r0 = rf(interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// AddIntervalAction provides a mock function with given fields: intervalAction
func (_m *SchedulerManager) AddIntervalAction(intervalAction models.IntervalAction) errors.EdgeX {
	ret := _m.Called(intervalAction)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.IntervalAction) errors.EdgeX); ok {
		r0 = rf(intervalAction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteIntervalActionByName provides a mock function with given fields: name
func (_m *SchedulerManager) DeleteIntervalActionByName(name string) errors.EdgeX {
	ret := _m.Called(name)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteIntervalByName provides a mock function with given fields: name
func (_m *SchedulerManager) DeleteIntervalByName(name string) errors.EdgeX {
	ret := _m.Called(name)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// StartTicker provides a mock function with given fields:
func (_m *SchedulerManager) StartTicker() {
	_m.Called()
}

// StopTicker provides a mock function with given fields:
func (_m *SchedulerManager) StopTicker() {
	_m.Called()
}

// UpdateInterval provides a mock function with given fields: interval
func (_m *SchedulerManager) UpdateInterval(interval models.Interval) errors.EdgeX {
	ret := _m.Called(interval)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.Interval) errors.EdgeX); ok {
		r0 = rf(interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// UpdateIntervalAction provides a mock function with given fields: intervalAction
func (_m *SchedulerManager) UpdateIntervalAction(intervalAction models.IntervalAction) errors.EdgeX {
	ret := _m.Called(intervalAction)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.IntervalAction) errors.EdgeX); ok {
		r0 = rf(intervalAction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

type mockConstructorTestingTNewSchedulerManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewSchedulerManager creates a new instance of SchedulerManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSchedulerManager(t mockConstructorTestingTNewSchedulerManager) *SchedulerManager {
	mock := &SchedulerManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
