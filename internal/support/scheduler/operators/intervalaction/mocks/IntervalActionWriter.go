// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/edgexfoundry/go-mod-core-contracts/models"

// IntervalActionWriter is an autogenerated mock type for the IntervalActionWriter type
type IntervalActionWriter struct {
	mock.Mock
}

// AddIntervalAction provides a mock function with given fields: interval
func (_m *IntervalActionWriter) AddIntervalAction(interval models.IntervalAction) (string, error) {
	ret := _m.Called(interval)

	var r0 string
	if rf, ok := ret.Get(0).(func(models.IntervalAction) string); ok {
		r0 = rf(interval)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.IntervalAction) error); ok {
		r1 = rf(interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntervalActionById provides a mock function with given fields: id
func (_m *IntervalActionWriter) IntervalActionById(id string) (models.IntervalAction, error) {
	ret := _m.Called(id)

	var r0 models.IntervalAction
	if rf, ok := ret.Get(0).(func(string) models.IntervalAction); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.IntervalAction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntervalActionByName provides a mock function with given fields: name
func (_m *IntervalActionWriter) IntervalActionByName(name string) (models.IntervalAction, error) {
	ret := _m.Called(name)

	var r0 models.IntervalAction
	if rf, ok := ret.Get(0).(func(string) models.IntervalAction); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.IntervalAction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntervalActions provides a mock function with given fields:
func (_m *IntervalActionWriter) IntervalActions() ([]models.IntervalAction, error) {
	ret := _m.Called()

	var r0 []models.IntervalAction
	if rf, ok := ret.Get(0).(func() []models.IntervalAction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.IntervalAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntervalActionsWithLimit provides a mock function with given fields: limit
func (_m *IntervalActionWriter) IntervalActionsWithLimit(limit int) ([]models.IntervalAction, error) {
	ret := _m.Called(limit)

	var r0 []models.IntervalAction
	if rf, ok := ret.Get(0).(func(int) []models.IntervalAction); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.IntervalAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntervalById provides a mock function with given fields: id
func (_m *IntervalActionWriter) IntervalById(id string) (models.Interval, error) {
	ret := _m.Called(id)

	var r0 models.Interval
	if rf, ok := ret.Get(0).(func(string) models.Interval); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Interval)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntervalByName provides a mock function with given fields: name
func (_m *IntervalActionWriter) IntervalByName(name string) (models.Interval, error) {
	ret := _m.Called(name)

	var r0 models.Interval
	if rf, ok := ret.Get(0).(func(string) models.Interval); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.Interval)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Intervals provides a mock function with given fields:
func (_m *IntervalActionWriter) Intervals() ([]models.Interval, error) {
	ret := _m.Called()

	var r0 []models.Interval
	if rf, ok := ret.Get(0).(func() []models.Interval); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Interval)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntervalsWithLimit provides a mock function with given fields: limit
func (_m *IntervalActionWriter) IntervalsWithLimit(limit int) ([]models.Interval, error) {
	ret := _m.Called(limit)

	var r0 []models.Interval
	if rf, ok := ret.Get(0).(func(int) []models.Interval); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Interval)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
