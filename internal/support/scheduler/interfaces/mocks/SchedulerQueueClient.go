// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/edgexfoundry/go-mod-core-contracts/v2/models"

// SchedulerQueueClient is an autogenerated mock type for the SchedulerQueueClient type
type SchedulerQueueClient struct {
	mock.Mock
}

// AddIntervalActionToQueue provides a mock function with given fields: intervalAction
func (_m *SchedulerQueueClient) AddIntervalActionToQueue(intervalAction models.IntervalAction) error {
	ret := _m.Called(intervalAction)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.IntervalAction) error); ok {
		r0 = rf(intervalAction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddIntervalToQueue provides a mock function with given fields: interval
func (_m *SchedulerQueueClient) AddIntervalToQueue(interval models.Interval) error {
	ret := _m.Called(interval)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Interval) error); ok {
		r0 = rf(interval)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connect provides a mock function with given fields:
func (_m *SchedulerQueueClient) Connect() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryIntervalActionByID provides a mock function with given fields: intervalActionId
func (_m *SchedulerQueueClient) QueryIntervalActionByID(intervalActionId string) (models.IntervalAction, error) {
	ret := _m.Called(intervalActionId)

	var r0 models.IntervalAction
	if rf, ok := ret.Get(0).(func(string) models.IntervalAction); ok {
		r0 = rf(intervalActionId)
	} else {
		r0 = ret.Get(0).(models.IntervalAction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(intervalActionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryIntervalActionByName provides a mock function with given fields: intervalActionName
func (_m *SchedulerQueueClient) QueryIntervalActionByName(intervalActionName string) (models.IntervalAction, error) {
	ret := _m.Called(intervalActionName)

	var r0 models.IntervalAction
	if rf, ok := ret.Get(0).(func(string) models.IntervalAction); ok {
		r0 = rf(intervalActionName)
	} else {
		r0 = ret.Get(0).(models.IntervalAction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(intervalActionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryIntervalByID provides a mock function with given fields: intervalId
func (_m *SchedulerQueueClient) QueryIntervalByID(intervalId string) (models.Interval, error) {
	ret := _m.Called(intervalId)

	var r0 models.Interval
	if rf, ok := ret.Get(0).(func(string) models.Interval); ok {
		r0 = rf(intervalId)
	} else {
		r0 = ret.Get(0).(models.Interval)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(intervalId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryIntervalByName provides a mock function with given fields: intervalName
func (_m *SchedulerQueueClient) QueryIntervalByName(intervalName string) (models.Interval, error) {
	ret := _m.Called(intervalName)

	var r0 models.Interval
	if rf, ok := ret.Get(0).(func(string) models.Interval); ok {
		r0 = rf(intervalName)
	} else {
		r0 = ret.Get(0).(models.Interval)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(intervalName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveIntervalActionQueue provides a mock function with given fields: intervalActionId
func (_m *SchedulerQueueClient) RemoveIntervalActionQueue(intervalActionId string) error {
	ret := _m.Called(intervalActionId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(intervalActionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveIntervalInQueue provides a mock function with given fields: intervalId
func (_m *SchedulerQueueClient) RemoveIntervalInQueue(intervalId string) error {
	ret := _m.Called(intervalId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(intervalId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateIntervalActionQueue provides a mock function with given fields: intervalAction
func (_m *SchedulerQueueClient) UpdateIntervalActionQueue(intervalAction models.IntervalAction) error {
	ret := _m.Called(intervalAction)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.IntervalAction) error); ok {
		r0 = rf(intervalAction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateIntervalInQueue provides a mock function with given fields: interval
func (_m *SchedulerQueueClient) UpdateIntervalInQueue(interval models.Interval) error {
	ret := _m.Called(interval)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Interval) error); ok {
		r0 = rf(interval)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
