// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	errors "github.com/edgexfoundry/go-mod-core-contracts/v2/errors"

	mock "github.com/stretchr/testify/mock"

	models "github.com/edgexfoundry/go-mod-core-contracts/v2/v2/models"
)

// DBClient is an autogenerated mock type for the DBClient type
type DBClient struct {
	mock.Mock
}

// AddInterval provides a mock function with given fields: e
func (_m *DBClient) AddInterval(e models.Interval) (models.Interval, errors.EdgeX) {
	ret := _m.Called(e)

	var r0 models.Interval
	if rf, ok := ret.Get(0).(func(models.Interval) models.Interval); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(models.Interval)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(models.Interval) errors.EdgeX); ok {
		r1 = rf(e)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AllIntervals provides a mock function with given fields: offset, limit
func (_m *DBClient) AllIntervals(offset int, limit int) ([]models.Interval, errors.EdgeX) {
	ret := _m.Called(offset, limit)

	var r0 []models.Interval
	if rf, ok := ret.Get(0).(func(int, int) []models.Interval); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Interval)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(int, int) errors.EdgeX); ok {
		r1 = rf(offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// CloseSession provides a mock function with given fields:
func (_m *DBClient) CloseSession() {
	_m.Called()
}

// IntervalByName provides a mock function with given fields: name
func (_m *DBClient) IntervalByName(name string) (models.Interval, errors.EdgeX) {
	ret := _m.Called(name)

	var r0 models.Interval
	if rf, ok := ret.Get(0).(func(string) models.Interval); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.Interval)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}
