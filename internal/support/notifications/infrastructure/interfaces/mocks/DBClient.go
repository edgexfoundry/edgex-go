// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	errors "github.com/edgexfoundry/go-mod-core-contracts/v4/errors"

	mock "github.com/stretchr/testify/mock"

	models "github.com/edgexfoundry/go-mod-core-contracts/v4/models"

	requests "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/requests"
)

// DBClient is an autogenerated mock type for the DBClient type
type DBClient struct {
	mock.Mock
}

// AddNotification provides a mock function with given fields: n
func (_m *DBClient) AddNotification(n models.Notification) (models.Notification, errors.EdgeX) {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for AddNotification")
	}

	var r0 models.Notification
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.Notification) (models.Notification, errors.EdgeX)); ok {
		return rf(n)
	}
	if rf, ok := ret.Get(0).(func(models.Notification) models.Notification); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Get(0).(models.Notification)
	}

	if rf, ok := ret.Get(1).(func(models.Notification) errors.EdgeX); ok {
		r1 = rf(n)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AddSubscription provides a mock function with given fields: e
func (_m *DBClient) AddSubscription(e models.Subscription) (models.Subscription, errors.EdgeX) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for AddSubscription")
	}

	var r0 models.Subscription
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.Subscription) (models.Subscription, errors.EdgeX)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(models.Subscription) models.Subscription); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(models.Subscription)
	}

	if rf, ok := ret.Get(1).(func(models.Subscription) errors.EdgeX); ok {
		r1 = rf(e)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AddTransmission provides a mock function with given fields: trans
func (_m *DBClient) AddTransmission(trans models.Transmission) (models.Transmission, errors.EdgeX) {
	ret := _m.Called(trans)

	if len(ret) == 0 {
		panic("no return value specified for AddTransmission")
	}

	var r0 models.Transmission
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.Transmission) (models.Transmission, errors.EdgeX)); ok {
		return rf(trans)
	}
	if rf, ok := ret.Get(0).(func(models.Transmission) models.Transmission); ok {
		r0 = rf(trans)
	} else {
		r0 = ret.Get(0).(models.Transmission)
	}

	if rf, ok := ret.Get(1).(func(models.Transmission) errors.EdgeX); ok {
		r1 = rf(trans)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AllSubscriptions provides a mock function with given fields: offset, limit
func (_m *DBClient) AllSubscriptions(offset int, limit int) ([]models.Subscription, errors.EdgeX) {
	ret := _m.Called(offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for AllSubscriptions")
	}

	var r0 []models.Subscription
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int) ([]models.Subscription, errors.EdgeX)); ok {
		return rf(offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []models.Subscription); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) errors.EdgeX); ok {
		r1 = rf(offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AllTransmissions provides a mock function with given fields: offset, limit
func (_m *DBClient) AllTransmissions(offset int, limit int) ([]models.Transmission, errors.EdgeX) {
	ret := _m.Called(offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for AllTransmissions")
	}

	var r0 []models.Transmission
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int) ([]models.Transmission, errors.EdgeX)); ok {
		return rf(offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []models.Transmission); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transmission)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) errors.EdgeX); ok {
		r1 = rf(offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// CleanupNotificationsByAge provides a mock function with given fields: age
func (_m *DBClient) CleanupNotificationsByAge(age int64) errors.EdgeX {
	ret := _m.Called(age)

	if len(ret) == 0 {
		panic("no return value specified for CleanupNotificationsByAge")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int64) errors.EdgeX); ok {
		r0 = rf(age)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// CloseSession provides a mock function with no fields
func (_m *DBClient) CloseSession() {
	_m.Called()
}

// DeleteNotificationById provides a mock function with given fields: id
func (_m *DBClient) DeleteNotificationById(id string) errors.EdgeX {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationById")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteNotificationByIds provides a mock function with given fields: ids
func (_m *DBClient) DeleteNotificationByIds(ids []string) errors.EdgeX {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationByIds")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func([]string) errors.EdgeX); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteProcessedNotificationsByAge provides a mock function with given fields: age
func (_m *DBClient) DeleteProcessedNotificationsByAge(age int64) errors.EdgeX {
	ret := _m.Called(age)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProcessedNotificationsByAge")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int64) errors.EdgeX); ok {
		r0 = rf(age)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteProcessedTransmissionsByAge provides a mock function with given fields: age
func (_m *DBClient) DeleteProcessedTransmissionsByAge(age int64) errors.EdgeX {
	ret := _m.Called(age)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProcessedTransmissionsByAge")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int64) errors.EdgeX); ok {
		r0 = rf(age)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteSubscriptionByName provides a mock function with given fields: name
func (_m *DBClient) DeleteSubscriptionByName(name string) errors.EdgeX {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscriptionByName")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// LatestNotificationByOffset provides a mock function with given fields: offset
func (_m *DBClient) LatestNotificationByOffset(offset uint32) (models.Notification, errors.EdgeX) {
	ret := _m.Called(offset)

	if len(ret) == 0 {
		panic("no return value specified for LatestNotificationByOffset")
	}

	var r0 models.Notification
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(uint32) (models.Notification, errors.EdgeX)); ok {
		return rf(offset)
	}
	if rf, ok := ret.Get(0).(func(uint32) models.Notification); ok {
		r0 = rf(offset)
	} else {
		r0 = ret.Get(0).(models.Notification)
	}

	if rf, ok := ret.Get(1).(func(uint32) errors.EdgeX); ok {
		r1 = rf(offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationById provides a mock function with given fields: id
func (_m *DBClient) NotificationById(id string) (models.Notification, errors.EdgeX) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for NotificationById")
	}

	var r0 models.Notification
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (models.Notification, errors.EdgeX)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Notification); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Notification)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationCountByCategoriesAndLabels provides a mock function with given fields: categories, labels, ack
func (_m *DBClient) NotificationCountByCategoriesAndLabels(categories []string, labels []string, ack string) (int64, errors.EdgeX) {
	ret := _m.Called(categories, labels, ack)

	if len(ret) == 0 {
		panic("no return value specified for NotificationCountByCategoriesAndLabels")
	}

	var r0 int64
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func([]string, []string, string) (int64, errors.EdgeX)); ok {
		return rf(categories, labels, ack)
	}
	if rf, ok := ret.Get(0).(func([]string, []string, string) int64); ok {
		r0 = rf(categories, labels, ack)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func([]string, []string, string) errors.EdgeX); ok {
		r1 = rf(categories, labels, ack)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationCountByCategory provides a mock function with given fields: category, ack
func (_m *DBClient) NotificationCountByCategory(category string, ack string) (int64, errors.EdgeX) {
	ret := _m.Called(category, ack)

	if len(ret) == 0 {
		panic("no return value specified for NotificationCountByCategory")
	}

	var r0 int64
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string, string) (int64, errors.EdgeX)); ok {
		return rf(category, ack)
	}
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(category, ack)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.EdgeX); ok {
		r1 = rf(category, ack)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationCountByLabel provides a mock function with given fields: label, ack
func (_m *DBClient) NotificationCountByLabel(label string, ack string) (int64, errors.EdgeX) {
	ret := _m.Called(label, ack)

	if len(ret) == 0 {
		panic("no return value specified for NotificationCountByLabel")
	}

	var r0 int64
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string, string) (int64, errors.EdgeX)); ok {
		return rf(label, ack)
	}
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(label, ack)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.EdgeX); ok {
		r1 = rf(label, ack)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationCountByQueryConditions provides a mock function with given fields: condition, ack
func (_m *DBClient) NotificationCountByQueryConditions(condition requests.NotificationQueryCondition, ack string) (int64, errors.EdgeX) {
	ret := _m.Called(condition, ack)

	if len(ret) == 0 {
		panic("no return value specified for NotificationCountByQueryConditions")
	}

	var r0 int64
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(requests.NotificationQueryCondition, string) (int64, errors.EdgeX)); ok {
		return rf(condition, ack)
	}
	if rf, ok := ret.Get(0).(func(requests.NotificationQueryCondition, string) int64); ok {
		r0 = rf(condition, ack)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(requests.NotificationQueryCondition, string) errors.EdgeX); ok {
		r1 = rf(condition, ack)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationCountByStatus provides a mock function with given fields: status, ack
func (_m *DBClient) NotificationCountByStatus(status string, ack string) (int64, errors.EdgeX) {
	ret := _m.Called(status, ack)

	if len(ret) == 0 {
		panic("no return value specified for NotificationCountByStatus")
	}

	var r0 int64
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string, string) (int64, errors.EdgeX)); ok {
		return rf(status, ack)
	}
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(status, ack)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.EdgeX); ok {
		r1 = rf(status, ack)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationCountByTimeRange provides a mock function with given fields: start, end, ack
func (_m *DBClient) NotificationCountByTimeRange(start int64, end int64, ack string) (int64, errors.EdgeX) {
	ret := _m.Called(start, end, ack)

	if len(ret) == 0 {
		panic("no return value specified for NotificationCountByTimeRange")
	}

	var r0 int64
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int64, int64, string) (int64, errors.EdgeX)); ok {
		return rf(start, end, ack)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, string) int64); ok {
		r0 = rf(start, end, ack)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64, int64, string) errors.EdgeX); ok {
		r1 = rf(start, end, ack)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationTotalCount provides a mock function with no fields
func (_m *DBClient) NotificationTotalCount() (int64, errors.EdgeX) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NotificationTotalCount")
	}

	var r0 int64
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func() (int64, errors.EdgeX)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() errors.EdgeX); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationsByCategoriesAndLabels provides a mock function with given fields: offset, limit, categories, labels, ack
func (_m *DBClient) NotificationsByCategoriesAndLabels(offset int, limit int, categories []string, labels []string, ack string) ([]models.Notification, errors.EdgeX) {
	ret := _m.Called(offset, limit, categories, labels, ack)

	if len(ret) == 0 {
		panic("no return value specified for NotificationsByCategoriesAndLabels")
	}

	var r0 []models.Notification
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, []string, []string, string) ([]models.Notification, errors.EdgeX)); ok {
		return rf(offset, limit, categories, labels, ack)
	}
	if rf, ok := ret.Get(0).(func(int, int, []string, []string, string) []models.Notification); ok {
		r0 = rf(offset, limit, categories, labels, ack)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, []string, []string, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, categories, labels, ack)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationsByCategory provides a mock function with given fields: offset, limit, ack, category
func (_m *DBClient) NotificationsByCategory(offset int, limit int, ack string, category string) ([]models.Notification, errors.EdgeX) {
	ret := _m.Called(offset, limit, ack, category)

	if len(ret) == 0 {
		panic("no return value specified for NotificationsByCategory")
	}

	var r0 []models.Notification
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]models.Notification, errors.EdgeX)); ok {
		return rf(offset, limit, ack, category)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []models.Notification); ok {
		r0 = rf(offset, limit, ack, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, ack, category)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationsByLabel provides a mock function with given fields: offset, limit, ack, label
func (_m *DBClient) NotificationsByLabel(offset int, limit int, ack string, label string) ([]models.Notification, errors.EdgeX) {
	ret := _m.Called(offset, limit, ack, label)

	if len(ret) == 0 {
		panic("no return value specified for NotificationsByLabel")
	}

	var r0 []models.Notification
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]models.Notification, errors.EdgeX)); ok {
		return rf(offset, limit, ack, label)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []models.Notification); ok {
		r0 = rf(offset, limit, ack, label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, ack, label)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationsByQueryConditions provides a mock function with given fields: offset, limit, condition, ack
func (_m *DBClient) NotificationsByQueryConditions(offset int, limit int, condition requests.NotificationQueryCondition, ack string) ([]models.Notification, errors.EdgeX) {
	ret := _m.Called(offset, limit, condition, ack)

	if len(ret) == 0 {
		panic("no return value specified for NotificationsByQueryConditions")
	}

	var r0 []models.Notification
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, requests.NotificationQueryCondition, string) ([]models.Notification, errors.EdgeX)); ok {
		return rf(offset, limit, condition, ack)
	}
	if rf, ok := ret.Get(0).(func(int, int, requests.NotificationQueryCondition, string) []models.Notification); ok {
		r0 = rf(offset, limit, condition, ack)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, requests.NotificationQueryCondition, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, condition, ack)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationsByStatus provides a mock function with given fields: offset, limit, ack, status
func (_m *DBClient) NotificationsByStatus(offset int, limit int, ack string, status string) ([]models.Notification, errors.EdgeX) {
	ret := _m.Called(offset, limit, ack, status)

	if len(ret) == 0 {
		panic("no return value specified for NotificationsByStatus")
	}

	var r0 []models.Notification
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]models.Notification, errors.EdgeX)); ok {
		return rf(offset, limit, ack, status)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []models.Notification); ok {
		r0 = rf(offset, limit, ack, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, ack, status)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationsByTimeRange provides a mock function with given fields: start, end, offset, limit, ack
func (_m *DBClient) NotificationsByTimeRange(start int64, end int64, offset int, limit int, ack string) ([]models.Notification, errors.EdgeX) {
	ret := _m.Called(start, end, offset, limit, ack)

	if len(ret) == 0 {
		panic("no return value specified for NotificationsByTimeRange")
	}

	var r0 []models.Notification
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int64, int64, int, int, string) ([]models.Notification, errors.EdgeX)); ok {
		return rf(start, end, offset, limit, ack)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, int, int, string) []models.Notification); ok {
		r0 = rf(start, end, offset, limit, ack)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, int, int, string) errors.EdgeX); ok {
		r1 = rf(start, end, offset, limit, ack)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// SubscriptionById provides a mock function with given fields: id
func (_m *DBClient) SubscriptionById(id string) (models.Subscription, errors.EdgeX) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SubscriptionById")
	}

	var r0 models.Subscription
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (models.Subscription, errors.EdgeX)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Subscription); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Subscription)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// SubscriptionByName provides a mock function with given fields: name
func (_m *DBClient) SubscriptionByName(name string) (models.Subscription, errors.EdgeX) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for SubscriptionByName")
	}

	var r0 models.Subscription
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (models.Subscription, errors.EdgeX)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) models.Subscription); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.Subscription)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// SubscriptionCountByCategory provides a mock function with given fields: category
func (_m *DBClient) SubscriptionCountByCategory(category string) (int64, errors.EdgeX) {
	ret := _m.Called(category)

	if len(ret) == 0 {
		panic("no return value specified for SubscriptionCountByCategory")
	}

	var r0 int64
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (int64, errors.EdgeX)); ok {
		return rf(category)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(category)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// SubscriptionCountByLabel provides a mock function with given fields: label
func (_m *DBClient) SubscriptionCountByLabel(label string) (int64, errors.EdgeX) {
	ret := _m.Called(label)

	if len(ret) == 0 {
		panic("no return value specified for SubscriptionCountByLabel")
	}

	var r0 int64
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (int64, errors.EdgeX)); ok {
		return rf(label)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(label)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(label)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// SubscriptionCountByReceiver provides a mock function with given fields: receiver
func (_m *DBClient) SubscriptionCountByReceiver(receiver string) (int64, errors.EdgeX) {
	ret := _m.Called(receiver)

	if len(ret) == 0 {
		panic("no return value specified for SubscriptionCountByReceiver")
	}

	var r0 int64
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (int64, errors.EdgeX)); ok {
		return rf(receiver)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(receiver)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(receiver)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// SubscriptionTotalCount provides a mock function with no fields
func (_m *DBClient) SubscriptionTotalCount() (int64, errors.EdgeX) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SubscriptionTotalCount")
	}

	var r0 int64
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func() (int64, errors.EdgeX)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() errors.EdgeX); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// SubscriptionsByCategoriesAndLabels provides a mock function with given fields: offset, limit, categories, labels
func (_m *DBClient) SubscriptionsByCategoriesAndLabels(offset int, limit int, categories []string, labels []string) ([]models.Subscription, errors.EdgeX) {
	ret := _m.Called(offset, limit, categories, labels)

	if len(ret) == 0 {
		panic("no return value specified for SubscriptionsByCategoriesAndLabels")
	}

	var r0 []models.Subscription
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, []string, []string) ([]models.Subscription, errors.EdgeX)); ok {
		return rf(offset, limit, categories, labels)
	}
	if rf, ok := ret.Get(0).(func(int, int, []string, []string) []models.Subscription); ok {
		r0 = rf(offset, limit, categories, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, []string, []string) errors.EdgeX); ok {
		r1 = rf(offset, limit, categories, labels)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// SubscriptionsByCategory provides a mock function with given fields: offset, limit, category
func (_m *DBClient) SubscriptionsByCategory(offset int, limit int, category string) ([]models.Subscription, errors.EdgeX) {
	ret := _m.Called(offset, limit, category)

	if len(ret) == 0 {
		panic("no return value specified for SubscriptionsByCategory")
	}

	var r0 []models.Subscription
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, string) ([]models.Subscription, errors.EdgeX)); ok {
		return rf(offset, limit, category)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []models.Subscription); ok {
		r0 = rf(offset, limit, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, category)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// SubscriptionsByLabel provides a mock function with given fields: offset, limit, label
func (_m *DBClient) SubscriptionsByLabel(offset int, limit int, label string) ([]models.Subscription, errors.EdgeX) {
	ret := _m.Called(offset, limit, label)

	if len(ret) == 0 {
		panic("no return value specified for SubscriptionsByLabel")
	}

	var r0 []models.Subscription
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, string) ([]models.Subscription, errors.EdgeX)); ok {
		return rf(offset, limit, label)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []models.Subscription); ok {
		r0 = rf(offset, limit, label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, label)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// SubscriptionsByReceiver provides a mock function with given fields: offset, limit, receiver
func (_m *DBClient) SubscriptionsByReceiver(offset int, limit int, receiver string) ([]models.Subscription, errors.EdgeX) {
	ret := _m.Called(offset, limit, receiver)

	if len(ret) == 0 {
		panic("no return value specified for SubscriptionsByReceiver")
	}

	var r0 []models.Subscription
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, string) ([]models.Subscription, errors.EdgeX)); ok {
		return rf(offset, limit, receiver)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []models.Subscription); ok {
		r0 = rf(offset, limit, receiver)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, receiver)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionById provides a mock function with given fields: id
func (_m *DBClient) TransmissionById(id string) (models.Transmission, errors.EdgeX) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for TransmissionById")
	}

	var r0 models.Transmission
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (models.Transmission, errors.EdgeX)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Transmission); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Transmission)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionCountByNotificationId provides a mock function with given fields: id
func (_m *DBClient) TransmissionCountByNotificationId(id string) (int64, errors.EdgeX) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for TransmissionCountByNotificationId")
	}

	var r0 int64
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (int64, errors.EdgeX)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionCountByStatus provides a mock function with given fields: status
func (_m *DBClient) TransmissionCountByStatus(status string) (int64, errors.EdgeX) {
	ret := _m.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for TransmissionCountByStatus")
	}

	var r0 int64
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (int64, errors.EdgeX)); ok {
		return rf(status)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(status)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionCountBySubscriptionName provides a mock function with given fields: subscriptionName
func (_m *DBClient) TransmissionCountBySubscriptionName(subscriptionName string) (int64, errors.EdgeX) {
	ret := _m.Called(subscriptionName)

	if len(ret) == 0 {
		panic("no return value specified for TransmissionCountBySubscriptionName")
	}

	var r0 int64
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (int64, errors.EdgeX)); ok {
		return rf(subscriptionName)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(subscriptionName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(subscriptionName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionCountByTimeRange provides a mock function with given fields: start, end
func (_m *DBClient) TransmissionCountByTimeRange(start int64, end int64) (int64, errors.EdgeX) {
	ret := _m.Called(start, end)

	if len(ret) == 0 {
		panic("no return value specified for TransmissionCountByTimeRange")
	}

	var r0 int64
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int64, int64) (int64, errors.EdgeX)); ok {
		return rf(start, end)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) int64); ok {
		r0 = rf(start, end)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64, int64) errors.EdgeX); ok {
		r1 = rf(start, end)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionTotalCount provides a mock function with no fields
func (_m *DBClient) TransmissionTotalCount() (int64, errors.EdgeX) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TransmissionTotalCount")
	}

	var r0 int64
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func() (int64, errors.EdgeX)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() errors.EdgeX); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionsByNotificationId provides a mock function with given fields: offset, limit, id
func (_m *DBClient) TransmissionsByNotificationId(offset int, limit int, id string) ([]models.Transmission, errors.EdgeX) {
	ret := _m.Called(offset, limit, id)

	if len(ret) == 0 {
		panic("no return value specified for TransmissionsByNotificationId")
	}

	var r0 []models.Transmission
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, string) ([]models.Transmission, errors.EdgeX)); ok {
		return rf(offset, limit, id)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []models.Transmission); ok {
		r0 = rf(offset, limit, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transmission)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionsByStatus provides a mock function with given fields: offset, limit, status
func (_m *DBClient) TransmissionsByStatus(offset int, limit int, status string) ([]models.Transmission, errors.EdgeX) {
	ret := _m.Called(offset, limit, status)

	if len(ret) == 0 {
		panic("no return value specified for TransmissionsByStatus")
	}

	var r0 []models.Transmission
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, string) ([]models.Transmission, errors.EdgeX)); ok {
		return rf(offset, limit, status)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []models.Transmission); ok {
		r0 = rf(offset, limit, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transmission)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, status)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionsBySubscriptionName provides a mock function with given fields: offset, limit, subscriptionName
func (_m *DBClient) TransmissionsBySubscriptionName(offset int, limit int, subscriptionName string) ([]models.Transmission, errors.EdgeX) {
	ret := _m.Called(offset, limit, subscriptionName)

	if len(ret) == 0 {
		panic("no return value specified for TransmissionsBySubscriptionName")
	}

	var r0 []models.Transmission
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int, string) ([]models.Transmission, errors.EdgeX)); ok {
		return rf(offset, limit, subscriptionName)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []models.Transmission); ok {
		r0 = rf(offset, limit, subscriptionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transmission)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) errors.EdgeX); ok {
		r1 = rf(offset, limit, subscriptionName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionsByTimeRange provides a mock function with given fields: start, end, offset, limit
func (_m *DBClient) TransmissionsByTimeRange(start int64, end int64, offset int, limit int) ([]models.Transmission, errors.EdgeX) {
	ret := _m.Called(start, end, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for TransmissionsByTimeRange")
	}

	var r0 []models.Transmission
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int64, int64, int, int) ([]models.Transmission, errors.EdgeX)); ok {
		return rf(start, end, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, int, int) []models.Transmission); ok {
		r0 = rf(start, end, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transmission)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, int, int) errors.EdgeX); ok {
		r1 = rf(start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// UpdateNotification provides a mock function with given fields: s
func (_m *DBClient) UpdateNotification(s models.Notification) errors.EdgeX {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotification")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.Notification) errors.EdgeX); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// UpdateNotificationAckStatusByIds provides a mock function with given fields: ack, ids
func (_m *DBClient) UpdateNotificationAckStatusByIds(ack bool, ids []string) errors.EdgeX {
	ret := _m.Called(ack, ids)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationAckStatusByIds")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(bool, []string) errors.EdgeX); ok {
		r0 = rf(ack, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// UpdateSubscription provides a mock function with given fields: s
func (_m *DBClient) UpdateSubscription(s models.Subscription) errors.EdgeX {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscription")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.Subscription) errors.EdgeX); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// UpdateTransmission provides a mock function with given fields: trans
func (_m *DBClient) UpdateTransmission(trans models.Transmission) errors.EdgeX {
	ret := _m.Called(trans)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransmission")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.Transmission) errors.EdgeX); ok {
		r0 = rf(trans)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// NewDBClient creates a new instance of DBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBClient {
	mock := &DBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
