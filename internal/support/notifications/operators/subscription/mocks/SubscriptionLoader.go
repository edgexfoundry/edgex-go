// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/edgexfoundry/go-mod-core-contracts/models"

// SubscriptionLoader is an autogenerated mock type for the SubscriptionLoader type
type SubscriptionLoader struct {
	mock.Mock
}

// GetSubscriptionByCategories provides a mock function with given fields: categories
func (_m *SubscriptionLoader) GetSubscriptionByCategories(categories []string) ([]models.Subscription, error) {
	ret := _m.Called(categories)

	var r0 []models.Subscription
	if rf, ok := ret.Get(0).(func([]string) []models.Subscription); ok {
		r0 = rf(categories)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(categories)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionById provides a mock function with given fields: id
func (_m *SubscriptionLoader) GetSubscriptionById(id string) (models.Subscription, error) {
	ret := _m.Called(id)

	var r0 models.Subscription
	if rf, ok := ret.Get(0).(func(string) models.Subscription); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Subscription)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionBySlug provides a mock function with given fields: slug
func (_m *SubscriptionLoader) GetSubscriptionBySlug(slug string) (models.Subscription, error) {
	ret := _m.Called(slug)

	var r0 models.Subscription
	if rf, ok := ret.Get(0).(func(string) models.Subscription); ok {
		r0 = rf(slug)
	} else {
		r0 = ret.Get(0).(models.Subscription)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptions provides a mock function with given fields:
func (_m *SubscriptionLoader) GetSubscriptions() ([]models.Subscription, error) {
	ret := _m.Called()

	var r0 []models.Subscription
	if rf, ok := ret.Get(0).(func() []models.Subscription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
