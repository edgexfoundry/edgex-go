// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/edgexfoundry/go-mod-core-contracts/models"

// NotificationLoader is an autogenerated mock type for the NotificationLoader type
type NotificationLoader struct {
	mock.Mock
}

// GetNewNotifications provides a mock function with given fields: limit
func (_m *NotificationLoader) GetNewNotifications(limit int) ([]models.Notification, error) {
	ret := _m.Called(limit)

	var r0 []models.Notification
	if rf, ok := ret.Get(0).(func(int) []models.Notification); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationById provides a mock function with given fields: id
func (_m *NotificationLoader) GetNotificationById(id string) (models.Notification, error) {
	ret := _m.Called(id)

	var r0 models.Notification
	if rf, ok := ret.Get(0).(func(string) models.Notification); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Notification)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationBySender provides a mock function with given fields: sender, limit
func (_m *NotificationLoader) GetNotificationBySender(sender string, limit int) ([]models.Notification, error) {
	ret := _m.Called(sender, limit)

	var r0 []models.Notification
	if rf, ok := ret.Get(0).(func(string, int) []models.Notification); ok {
		r0 = rf(sender, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(sender, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationBySlug provides a mock function with given fields: slug
func (_m *NotificationLoader) GetNotificationBySlug(slug string) (models.Notification, error) {
	ret := _m.Called(slug)

	var r0 models.Notification
	if rf, ok := ret.Get(0).(func(string) models.Notification); ok {
		r0 = rf(slug)
	} else {
		r0 = ret.Get(0).(models.Notification)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationsByEnd provides a mock function with given fields: end, limit
func (_m *NotificationLoader) GetNotificationsByEnd(end int64, limit int) ([]models.Notification, error) {
	ret := _m.Called(end, limit)

	var r0 []models.Notification
	if rf, ok := ret.Get(0).(func(int64, int) []models.Notification); ok {
		r0 = rf(end, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = rf(end, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationsByLabels provides a mock function with given fields: labels, limit
func (_m *NotificationLoader) GetNotificationsByLabels(labels []string, limit int) ([]models.Notification, error) {
	ret := _m.Called(labels, limit)

	var r0 []models.Notification
	if rf, ok := ret.Get(0).(func([]string, int) []models.Notification); ok {
		r0 = rf(labels, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, int) error); ok {
		r1 = rf(labels, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationsByStart provides a mock function with given fields: start, limit
func (_m *NotificationLoader) GetNotificationsByStart(start int64, limit int) ([]models.Notification, error) {
	ret := _m.Called(start, limit)

	var r0 []models.Notification
	if rf, ok := ret.Get(0).(func(int64, int) []models.Notification); ok {
		r0 = rf(start, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = rf(start, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationsByStartEnd provides a mock function with given fields: start, end, limit
func (_m *NotificationLoader) GetNotificationsByStartEnd(start int64, end int64, limit int) ([]models.Notification, error) {
	ret := _m.Called(start, end, limit)

	var r0 []models.Notification
	if rf, ok := ret.Get(0).(func(int64, int64, int) []models.Notification); ok {
		r0 = rf(start, end, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, int) error); ok {
		r1 = rf(start, end, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
