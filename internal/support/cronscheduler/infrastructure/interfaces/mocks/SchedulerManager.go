// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	errors "github.com/edgexfoundry/go-mod-core-contracts/v3/errors"

	mock "github.com/stretchr/testify/mock"

	models "github.com/edgexfoundry/go-mod-core-contracts/v3/models"
)

// SchedulerManager is an autogenerated mock type for the SchedulerManager type
type SchedulerManager struct {
	mock.Mock
}

// AddScheduleJob provides a mock function with given fields: job
func (_m *SchedulerManager) AddScheduleJob(job models.ScheduleJob) errors.EdgeX {
	ret := _m.Called(job)

	if len(ret) == 0 {
		panic("no return value specified for AddScheduleJob")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.ScheduleJob) errors.EdgeX); ok {
		r0 = rf(job)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteScheduleJobByName provides a mock function with given fields: name
func (_m *SchedulerManager) DeleteScheduleJobByName(name string) errors.EdgeX {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteScheduleJobByName")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// Shutdown provides a mock function with given fields:
func (_m *SchedulerManager) Shutdown() errors.EdgeX {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func() errors.EdgeX); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// StartScheduleJobByName provides a mock function with given fields: name
func (_m *SchedulerManager) StartScheduleJobByName(name string) errors.EdgeX {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for StartScheduleJobByName")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// StopScheduleJobByName provides a mock function with given fields: name
func (_m *SchedulerManager) StopScheduleJobByName(name string) errors.EdgeX {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for StopScheduleJobByName")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// TriggerScheduleJobByName provides a mock function with given fields: name
func (_m *SchedulerManager) TriggerScheduleJobByName(name string) errors.EdgeX {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for TriggerScheduleJobByName")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// UpdateScheduleJob provides a mock function with given fields: job
func (_m *SchedulerManager) UpdateScheduleJob(job models.ScheduleJob) errors.EdgeX {
	ret := _m.Called(job)

	if len(ret) == 0 {
		panic("no return value specified for UpdateScheduleJob")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.ScheduleJob) errors.EdgeX); ok {
		r0 = rf(job)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// NewSchedulerManager creates a new instance of SchedulerManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSchedulerManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *SchedulerManager {
	mock := &SchedulerManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
