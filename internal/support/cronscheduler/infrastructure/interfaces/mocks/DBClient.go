// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	errors "github.com/edgexfoundry/go-mod-core-contracts/v3/errors"

	mock "github.com/stretchr/testify/mock"

	models "github.com/edgexfoundry/go-mod-core-contracts/v3/models"
)

// DBClient is an autogenerated mock type for the DBClient type
type DBClient struct {
	mock.Mock
}

// AddScheduleActionRecord provides a mock function with given fields: scheduleActionRecord
func (_m *DBClient) AddScheduleActionRecord(scheduleActionRecord models.ScheduleActionRecord) (models.ScheduleActionRecord, errors.EdgeX) {
	ret := _m.Called(scheduleActionRecord)

	if len(ret) == 0 {
		panic("no return value specified for AddScheduleActionRecord")
	}

	var r0 models.ScheduleActionRecord
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.ScheduleActionRecord) (models.ScheduleActionRecord, errors.EdgeX)); ok {
		return rf(scheduleActionRecord)
	}
	if rf, ok := ret.Get(0).(func(models.ScheduleActionRecord) models.ScheduleActionRecord); ok {
		r0 = rf(scheduleActionRecord)
	} else {
		r0 = ret.Get(0).(models.ScheduleActionRecord)
	}

	if rf, ok := ret.Get(1).(func(models.ScheduleActionRecord) errors.EdgeX); ok {
		r1 = rf(scheduleActionRecord)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AddScheduleJob provides a mock function with given fields: scheduleJob
func (_m *DBClient) AddScheduleJob(scheduleJob models.ScheduleJob) (models.ScheduleJob, errors.EdgeX) {
	ret := _m.Called(scheduleJob)

	if len(ret) == 0 {
		panic("no return value specified for AddScheduleJob")
	}

	var r0 models.ScheduleJob
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.ScheduleJob) (models.ScheduleJob, errors.EdgeX)); ok {
		return rf(scheduleJob)
	}
	if rf, ok := ret.Get(0).(func(models.ScheduleJob) models.ScheduleJob); ok {
		r0 = rf(scheduleJob)
	} else {
		r0 = ret.Get(0).(models.ScheduleJob)
	}

	if rf, ok := ret.Get(1).(func(models.ScheduleJob) errors.EdgeX); ok {
		r1 = rf(scheduleJob)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AllScheduleActionRecords provides a mock function with given fields: start, end, offset, limit
func (_m *DBClient) AllScheduleActionRecords(start int64, end int64, offset int, limit int) ([]models.ScheduleActionRecord, errors.EdgeX) {
	ret := _m.Called(start, end, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for AllScheduleActionRecords")
	}

	var r0 []models.ScheduleActionRecord
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int64, int64, int, int) ([]models.ScheduleActionRecord, errors.EdgeX)); ok {
		return rf(start, end, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, int, int) []models.ScheduleActionRecord); ok {
		r0 = rf(start, end, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ScheduleActionRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, int, int) errors.EdgeX); ok {
		r1 = rf(start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AllScheduleJobs provides a mock function with given fields: start, end, offset, limit
func (_m *DBClient) AllScheduleJobs(start int64, end int64, offset int, limit int) ([]models.ScheduleJob, errors.EdgeX) {
	ret := _m.Called(start, end, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for AllScheduleJobs")
	}

	var r0 []models.ScheduleJob
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int64, int64, int, int) ([]models.ScheduleJob, errors.EdgeX)); ok {
		return rf(start, end, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, int, int) []models.ScheduleJob); ok {
		r0 = rf(start, end, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ScheduleJob)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, int, int) errors.EdgeX); ok {
		r1 = rf(start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// CloseSession provides a mock function with given fields:
func (_m *DBClient) CloseSession() {
	_m.Called()
}

// DeleteScheduleActionRecordByAge provides a mock function with given fields: age
func (_m *DBClient) DeleteScheduleActionRecordByAge(age int64) errors.EdgeX {
	ret := _m.Called(age)

	if len(ret) == 0 {
		panic("no return value specified for DeleteScheduleActionRecordByAge")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int64) errors.EdgeX); ok {
		r0 = rf(age)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteScheduleJobByName provides a mock function with given fields: name
func (_m *DBClient) DeleteScheduleJobByName(name string) errors.EdgeX {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteScheduleJobByName")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// LatestScheduleActionRecords provides a mock function with given fields: offset, limit
func (_m *DBClient) LatestScheduleActionRecords(offset int, limit int) ([]models.ScheduleActionRecord, errors.EdgeX) {
	ret := _m.Called(offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for LatestScheduleActionRecords")
	}

	var r0 []models.ScheduleActionRecord
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(int, int) ([]models.ScheduleActionRecord, errors.EdgeX)); ok {
		return rf(offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []models.ScheduleActionRecord); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ScheduleActionRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) errors.EdgeX); ok {
		r1 = rf(offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ScheduleActionRecordCountByJobName provides a mock function with given fields: jobName
func (_m *DBClient) ScheduleActionRecordCountByJobName(jobName string) (uint32, errors.EdgeX) {
	ret := _m.Called(jobName)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleActionRecordCountByJobName")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (uint32, errors.EdgeX)); ok {
		return rf(jobName)
	}
	if rf, ok := ret.Get(0).(func(string) uint32); ok {
		r0 = rf(jobName)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(jobName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ScheduleActionRecordCountByJobNameAndStatus provides a mock function with given fields: jobName, status
func (_m *DBClient) ScheduleActionRecordCountByJobNameAndStatus(jobName string, status string) (uint32, errors.EdgeX) {
	ret := _m.Called(jobName, status)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleActionRecordCountByJobNameAndStatus")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string, string) (uint32, errors.EdgeX)); ok {
		return rf(jobName, status)
	}
	if rf, ok := ret.Get(0).(func(string, string) uint32); ok {
		r0 = rf(jobName, status)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.EdgeX); ok {
		r1 = rf(jobName, status)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ScheduleActionRecordCountByStatus provides a mock function with given fields: status
func (_m *DBClient) ScheduleActionRecordCountByStatus(status string) (uint32, errors.EdgeX) {
	ret := _m.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleActionRecordCountByStatus")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (uint32, errors.EdgeX)); ok {
		return rf(status)
	}
	if rf, ok := ret.Get(0).(func(string) uint32); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(status)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ScheduleActionRecordTotalCount provides a mock function with given fields:
func (_m *DBClient) ScheduleActionRecordTotalCount() (uint32, errors.EdgeX) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ScheduleActionRecordTotalCount")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func() (uint32, errors.EdgeX)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func() errors.EdgeX); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ScheduleActionRecordsByJobName provides a mock function with given fields: jobName, start, end, offset, limit
func (_m *DBClient) ScheduleActionRecordsByJobName(jobName string, start int64, end int64, offset int, limit int) ([]models.ScheduleActionRecord, errors.EdgeX) {
	ret := _m.Called(jobName, start, end, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleActionRecordsByJobName")
	}

	var r0 []models.ScheduleActionRecord
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string, int64, int64, int, int) ([]models.ScheduleActionRecord, errors.EdgeX)); ok {
		return rf(jobName, start, end, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(string, int64, int64, int, int) []models.ScheduleActionRecord); ok {
		r0 = rf(jobName, start, end, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ScheduleActionRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int64, int64, int, int) errors.EdgeX); ok {
		r1 = rf(jobName, start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ScheduleActionRecordsByJobNameAndStatus provides a mock function with given fields: jobName, status, start, end, offset, limit
func (_m *DBClient) ScheduleActionRecordsByJobNameAndStatus(jobName string, status string, start int64, end int64, offset int, limit int) ([]models.ScheduleActionRecord, errors.EdgeX) {
	ret := _m.Called(jobName, status, start, end, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleActionRecordsByJobNameAndStatus")
	}

	var r0 []models.ScheduleActionRecord
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string, string, int64, int64, int, int) ([]models.ScheduleActionRecord, errors.EdgeX)); ok {
		return rf(jobName, status, start, end, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64, int64, int, int) []models.ScheduleActionRecord); ok {
		r0 = rf(jobName, status, start, end, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ScheduleActionRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int64, int64, int, int) errors.EdgeX); ok {
		r1 = rf(jobName, status, start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ScheduleActionRecordsByStatus provides a mock function with given fields: status, start, end, offset, limit
func (_m *DBClient) ScheduleActionRecordsByStatus(status string, start int64, end int64, offset int, limit int) ([]models.ScheduleActionRecord, errors.EdgeX) {
	ret := _m.Called(status, start, end, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleActionRecordsByStatus")
	}

	var r0 []models.ScheduleActionRecord
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string, int64, int64, int, int) ([]models.ScheduleActionRecord, errors.EdgeX)); ok {
		return rf(status, start, end, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(string, int64, int64, int, int) []models.ScheduleActionRecord); ok {
		r0 = rf(status, start, end, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ScheduleActionRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int64, int64, int, int) errors.EdgeX); ok {
		r1 = rf(status, start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ScheduleJobById provides a mock function with given fields: id
func (_m *DBClient) ScheduleJobById(id string) (models.ScheduleJob, errors.EdgeX) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleJobById")
	}

	var r0 models.ScheduleJob
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (models.ScheduleJob, errors.EdgeX)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.ScheduleJob); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.ScheduleJob)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ScheduleJobByName provides a mock function with given fields: name
func (_m *DBClient) ScheduleJobByName(name string) (models.ScheduleJob, errors.EdgeX) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleJobByName")
	}

	var r0 models.ScheduleJob
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (models.ScheduleJob, errors.EdgeX)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) models.ScheduleJob); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.ScheduleJob)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ScheduleJobCountById provides a mock function with given fields: id
func (_m *DBClient) ScheduleJobCountById(id string) (uint32, errors.EdgeX) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleJobCountById")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (uint32, errors.EdgeX)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) uint32); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ScheduleJobCountByName provides a mock function with given fields: name
func (_m *DBClient) ScheduleJobCountByName(name string) (uint32, errors.EdgeX) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleJobCountByName")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (uint32, errors.EdgeX)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) uint32); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ScheduleJobTotalCount provides a mock function with given fields:
func (_m *DBClient) ScheduleJobTotalCount() (uint32, errors.EdgeX) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ScheduleJobTotalCount")
	}

	var r0 uint32
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func() (uint32, errors.EdgeX)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func() errors.EdgeX); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// UpdateScheduleJob provides a mock function with given fields: scheduleJob
func (_m *DBClient) UpdateScheduleJob(scheduleJob models.ScheduleJob) errors.EdgeX {
	ret := _m.Called(scheduleJob)

	if len(ret) == 0 {
		panic("no return value specified for UpdateScheduleJob")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.ScheduleJob) errors.EdgeX); ok {
		r0 = rf(scheduleJob)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// NewDBClient creates a new instance of DBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBClient {
	mock := &DBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
