// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import models "github.com/edgexfoundry/go-mod-core-contracts/models"

// DeviceClient is an autogenerated mock type for the DeviceClient type
type DeviceClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, dev
func (_m *DeviceClient) Add(ctx context.Context, dev *models.Device) (string, error) {
	ret := _m.Called(ctx, dev)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *models.Device) string); ok {
		r0 = rf(ctx, dev)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Device) error); ok {
		r1 = rf(ctx, dev)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckForDevice provides a mock function with given fields: ctx, token
func (_m *DeviceClient) CheckForDevice(ctx context.Context, token string) (models.Device, error) {
	ret := _m.Called(ctx, token)

	var r0 models.Device
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Device); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(models.Device)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *DeviceClient) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByName provides a mock function with given fields: ctx, name
func (_m *DeviceClient) DeleteByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Device provides a mock function with given fields: ctx, id
func (_m *DeviceClient) Device(ctx context.Context, id string) (models.Device, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Device
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Device); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Device)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceForName provides a mock function with given fields: ctx, name
func (_m *DeviceClient) DeviceForName(ctx context.Context, name string) (models.Device, error) {
	ret := _m.Called(ctx, name)

	var r0 models.Device
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Device); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(models.Device)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Devices provides a mock function with given fields: ctx
func (_m *DeviceClient) Devices(ctx context.Context) ([]models.Device, error) {
	ret := _m.Called(ctx)

	var r0 []models.Device
	if rf, ok := ret.Get(0).(func(context.Context) []models.Device); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DevicesByLabel provides a mock function with given fields: ctx, label
func (_m *DeviceClient) DevicesByLabel(ctx context.Context, label string) ([]models.Device, error) {
	ret := _m.Called(ctx, label)

	var r0 []models.Device
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Device); ok {
		r0 = rf(ctx, label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DevicesForProfile provides a mock function with given fields: ctx, profileid
func (_m *DeviceClient) DevicesForProfile(ctx context.Context, profileid string) ([]models.Device, error) {
	ret := _m.Called(ctx, profileid)

	var r0 []models.Device
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Device); ok {
		r0 = rf(ctx, profileid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, profileid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DevicesForProfileByName provides a mock function with given fields: ctx, profileName
func (_m *DeviceClient) DevicesForProfileByName(ctx context.Context, profileName string) ([]models.Device, error) {
	ret := _m.Called(ctx, profileName)

	var r0 []models.Device
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Device); ok {
		r0 = rf(ctx, profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, profileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DevicesForService provides a mock function with given fields: ctx, serviceid
func (_m *DeviceClient) DevicesForService(ctx context.Context, serviceid string) ([]models.Device, error) {
	ret := _m.Called(ctx, serviceid)

	var r0 []models.Device
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Device); ok {
		r0 = rf(ctx, serviceid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serviceid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DevicesForServiceByName provides a mock function with given fields: ctx, serviceName
func (_m *DeviceClient) DevicesForServiceByName(ctx context.Context, serviceName string) ([]models.Device, error) {
	ret := _m.Called(ctx, serviceName)

	var r0 []models.Device
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Device); ok {
		r0 = rf(ctx, serviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, dev
func (_m *DeviceClient) Update(ctx context.Context, dev models.Device) error {
	ret := _m.Called(ctx, dev)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Device) error); ok {
		r0 = rf(ctx, dev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAdminState provides a mock function with given fields: ctx, id, adminState
func (_m *DeviceClient) UpdateAdminState(ctx context.Context, id string, adminState string) error {
	ret := _m.Called(ctx, id, adminState)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, adminState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAdminStateByName provides a mock function with given fields: ctx, name, adminState
func (_m *DeviceClient) UpdateAdminStateByName(ctx context.Context, name string, adminState string) error {
	ret := _m.Called(ctx, name, adminState)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, name, adminState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLastConnected provides a mock function with given fields: ctx, id, time
func (_m *DeviceClient) UpdateLastConnected(ctx context.Context, id string, time int64) error {
	ret := _m.Called(ctx, id, time)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, id, time)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLastConnectedByName provides a mock function with given fields: ctx, name, time
func (_m *DeviceClient) UpdateLastConnectedByName(ctx context.Context, name string, time int64) error {
	ret := _m.Called(ctx, name, time)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, name, time)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLastReported provides a mock function with given fields: ctx, id, time
func (_m *DeviceClient) UpdateLastReported(ctx context.Context, id string, time int64) error {
	ret := _m.Called(ctx, id, time)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, id, time)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLastReportedByName provides a mock function with given fields: ctx, name, time
func (_m *DeviceClient) UpdateLastReportedByName(ctx context.Context, name string, time int64) error {
	ret := _m.Called(ctx, name, time)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, name, time)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOpState provides a mock function with given fields: ctx, id, opState
func (_m *DeviceClient) UpdateOpState(ctx context.Context, id string, opState string) error {
	ret := _m.Called(ctx, id, opState)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, opState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOpStateByName provides a mock function with given fields: ctx, name, opState
func (_m *DeviceClient) UpdateOpStateByName(ctx context.Context, name string, opState string) error {
	ret := _m.Called(ctx, name, opState)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, name, opState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
