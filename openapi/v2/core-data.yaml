openapi: 3.0.0
info:
  title: Edgex Foundry - Core Data API
  description: This is the definition of the API for the Core Data service in the EdgeX Foundry IOT microservice platform. Core Data is responsible for storing event and reading data ingested from edge devices in the environment.
  version: 2.x
  
servers:
  - url: http://localhost:48080/api/v2
    description: URL for local development and testing
  
components:
  schemas:
    AddEventRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
      description: "A request for ingesting a new event/reading data"
      type: object
      properties:
        event:
          $ref: '#/components/schemas/Event'
      required:
        - event
    BaseReading:
      description: "A base reading type containing common properties from which more specific reading types inherit. This definition should not be implemented but is used elsewhere to indicate support for a mixed list of simple/binary readings in a single event."
      type: object
      properties:
        apiVersion:
          description: "A version number shows the API version in DTOs."
          type: string
        created:
          description: "A Unix timestamp indicating when (if) the reading was initially persisted to a database."
          type: integer
        deviceName:
          description: "The name of the device from which the reading originated"
          type: string
        id:
          description: "The unique identifier for the reading"
          type: string
          format: uuid
        resourceName:
          description: "The device resource name for the reading"
          type: string
        profileName:
          description: "The device profile name for the reading"
          type: string
        origin:
          description: "A Unix timestamp indicating when the reading was originated at the source device (can support nanoseconds)"
          type: integer
        valueType:
          description: "Indicates the datatype of the value property"
          type: string
      required:
        - deviceName
        - resourceName
        - profileName
        - origin
        - valueType
    BaseRequest:
      description: "Defines basic properties which all use-case specific request DTO instances should support."
      type: object
      properties:
        requestId:
          description: "Uniquely identifies this request. For implementation, recommend this value be generated by the type's constructor."
          type: string
          format: uuid
          example: "e6e8a2f4-eb14-4649-9e2b-175247911369"
    BaseResponse:
      description: "Defines basic properties which all use-case specific response DTO instances should support"
      type: object
      properties:
        apiVersion:
          description: "A version number shows the API version in DTOs."
          type: string
        requestId:
          description: "Uniquely identifies the request that resulted in this response."
          type: string
          format: uuid
          example: "e6e8a2f4-eb14-4649-9e2b-175247911369"
        statusCode:
          description: "A numeric code signifying the operational status of the response."
          type: integer
        message:
          description: "A field that can contain a free-form message, such as an error message."
          type: string
    BaseWithIdResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "Defines basic properties which all use-case specific response DTO instances should support"
      type: object
      properties:
        id:
          description: "The unique identifier for the instance."
          type: string
          format: uuid
    BinaryReading:
      description: "An event reading for a binary data type"
      allOf:
        - $ref: '#/components/schemas/BaseReading'
        - type: object
          properties:
            binaryValue:
              description: "If the value of the reading is binary, it will be found in this property as a byte array"
              type: string
              format: byte
            mediaType:
              description: "E.g. MIME Type, indicates what the content type of the binaryValue property is if it's populated."
              type: string
          required:
            - binaryValue
            - mediaType
    CountResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "Returns an aggregate count of specified objects, e.g. events or readings, in uint32 integer type."
      type: object
      properties:
        count:
          type: integer
    Event:
      description: "A discrete event containing one or more readings"
      properties:
        apiVersion:
          description: "A version number shows the API version in DTOs."
          type: string
        created:
          description: "A Unix timestamp indicating when (if) the event was initially persisted to a database."
          type: integer
        deviceName:
          description: "The name of the device from which the event originated"
          type: string
        id:
          description: "The unique identifier for the event"
          type: string
          format: uuid
        origin:
          description: "A Unix timestamp indicating when the event was originated at the source device (can support nanoseconds)"
          type: integer
        pushed:
          description: "A Unix timestamp indicating when the event was permanently pushed to a northside app/service"
          type: integer
        readings:
          description: "One or more readings captured at the time of the event"
          type: array
          items:
            $ref: '#/components/schemas/BaseReading'
        tags:
          description: "List of zero or more Tags attached to the Event which give more context to the Event"
          title: tags
          type: object
          example: {
            "Gateway-id": "HoustonStore-000123",
            "Latitude": "29.630771",
            "Longitude": "-95.377603",
          }
      required:
        - deviceName
        - origin
        - readings
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "A response type for returning a generic error to the caller."
      type: object
    EventResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "A response type for returning an Event to the caller."
      type: object
      properties:
        event:
          $ref: '#/components/schemas/Event'
    ConfigResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "Provides a response containing the configuration for the targeted service."
      type: object
      properties:
        config:
          description: "An object containing the service's configuration. Please refer to Core Data's configuration documentation for more details at [EdgeX Foundry Documentation](https://docs.edgexfoundry.org)."
          type: object
    MetricsResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      description: "A response from the /metrics endpoint providing memory and cpu utilization stats."
      type: object
      properties:
        metrics:
          type: object
          properties:
            memAlloc:
              description: "Alloc is bytes of allocated heap objects which is a uint64 type integer."
              type: integer
            memFrees:
              description: "Frees is the cumulative count of heap objects freed which is a uint64 type integer."
              type: integer
            memLiveObjects:
              description: "The uint64 type integer of live objects is Mallocs - Frees."
              type: integer
            memMallocs:
              description: "The cumulative count of heap objects allocated which is a uint64 type integer."
              type: integer
            memSys:
              description: "The total bytes of memory obtained from the OS which is a uint64 type integer."
              type: integer
            memTotalAlloc:
             description: "Cumulative bytes allocated for heap objects which is a uint64 type integer."
             type: integer
            cpuBusyAvg:
              description: "A uint8 type integer indicates the average level of CPU utilization"
              type: number
    MultiEventsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "A response type for returning Events to the caller."
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    MultiReadingsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "A response type for returning Readings to the caller."
      type: object
      properties:
        readings:
          type: array
          items:
            $ref: '#/components/schemas/BaseReading'
    PingResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        timestamp:
          description: "Outputs the current server timestamp in RFC1123 format"
          example: "Mon, 02 Jan 2006 15:04:05 MST"
          type: string
    ReadingResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "A response type for returning a Reading to the caller. The Reading may be of either type BinaryReading or type SimpleReading."
      type: object
      properties:
        reading:
          $ref: '#/components/schemas/BaseReading'
    SimpleReading:
      description: "An event reading for a simple data type"
      allOf:
        - $ref: '#/components/schemas/BaseReading'
        - type: object
          properties:
            value:
              description: "A string representation of the reading's value"
              type: string
      required:
        - value
    MultiSimpleReadingsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "A response type for returning a Reading to the caller. The Reading may only be of type SimpleReading."
      type: object
      properties:
        readings:
          type: array
          items:
            $ref: '#/components/schemas/SimpleReading'
    UpdateEventPushedByChecksumRequest:
      description: "A request to facilitate updating the 'pushed' timestamp on an event according to its checksum."
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          properties:
            checksum:
              type: string
      required:
      - checksum
    UpdateEventPushedByChecksumResponse:
      description: "A response indicating success/failure to update the 'pushed' timestamp on an event according to its checksum."
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        checksum:
          type: string
    VersionResponse:
      description: "A response returned from the /version endpoint whose purpose is to report out the latest version supported by the service."
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        version:
          description: "The latest version supported by the service."
          type: string
  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
      description: "The number of items to skip before starting to collect the result set."
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: -1
        default: 20
      description: "The numbers of items to return.  Specify -1 will return all remaining items after offset.  The maximum will be the MaxResultCount as defined in the configuration of service."
    correlatedRequestHeader:
      in: header
      name: X-Correlation-ID
      description: "A unique identifier correlating a request to its associated response, facilitating tracing through being included on requests originating from the initiating request."
      schema:
        type: string
        format: uuid
      required: true
      example: "14a42ea6-c394-41c3-8bcd-a29b9f5e6835"
  headers:
    correlatedResponseHeader:
      description: "A response header that returns the unique correlation ID used to initiate the request."
      schema:
        type: string
        format: uuid
      required: true
      example: "14a42ea6-c394-41c3-8bcd-a29b9f5e6835"
  examples:
    200Example:
      value:
        requestId: ""
        apiVersion: "v2"
        statusCode: 200
        message: ""
    202Example:
      value:
        requestId: ""
        apiVersion: "v2"
        statusCode: 202
        message: ""
    400Example:
      value:
        requestId: ""
        apiVersion: "v2"
        statusCode: 400
        message: "Bad Request" 
    404Example:
      value:
        requestId: ""
        apiVersion: "v2"
        statusCode: 404
        message: "Not Found"
    416Example:
      value:
        requestId: ""
        apiVersion: "v2"
        statusCode: 416
        message: "Range Not Satisfiable"
    500Example:
      value:
        requestId: ""
        apiVersion: "v2"
        statusCode: 500
        message: "Interval Server Error" 
    AllEventsExample:
      value:
        requestId: ""
        apiVersion: "v2"
        statusCode: 200
        message: ""
        events: 
          - apiVersion: "v2"
            created: 1594876281221
            deviceName: "device-001"
            id: "040bd523-ec33-440d-9d72-e5813a465f37"
            modified: 1594975851631
            origin: 1602168089665565300
            pushed: 1594975851631
            readings:
              - apiVersion: "v2"
                created: 1594876281221
                deviceName: "device-001"
                resourceName: "resource-001"
                profileName: "profile-001"
                id: "31569347-9369-43ec-aa6a-59ea9c624a6f"
                modified: 1594975851631
                origin: 1602168089665565300
                pushed: 1594975851631
                valueType: "Float32"
                value: "39.5"
              - apiVersion: "v2"
                create: 1594876281221
                deviceName: "device-001"
                resourceName: "resource-001"
                profileName: "profile-001"
                id: "2fd73a5b-969f-483c-9c52-6bb460a06eb1"
                origin: 1602168089665565300
                valueType: "Int8"
                value: "75"
          - apiVersion: "v2"
            created: 1594877691305
            deviceName: "device-002"
            id: "73fc4f9c-2d64-4920-addb-b1f33a8f8514"
            origin: 1602168089665565300
            readings:
              - apiVersion: "v2"
                created: 1594879337014
                deviceName: "device-002"
                resourceName: "resource-002"
                profileName: "profile-002"
                id: "71c601d9-cb56-453a-8c75-54461e444713"
                origin: 1602168089665565300
                valueType: "Binary"
                binaryValue: "83010203"
                mediaType: "image"
          - apiVersion: "v2"
            created: 1594983105886
            deviceName: "device-002"
            id: "d5471d59-2810-419a-8744-18eb8fa03465"
            origin: 1602168089665565300
            readings:
              - apiVersion: "v2"
                created: 594983105886
                deviceName: "device-002"
                resourceName: "resource-002"
                profileName: "profile-002"
                id: "7003cacc-0e00-4676-977c-4e58b9612abd"
                origin: 1602168089665565300
                valueType: "Float32"
                value: "12.2"
    AllReadingsExample:
      value:
        requestId: ""
        apiVersion: "v2"
        statusCode: 200
        message: ""
        readings:
          - apiVersion: "v2"
            created: 1594876281221
            deviceName: "device-001"
            resourceName: "resource-001"
            profileName: "profile-001"
            id: "31569347-9369-43ec-aa6a-59ea9c624a6f"
            modified: 1594975851631
            origin: 1602168089665565300
            pushed: 1594975851631
            valueType: "Float32"
            value: "39.5"
          - apiVersion: "v2"
            create: 1594876281221
            deviceName: "device-001"
            resourceName: "resource-001"
            profileName: "profile-001"
            id: "2fd73a5b-969f-483c-9c52-6bb460a06eb1"
            origin: 1602168089665565300
            valueType: "Int8"
            value: "75" 
          - apiVersion: "v2"
            created: 1594879337014
            deviceName: "device-002"
            resourceName: "resource-002"
            profileName: "profile-002"
            id: "71c601d9-cb56-453a-8c75-54461e444713"
            origin: 1602168089665565300
            valueType: "Binary"
            binaryValue: "83010203"
            mediaType: "image"
          - apiVersion: "v2"
            created: 594983105886
            deviceName: "device-002"
            resourceName: "resource-002"
            profileName: "profile-002"
            id: "7003cacc-0e00-4676-977c-4e58b9612abd"
            origin: 1602168089665565300
            valueType: "Float32"
            value: "12.2"
paths:
  /event:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
    post:
      summary: "Allows for the ingestion of event/reading data"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AddEventRequest'
            example:
              - event:
                  deviceName: device-002
                  id: d5471d59-2810-419a-8744-18eb8fa03465
                  origin: 1602168089665565300
                  readings:
                    - deviceName: device-002
                      resourceName: resource-002
                      profileName: profile-002
                      id: 7003cacc-0e00-4676-977c-4e58b9612abd
                      origin: 1602168089665565300
                      valueType: Float32
                      value: '12.2'
              - event:
                  deviceName: device-002
                  id: d5471d59-2810-419a-8744-18eb8fa03465
                  origin: 1602168089665565300
                  readings:
                    - deviceName: device-002
                      resourceName: resource-002
                      profileName: profile-002
                      id: 7003cacc-0e00-4676-977c-4e58b9612abd
                      origin: 1602168089665565300
                      valueType: Float32
                      value: '12.2'
              - event:
                  deviceName: device-002
                  id: 73fc4f9c-2d64-4920-addb-b1f33a8f8514
                  origin: 1602168089665565300
                  readings:
                    - apiVersion: v2
                      created: 1594879337014
                      deviceName: device-002
                      resourceName: resource-002
                      profileName: profile-002
                      id: 71c601d9-cb56-453a-8c75-54461e444713
                      origin: 1602168089665565300
                      valueType: Binary
                      binaryValue: '83010203'
                      mediaType: image
      responses:
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/BaseWithIdResponse'
              example:
                - requestId: ""
                  apiVersion: "v2"
                  statusCode: 201
                  message: ""
                  id: "040bd523-ec33-440d-9d72-e5813a465f37"
                - requestId: ""
                  apiVersion: "v2"
                  statusCode: 409
                  message: "Event Id exists"
                - requestId: ""
                  apiVersion: "v2"
                  statusCode: 500
                  message: "Interval Server Error"
        '400':
          description: "Request is in an invalid state"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/400Example'
        '500':
          description: An unexpected error occurred on the server
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /event/all:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
    get:
      summary: "Given the entire range of events sorted by created descending, returns a portion of that range according to the offset and limit parameters."
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/MultiEventsResponse'
              examples:
                MultiEventsExample:
                  $ref: '#/components/examples/AllEventsExample'
        '400':
          description: "Request is in an invalid state"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/400Example'
        '416':
          description: "Request range is not satisfiable"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/416Example'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /event/id/{id}:
    parameters:
    - $ref: '#/components/parameters/correlatedRequestHeader'
    - name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: "An ID of datatype string, by default a GUID."
    get:
      summary: "Returns an event by ID"
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
              example:
                requestId: ""
                apiVersion: "v2"
                statusCode: 200
                message: ""
                event:
                  apiVersion: "v2"
                  created: 1594876281221
                  deviceName: "device-001"
                  id: "040bd523-ec33-440d-9d72-e5813a465f37"
                  modified: 1594975851631
                  origin: 1602168089665565300
                  pushed: 1594975851631
                  readings:
                    - created: 1594876281221
                      deviceName: "device-001"
                      resourceName: "resource-001"
                      profileName: "profile-001"
                      id: "31569347-9369-43ec-aa6a-59ea9c624a6f"
                      modified: 1594975851631
                      origin: 1602168089665565300
                      pushed: 1594975851631
                      valueType: "Float32"
                      value: "39.5"
                    - create: 1594876281221
                      deviceName: "device-001"
                      resourceName: "resource-001"
                      profileName: "profile-001"
                      id: "2fd73a5b-969f-483c-9c52-6bb460a06eb1"
                      origin: 1602168089665565300
                      valueType: "Int8"
                      value: "75"
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
    delete:
      summary: "Deletes an event by ID"
      responses:
        '200':
          description: "Delete successful"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                200Example:
                  $ref: '#/components/examples/200Example'
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'                
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /event/pushed:
    parameters:
    - $ref: '#/components/parameters/correlatedRequestHeader'
    put:
      summary: "For an event with the supplied checksum value, update the pushed time indicating successful propogation to northside apps/services."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateEventPushedByChecksumRequest'
            example:
              - requestId: e6e8a2f4-eb14-4649-9e2b-175247911369
                checksum: 4228c3215949e862
              - requestId: e6e8a2f4-eb14-4649-9e2b-175247911369
                checksum: 1111c3215949e862
              - requestId: e6e8a2f4-eb14-4649-9e2b-175247911369
                checksum: 2222c3215949e862
      responses:
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/UpdateEventPushedByChecksumResponse'
              example:
                - requestId: "e6e8a2f4-eb14-4649-9e2b-175247911369"
                  apiVersion: "v2"
                  statusCode: 200
                  message: ""
                  checksum: "4228c3215949e862"
                - requestId: "e6e8a2f4-eb14-4649-9e2b-175247911369"
                  apiVersion: "v2"
                  statusCode: 404
                  message: "Not Found"
                - requestId: "e6e8a2f4-eb14-4649-9e2b-175247911369"
                  apiVersion: "v2"
                  statusCode: 500
                  message: "Interval Server Error"
        '400':
          description: "Request is in an invalid state"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                requestId: "e6e8a2f4-eb14-4649-9e2b-175247911369"
                apiVersion: "v2"
                statusCode: 400
                message: "Bad Request"
        '500':
          description: An unexpected error occurred on the server
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                requestId: "e6e8a2f4-eb14-4649-9e2b-175247911369"
                apiVersion: "v2"
                statusCode: 500
                message: "Interval Server Error"
  /event/count:
    parameters:
    - $ref: '#/components/parameters/correlatedRequestHeader'
    get:
      summary: "Return a count of all of events currently stored in the database."
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResponse'
              example:
                requestId: ""
                apiVersion: "v2"
                statusCode: 200
                message: ""
                count: 3
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /event/count/device/{deviceName}:
    parameters:
    - $ref: '#/components/parameters/correlatedRequestHeader'
    - name: deviceName
      in: path
      required: true
      schema:
        type: string
      description: "Uniquely identifies a given device"
    get:
      summary: "Return a count of all of events currently stored in the database, sourced from the specified device."
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResponse'
              example:
                requestId: ""
                apiVersion: "v2"
                statusCode: 200
                message: ""
                count: 1
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /event/device/name/{name}:
    get:
      summary: "Given the entire range of events sorted by created descending, returns a portion of that range according to the device name, offset and limit parameters."
      parameters:
        - $ref: '#/components/parameters/correlatedRequestHeader'
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: "Uniquely identifies a given device"
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiEventsResponse'
              example:
                requestId: ""
                apiVersion: "v2"
                statusCode: 200
                message: ""
                events:
                  - apiVersion: "v2"
                    created: 1594877691305
                    deviceName: "device-002"
                    id: "73fc4f9c-2d64-4920-addb-b1f33a8f8514"
                    origin: 1602168089665565300
                    readings:
                      - created: 1594879337014
                        deviceName: "device-002"
                        resourceName: "resource-002"
                        profileName: "profile-002"
                        id: "71c601d9-cb56-453a-8c75-54461e444713"
                        origin: 1602168089665565300
                        valueType: "Binary"
                        binaryValue: "83010203"
                        mediaType: "image"
                  - apiVersion: "v2"
                    created: 1594983105886
                    deviceName: "device-002"
                    id: "d5471d59-2810-419a-8744-18eb8fa03465"
                    origin: 1602168089665565300
                    readings:
                      - apiVersion: "v2"
                        created: 594983105886
                        deviceName: "device-002"
                        resourceName: "resource-002"
                        profileName: "profile-002"
                        id: "7003cacc-0e00-4676-977c-4e58b9612abd"
                        origin: 1602168089665565300
                        valueType: "Float32"
                        value: "12.2"
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
    delete:
      summary: "Deletes all events for the specified device"
      parameters:
        - $ref: '#/components/parameters/correlatedRequestHeader'
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: "Uniquely identifies a given device"
      responses:
        '202':
          description: "Delete request accepted"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                200Example:
                  $ref: '#/components/examples/202Example'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /event/start/{start}/end/{end}:
    parameters:
    - $ref: '#/components/parameters/correlatedRequestHeader'
    - name: start
      in: path
      required: true
      schema:
        type: integer
      description: "Unix timestamp indicating the start of a date/time range"
    - name: end
      in: path
      required: true
      schema:
        type: integer
      description: "Unix timestamp indicating the end of a date/time range"
    - $ref: '#/components/parameters/offsetParam'
    - $ref: '#/components/parameters/limitParam'
    get:
      summary: "Return a paginated range of events sorted by created descending with a create date inside the specified start/end values."
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiEventsResponse'
              examples:
                MultiEventsExample:
                  $ref: '#/components/examples/AllEventsExample'
        '400':
          description: "\"{start}\" and \"{end}\" are unix time, and \"{end}\" should be greater than \"{start}\""
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/400Example'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example' 
  /event/age/{age}:
    parameters:
    - $ref: '#/components/parameters/correlatedRequestHeader'
    - name: age
      in: path
      required: true
      schema:
        type: integer
      description: "Age in milliseconds since created timestamp for a given event"
    delete:
      summary: "Remove all old events (and associated readings) based on delimiting age"
      responses:
        '202':
          description: "Delete request accepted"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                200Example:
                  $ref: '#/components/examples/202Example'
        '400':
          description: "\"{age}\" must be a parsable unix timestamp"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/400Example'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example' 
  /event/scrub:
    parameters:
    - $ref: '#/components/parameters/correlatedRequestHeader'
    delete:
      summary: "Remove all pushed events and their associated readings."
      responses:
        '202':
          description: "Delete request accepted"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                200Example:
                  $ref: '#/components/examples/200Example'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example' 
  /reading/all:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
    get:
      summary: "Given the entire range of readings sorted by created descending, returns a portion of that range according to the offset and limit parameters. Readings returned will all inherit from BaseReading but their concrete types will be either SimpleReading or BinaryReading, potentially interleaved."
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiReadingsResponse'
              examples:
                MultiReadingsExample:
                  $ref: '#/components/examples/AllReadingsExample'
        '400':
          description: "Request is in an invalid state"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/400Example'
        '416':
          description: "Request range is not satisfiable"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/416Example'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example' 
  /reading/count:
    parameters:
    - $ref: '#/components/parameters/correlatedRequestHeader'
    get:
      summary: "Return a count of all of readings currently stored in the database."
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResponse'
              example:
                requestId: ""
                apiVersion: "v2"
                statusCode: 200
                message: ""
                count: 4
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /reading/count/device/{deviceName}:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
      - name: deviceName
        in: path
        required: true
        schema:
          type: string
        description: "Uniquely identifies a given device"
    get:
      summary: "Return a count of all of readings currently stored in the database, sourced from the specified device."
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResponse'
              example:
                requestId: ""
                apiVersion: "v2"
                statusCode: 200
                message: ""
                count: 2
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /reading/id/{id}:
    parameters:
    - $ref: '#/components/parameters/correlatedRequestHeader'
    - name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: "An ID of datatype string, by default a GUID."
    get:
      summary: "Returns a reading by ID"
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadingResponse'
              example:
                requestId: ""
                apiVersion: "v2"
                statusCode: 200
                message: ""
                reading:
                  apiVersion: "v2"
                  created: 1594876281221
                  deviceName: "device-001"
                  resourceName: "resource-001"
                  profileName: "profile-001"
                  id: "31569347-9369-43ec-aa6a-59ea9c624a6f"
                  modified: 1594975851631
                  origin: 1602168089665565300
                  pushed: 1594975851631
                  valueType: "Float32"
                  value: "39.5"
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /reading/device/name/{name}:
    parameters:
    - $ref: '#/components/parameters/correlatedRequestHeader'
    - name: name
      in: path
      required: true
      schema:
        type: string
      description: "Uniquely identifies a given device"
    - $ref: '#/components/parameters/offsetParam'
    - $ref: '#/components/parameters/limitParam'
    get:
      summary: "Given a range of readings from the specified device sorted by created descending, returns a portion of that range according to the device name, offset and limit parameters."
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiReadingsResponse'
              example:
                requestId: ""
                apiVersion: "v2"
                statusCode: 200
                message: ""
                readings: 
                  - apiVersion: "v2"
                    created: 1594876281221
                    deviceName: "device-001"
                    resourceName: "resource-001"
                    profileName: "profile-001"
                    id: "31569347-9369-43ec-aa6a-59ea9c624a6f"
                    modified: 1594975851631
                    origin: 1602168089665565300
                    pushed: 1594975851631
                    valueType: "Float32"
                    value: "39.5"
                  - apiVersion: "v2"
                    create: 1594876281221
                    deviceName: "device-001"
                    resourceName: "resource-001"
                    profileName: "profile-001"
                    id: "2fd73a5b-969f-483c-9c52-6bb460a06eb1"
                    origin: 1602168089665565300
                    valueType: "Int8"
                    value: "75"
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /reading/valueType/{valueType}:
    parameters:
    - $ref: '#/components/parameters/correlatedRequestHeader'
    - name: valueType
      in: path
      required: true
      schema:
        type: string
      description: The datatype of a SimpleReading's value property.
    - $ref: '#/components/parameters/offsetParam'
    - $ref: '#/components/parameters/limitParam'
    get:
      summary: Returns a paginated list of SimpleReadings whose value property is of the specified type.
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiSimpleReadingsResponse'
              example:
                requestId: ""
                apiVersion: "v2"
                statusCode: 200
                message: ""
                readings:
                  - apiVersion: "v2"
                    created: 1594876281221
                    deviceName: "device-001"
                    resourceName: "resource-001"
                    profileName: "profile-001"
                    id: "31569347-9369-43ec-aa6a-59ea9c624a6f"
                    modified: 1594975851631
                    origin: 1602168089665565300
                    pushed: 1594975851631
                    valueType: "Float32"
                    value: "39.5"
                  - apiVersion: "v2"
                    created: 594983105886
                    deviceName: "device-002"
                    resourceName: "resource-002"
                    profileName: "profile-002"
                    id: "7003cacc-0e00-4676-977c-4e58b9612abd"
                    origin: 1602168089665565300
                    valueType: "Float32"
                    value: "12.2"
        '400':
          description: "Request is in an invalid state. \"{valueType}\" is defined in [Reading ValueTypes](https://github.com/edgexfoundry/go-mod-core-contracts/blob/8df1bc237b3746b67ec2754785c71dc83ce5d0c1/models/reading.go#L22-L49)."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/400Example'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /reading/start/{start}/end/{end}:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
      - name: start
        in: path
        required: true
        schema:
          type: integer
        description: "Unix timestamp indicating the start of a date/time range"
      - name: end
        in: path
        required: true
        schema:
          type: integer
        description: "Unix timestamp indicating the end of a date/time range"
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
    get:
      summary: "Return a paginated range of readings with a create date inside the specified start/end values."
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiReadingsResponse'
              examples:
                MultiReadingsExample:
                  $ref: '#/components/examples/AllReadingsExample'
        '400':
          description: "\"{start}\" and \"{end}\" are unix time, and \"{end}\" should be greater than \"{start}\""
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/400Example'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /config:
    get:
      summary: "Returns the current configuration of the service."
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
              example:
                requestId: ""
                apiVersion: "v2"
                statusCode: 200
                message: ""
                config:
                  Writeable:
                    DeviceUpdateLastConnected: false
                    MetaDataCheck: false
                    PersistData: true
                    ServiceUpdateLastConnected: false
                    ValidateCheck: false
                    LogLevel: "INFO"
                    ChecksumAlgo: "xxHash"
                  MessageQueue:
                    Host: "*"
                    Port: 5563
                    Protocol: "tcp"
                    Type: "zero"
                    Topic: "events"
                    Optional:
                      AutoReconnect: "true"
                      ClientId: "core-data"
                      ConnectTimeout: "5"
                      KeepAlive: "10"
                      Password: ""
                      Qos: "0"
                      Retained: "false"
                      SkipCertVerify: "false"
                      Username: ""
                  Clients:
                    Logging:
                      Host: "localhost"
                      Port: 48061
                      Protocol: "http"
                    Metadata:
                      Host: "edgex-core-metadata"
                      Port: 48081
                      Protocol: "http"
                  Databases:
                    Primary:
                      Username: "core"
                      Password: "password"
                      Type: "redisdb"
                      Timeout: 5000
                      Host: "edgex-redis"
                      Port: 6379
                      Name: "coredata"
                  Logging:
                    EnableRemote: false
                    File: ""
                  Registry:
                    Host: "edgex-core-consul"
                    Port: 8500
                    Type: "consul"
                  Service:
                    BootTimeout: 30000
                    CheckInterval: "10s"
                    Host: "edgex-core-data"
                    Port: 48080
                    SeverBindAddr: ""
                    Protocol: "http"
                    StartupMsg: "This is the Core Data Microservice"
                    MaxResultCount: 50000
                    Timeout: 5000
                  SecretStore:
                    Host: "edgex-vault"
                    Port: 8200
                    Path: "v1/secret/edgex/coredata/"
                    Protocol: "http"
                    Namespace: ""
                    RootCaCertPath: ""
                    ServerName: "edgex-vault" 
                    Authentication:
                      AuthType: "X-Vault-Token"  
                      AuthToken: ""  
                    AdditionalRetryAttempts: 10
                    RetryWaitPeriod: "1s"
                    TokenFile: "/tmp/edgex/secrets/edgex-core-data/secrets-token.json"
                  Startup:
                    Duration: 30
                    Interval: 1
        '500':
          description: "Interval Server Error"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /metrics:
    get:
      summary: "An endpoint that can be used to obtain CPU/Memory usage stats for a given service."
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'
              example:
                requestId: ""
                apiVersion: "v2"
                statusCode: 200
                message: ""
                metrics:
                  memAlloc: 877192
                  memFrees: 2248915
                  memLiveObjects: 6522
                  memMallocs: 2255437
                  memSys: 72876280
                  memTotalAlloc: 203821192
                  cpuBusyAvg: 2.2521221920656003
        '500':
          description: "Interval Server Error"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'          
  /ping:
    get:
      summary: "A simple 'ping' endpoint that can be used as a service healthcheck"
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
              example:
                requestId: ""
                apiVersion: "v2"
                statusCode: 200
                message: ""
                timestamp: "Mon, 02 Jan 2006 15:04:05 MST"
        '500':
          description: "Interval Server Error"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /version:
    get:
      summary: "A simple 'version' endpoint that will return the current version of the service"
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
              example:
                requestId: ""
                apiVersion: "v2"
                statusCode: 200
                message: ""
                version: "master"                
        '500':
          description: "Interval Server Error"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'