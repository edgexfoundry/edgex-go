openapi: 3.0.0
info:
  title: Edgex Foundry - System Management Agent API
  description: This is the definition of the API for the System Management Agent service in the EdgeX Foundry IOT microservice platform. System Management Agent is responsible for management of EdgeX microservices and supported infrastructure.
  version: "2.0"

servers:
  - url: "http://localhost:48090/api/v2"
    description: URL for local development and testing

components:
  schemas:
    BaseRequest:
      description: "Defines basic properties which all use-case specific request DTO instances should support."
      type: object
      properties:
        requestId:
          description: "Uniquely identifies this request. For implementation, recommend this value be generated by the type's constructor."
          type: string
          format: uuid
          example: "e6e8a2f4-eb14-4649-9e2b-175247911369"
      required:
        - requestId
    BaseResponse:
      description: "Defines basic properties which all use-case specific response DTO instances should support"
      type: object
      properties:
        requestId:
          description: "Uniquely identifies the request that resulted in this response."
          type: string
          format: uuid
          example: "e6e8a2f4-eb14-4649-9e2b-175247911369"
        statusCode:
          description: "A numeric code signifying the operational status of the response."
          type: integer
        message:
          description: "A field that can contain a free-form message, such as an error message."
          type: string
      required:
        - requestId
        - statusCode
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "A response type for returning a generic error to the caller."
      type: object
    GetConfigRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
      description: "Retrieves the current configuration for the targeted service."
      type: object
      properties:
        service:
          type: string
          example: edgex-core-data
    GetConfigResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "Provides a response containing the configuration for the targeted service."
      type: object
      properties:
        additionalProperties:
          type: object
          title: service
          description: "Map of service(key) and configuration(value)"
      example: { "edgex-core-data" : {"Clients" : {"Logging" : {"Host" : "localhost", "Port" : "48061" , "Protocol":"http"}}}}
      required:
        - config
    HealthRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
      properties:
        service:
          description: "The services from which to obtain health information."
          type: string
          example: "edgex-core-data"
    HealthResponse:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
      type: object
      description: "Response containing the health status for the targeted service."
      properties:
        service:
          type: string
          example: "edgex-core-data"
        health:
          type: string
    MetricsRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
      properties:
        service:
          description: "The service from which to obtain metrics."
          type: string
          example: "edgex-core-data"
    MetricsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        executor:
          description: "The type of executor used to process the retrieve the metrics"
          type: string
          example: "docker"
        operation:
          description: "The type of operation performed"
          type: string
          example: "metrics"
        service:
          description: "The service associated with the metrics"
          type: string
          example: "edgex-core-data"
        result:
          description: "The metric information retrieved from the targeted service"
          type: object
          properties:
            cpuBusyAvg:
              type: integer
            cpuUsedPercent:
              type: integer
            memoryUsed:
              type: integer
            raw:
              additionalProperties: true
              type: object
    OperationRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
      description: "An Operation for SMA processing."
      properties:
        action:
          description: "The operation to execute on the service."
          type: string
          enum: [start, stop, restart]
        service:
          description: "The service to which to apply the action."
          type: string
          example: "edgex-core-data"
    OperationResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      additionalProperties: true
      properties:
        operation:
          description: "The operation executed on the targeted service"
          type: string
          example: "start"
        service:
          description: "The name of the targeted service"
          type: string
          example: edgex-redis
        executor:
          description: "The type of executor which processed the operation"
          type: string
          example: "docker"
    PingRequest:
      description: "A request associated with the /ping endpoint."
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
      type: object
    PingResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        timestamp:
          description: "Outputs the current server timestamp in RFC1123 format"
          example: "Mon, 02 Jan 2006 15:04:05 MST"
          type: string
    RequestEnvelope:
      description: "A wrapper type for use when sending a request to the /batch endpoint. Each individual request type in the HTTP request should be wrapped in an envelope to facilitate instantiation of the correct routing handler. See property descriptions below for more details."
      type: object
      properties:
        action:
          type: string
          description: "Indicates the type of operation applicable to the wrapped request. Valid values are 'create','read','update','delete', and 'command'"
        content:
          type: string
          format: byte
          description: "A byte array containing a marshalled request type instance. This is the specific, semantically identifiable request -- such as an AddDeviceRequest."
        strategy:
          type: string
          description: "Indicates the expectation of whether a response should be produced synchronously or asynchronously. If asynchronously, desire for either a polling or push/callback should be provided. Valid values are 'sync','async-push','async-poll'"
        type:
          type: string
          description: "The name of the type applicable to the request instance contained in the 'content' property."
        version:
          description: "Explicitly defines major-only version number of request DTO."
          type: string
          example: "2"
      required:
        - action
        - content
        - strategy
        - type
        - version
    ResponseEnvelope:
      description: "A wrapper type for use when receiving a response from the /batch endpoint. Each individual response type in the HTTP response should be wrapped in an envelope to facilitate unmarshaling by the client. See property descriptions below for more details."
      type: object
      properties:
        action:
          type: string
          description: "Indicates the type of operation applicable to the wrapped response. This should be recapitulated from the originating request. Valid values are 'create','read','update','delete', and 'command'"
        content:
          type: string
          format: byte
          description: "A byte array containing a marshalled response type instance. This is the specific, semantically identifiable response -- such as an AddDeviceResponse."
        strategy:
          type: string
          description: "Recapitulates the expectation with regard to the delivery of response that was specified on the originating request. Valid values are 'sync','async-push','async-poll'"
        type:
          type: string
          description: "The name of the type applicable to the response instance contained in the 'content' property."
        version:
          description: "Explicitly defines major-only version number of response DTO."
          type: string
          example: "2"
      required:
        - action
        - content
        - strategy
        - type
        - version
    SetConfigRequest:
      description: "A request associated with the /config endpoint."
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
      type: object
      properties:
        service:
          description: "Updates the target service's configuration"
          type: string
          example: "edgex-core-data"
        configuration:
          description: "Service's configuration"
          type: array
          items:
            properties:
              key:
                description: "Path of the configuration to update"
                type: string
                example: "Writable.LogLevel"
              value:
                description: "New value to which the configuration should be updated"
                type: string
                example: "DEBUG"
    SetConfigResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "Provides a response containing the configuration for the targeted service."
      type: object
      properties:
        service:
          description: "The service which the update was applied"
          type: string
          example: "edgex-core-command"
      required:
        - service
    VersionRequest:
      description: "A request associated with the /version endpoint."
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
      type: object
    VersionResponse:
      description: "A response returned from the /version endpoint whose purpose is to report out the latest version supported by the service."
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        version:
          description: "The latest version supported by the service."
          type: string
      required:
        - version
  parameters:
    correlatedRequestHeader:
      in: header
      name: X-Correlation-ID
      description: "A unique identifier correlating a request to its associated response, facilitating tracing through being included on requests originating from the initiating request."
      schema:
        type: string
        format: uuid
      required: true
      example: "14a42ea6-c394-41c3-8bcd-a29b9f5e6835"
  headers:
    correlatedResponseHeader:
      description: "A response header that returns the unique correlation ID used to initiate the request."
      schema:
        type: string
        format: uuid
      required: true
      example: "14a42ea6-c394-41c3-8bcd-a29b9f5e6835"
paths:
  /batch:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
    post:
      servers:
        - url:  http://localhost:48082/api
      summary: "Accepts an arbitrary number of RequestEnvelope instances. Each RequestEnvelope has a 'content' property that holds a specific request type. This endpoint is operation agnostic will route the request to the appropriate handler implementation within the service. Version is not denoted as part of the route since it is included as a property on each RequestEnvelope."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestEnvelope'
      responses:
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/ResponseEnvelope'
  /config/settings:
    post:
      summary: "Update the configuration for the targeted service."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/SetConfigRequest'
                - type: array
                  items:
                    $ref: '#/components/schemas/SetConfigRequest'
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetConfigResponse'
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/SetConfigResponse'
        '400':
          description: "Bad request"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /config:
    post:
      summary: "Retrieves the current configuration of the targeted service."
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/GetConfigRequest'
                - type: array
                  items:
                    $ref: '#/components/schemas/GetConfigRequest'

      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConfigResponse'
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/GetConfigResponse'
        '400':
          description: "Bad request"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health:
    post:
      summary: "Obtain health information from the targeted service."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/HealthRequest'
                - type: array
                  items:
                    $ref: '#/components/schemas/HealthRequest'
      responses:
        '200':
          description: OK
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/HealthResponse'
        '400':
          description: "Bad request"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /metrics:
    post:
      summary: "Obtain metrics information from the targeted service."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/MetricsRequest'
                - type: array
                  items:
                    $ref: '#/components/schemas/MetricsRequest'
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/MetricsResponse'
        '400':
          description: "Bad request"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /operation:
    post:
      summary: "Issue a start, stop or restart action to the targeted service."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/OperationRequest'
                - type: array
                  items:
                    $ref: '#/components/schemas/OperationRequest'
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResponse'
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/OperationResponse'
        '400':
          description: "Bad request"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /ping:
    post:
      summary: "A simple 'ping' endpoint that can be used as a service healthcheck"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/PingRequest'
                - type: array
                  items:
                    $ref: '#/components/schemas/PingRequest'
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/PingResponse'
        '400':
          description: "Bad request"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /version:
    post:
      summary: "A simple 'version' endpoint that will return the current version of the service"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/VersionRequest'
                - type: array
                  items:
                    $ref: '#/components/schemas/VersionRequest'
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/VersionResponse'
        '400':
          description: "Bad request"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
