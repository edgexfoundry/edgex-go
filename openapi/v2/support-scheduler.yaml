openapi: 3.0.0
info:
  title: Edgex Foundry - Support Scheduler API
  description: This is the definition of the API for the Support Scheduler service in the EdgeX Foundry IOT microservice platform. Support Scheduler provides functionality for scheduling different actions in the EdgeX Foundry platform.
  version: 2.x
  
servers:
  - url: http://localhost:48085/api/v2
    description: URL for local development and testing
  
components:
  schemas:
    AddIntervalRequest:
      allOf:
      - $ref: '#/components/schemas/BaseRequest'
      type: object
      properties:
        cron:
          description: "A cron-styled regular expression indicating how often the action under interval should occur.  Use either runOnce, frequency or cron and not all."
          type: string
        end:
          description: "Start time in ISO 8601 format YYYYMMDD'T'HHmmss 	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyymmdd'T'HHmmss\")"
          type: string
        frequency:
          description: "The frequency of the event according ISO 8601"
          type: string
        name:
          description: "Non-database identifier for an interval (*must be unique)"
          type: string
        runOnce:
          description: "Indicates that this interval runs one time - at the time indicated by the start"
          type: boolean
        start:
          description: "Start time in ISO 8601 format YYYYMMDD'T'HHmmss 	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyymmdd'T'HHmmss\")"
          type: string
      required:
      - name
    AddIntervalResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    AddIntervalActionRequest:
      allOf:
      - $ref: '#/components/schemas/BaseRequest'
      type: object
      properties:
        host:
          description: "The host targeted by the action"
          type: string
        httpMethod:
          description: "Indicates which Http verb should be used when the action targets a REST endpoint."
          type: string
        intervalId:
          description: "The ID of the interval to which the action is associated."
          type: string
          format: uuid
        name:
          description: "Non-database identifier for an interval action"
          type: string
        parameters:
          description: "Any parameters required by the action"
          type: string
        password:
          description: "If authentication is required, the password"
          type: string
        path:
          description: "The required path at the targeted host for fulfillment of the action."
          type: string
        port:
          description: "The port to address on the targeted host"
          type: integer
        protocol:
          description: "Identifies the protocol required by the action"
          type: string
        publisher:
          type: string
        target:
          description: "The target of the action"
          type: string
        topic:
          description: "When the action supports pub/sub the topic to which a message should be published."
          type: string
        user:
          description: "If authentication is required, the username"
          type: string
      required:
      - intervalId
      - name
      - target
    AddIntervalActionResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    BaseRequest:
      description: "Defines basic properties which all use-case specific request DTO instances should support."
      type: object
      properties:
        requestId:
          description: "Uniquely identifies this request. For implementation, recommend this value be generated by the type's constructor."
          type: string
          format: uuid
          example: "e6e8a2f4-eb14-4649-9e2b-175247911369"
      required:
        - requestId
    BaseResponse:
      description: "Defines basic properties which all use-case specific response DTO instances should support"
      type: object
      properties:
        requestId:
          description: "Uniquely identifies the request that resulted in this response."
          type: string
          format: uuid
          example: "e6e8a2f4-eb14-4649-9e2b-175247911369"
        statusCode:
          description: "A numeric code signifying the operational status of the response."
          type: integer
        message:
          description: "A field that can contain a free-form message, such as an error message."
          type: string
      required:
        - requestId
        - statusCode
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "A response type for returning a generic error to the caller."
      type: object
    ConfigRequest:
      description: "A request associated with the /config endpoint."
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
      type: object
    ConfigResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "Provides a response containing the configuration for the targeted service."
      type: object
      properties:
        config:
          description: "A string-ified representation of the service's configuration. For purposes of this specification, a string has been used since configuration structure differs from service to service."
          type: string
      required:
      - config
    Interval:
      description: "Defines the frequency at which some action should occur."
      type: object
      properties:
        created:
          description: "A timestamp indicating when the interval was created."
          type: integer
        cron:
          description: "A cron-styled regular expression indicating how often the action under interval should occur.  Use either runOnce, frequency or cron and not all."
          type: string
        end:
          description: "Start time in ISO 8601 format YYYYMMDD'T'HHmmss 	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyymmdd'T'HHmmss\")"
          type: string
        frequency:
          description: "The frequency of the event according ISO 8601"
          type: string
        id:
          description: "Uniquely identifies the interval"
          type: string
          format: uuid
        modified:
          description: "A timestamp indicating when the interval was last modified."
          type: integer
        name:
          description: "Non-database identifier for an interval (*must be unique)"
          type: string
        runOnce:
          description: "Indicates that this interval runs one time - at the time indicated by the start"
          type: boolean
        start:
          description: "Start time in ISO 8601 format YYYYMMDD'T'HHmmss 	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyymmdd'T'HHmmss\")"
          type: string
    IntervalAction:
      description: "Defines the action to be taken at a specified interval."
      type: object
      properties:
        created:
          description: "A timestamp indicating when the interval action was created."
          type: integer
        host:
          description: "The host targeted by the action"
          type: string
        httpMethod:
          description: "Indicates which Http verb should be used when the action targets a REST endpoint."
          type: string
        id:
          description: "Uniquely identifies the interval action"
          type: string
          format: uuid
        intervalId:
          description: "The ID of the interval to which the action is associated."
          type: string
          format: uuid
        modified:
          description: "A timestamp indicating when the interval action was last modified."
          type: integer
        name:
          description: "Non-database identifier for an interval action"
          type: string
        parameters:
          description: "Any parameters required by the action"
          type: string
        password:
          description: "If authentication is required, the password"
          type: string
        path:
          description: "The required path at the targeted host for fulfillment of the action."
          type: string
        port:
          description: "The port to address on the targeted host"
          type: integer
        protocol:
          description: "Identifies the protocol required by the action"
          type: string
        publisher:
          type: string
        target:
          description: "The target of the action"
          type: string
        topic:
          description: "When the action supports pub/sub the topic to which a message should be published."
          type: string
        user:
          description: "If authentication is required, the username"
          type: string
    IntervalActionResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        action:
          $ref: '#/components/schemas/IntervalAction'
    IntervalResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        interval:
          $ref: '#/components/schemas/Interval'
    MetricsRequest:
      description: "A request associated with the /metrics endpoint."
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
      type: object
    MetricsResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      description: "A response from the /metrics endpoint providing memory and cpu utilization stats."
      type: object
      properties:
        memAlloc:
          description: "Alloc is bytes of allocated heap objects."
          type: integer
        memFrees:
          description: "Frees is the cumulative count of heap objects freed."
          type: integer
        memLiveObjects:
          description: "The number of live objects is Mallocs - Frees."
          type: integer
        memMallocs:
          description: "The cumulative count of heap objects allocated."
          type: integer
        memSys:
          description: "The total bytes of memory obtained from the OS."
          type: integer
        memTotalAlloc:
          description: "Cumulative bytes allocated for heap objects."
          type: integer
        cpuBusyAvg:
          description: "Indicates the average level of CPU utilization"
          type: number
      required:
      - memAlloc
      - memFrees
      - memLiveObjects
      - memMallocs
      - memSys
      - memTotalAlloc
      - cpuBusyAvg
    PingRequest:
      description: "A request associated with the /ping endpoint."
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
      type: object
    PingResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        timestamp:
          description: "Outputs the current server timestamp in RFC1123 format"
          example: "Mon, 02 Jan 2006 15:04:05 MST"
          type: string
    RequestEnvelope:
      description: "A wrapper type for use when sending a request to the /batch endpoint. Each individual request type in the HTTP request should be wrapped in an envelope to facilitate instantiation of the correct routing handler. See property descriptions below for more details."
      type: object
      properties:
        action:
          type: string
          description: "Indicates the type of operation applicable to the wrapped request. Valid values are 'create','read','update','delete', and 'command'"
        content:
          type: string
          format: byte
          description: "A byte array containing a marshalled request type instance. This is the specific, semantically identifiable request -- such as an AddDeviceRequest."
        strategy:
          type: string
          description: "Indicates the expectation of whether a response should be produced synchronously or asynchronously. If asynchronously, desire for either a polling or push/callback should be provided. Valid values are 'sync','async-push','async-poll'"
        type:
          type: string
          description: "The name of the type applicable to the request instance contained in the 'content' property."
        version:
          description: "Proposed field for explicitly defining version of request DTO. This is for advertising compatibility between a publisher/subscriber or requester/receiver"
          type: string
          example: "2.0.x"
      required:
        - action
        - content
        - strategy
        - type
        - version
    ResponseEnvelope:
      description: "A wrapper type for use when receiving a response from the /batch endpoint. Each individual response type in the HTTP response should be wrapped in an envelope to facilitate unmarshalling by the client. See property descriptions below for more details."
      type: object
      properties:
        action:
          type: string
          description: "Indicates the type of operation applicable to the wrapped response. This should be recapitulated from the originating request. Valid values are 'create','read','update','delete', and 'command'"
        content:
          type: string
          format: byte
          description: "A byte array containing a marshalled response type instance. This is the specific, semantically identifiable response -- such as an AddDeviceResponse."
        strategy:
          type: string
          description: "Recapitulates the expectation with regard to the delivery of response that was specified on the originating request. Valid values are 'sync','async-push','async-poll'"
        type:
          type: string
          description: "The name of the type applicable to the response instance contained in the 'content' property."
        version:
          description: "Proposed field for explicitly defining version of response DTO. This is for advertising compatibility between a publisher/subscriber or requester/receiver"
          type: string
          example: "2.0.x"
      required:
        - action
        - content
        - strategy
        - type
        - version
    UpdateIntervalRequest:
      allOf:
      - $ref: '#/components/schemas/BaseRequest'
      type: object
      properties:
        cron:
          description: "A cron-styled regular expression indicating how often the action under interval should occur.  Use either runOnce, frequency or cron and not all."
          type: string
        end:
          description: "Start time in ISO 8601 format YYYYMMDD'T'HHmmss 	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyymmdd'T'HHmmss\")"
          type: string
        frequency:
          description: "The frequency of the event according ISO 8601"
          type: string
        id:
          description: "Uniquely identifies the interval"
          type: string
          format: uuid
        name:
          description: "Non-database identifier for an interval (*must be unique)"
          type: string
        runOnce:
          description: "Indicates that this interval runs one time - at the time indicated by the start"
          type: boolean
        start:
          description: "Start time in ISO 8601 format YYYYMMDD'T'HHmmss 	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyymmdd'T'HHmmss\")"
          type: string
      required:
      - id
      - name
    UpdateIntervalResponse:
      allOf:
      - $ref: '#/components/schemas/BaseRequest'
      type: object
      properties:
        id:
          type: string
          format: uuid
    UpdateIntervalActionRequest:
      allOf:
      - $ref: '#/components/schemas/BaseRequest'
      type: object
      properties:
        host:
          description: "The host targeted by the action"
          type: string
        httpMethod:
          description: "Indicates which Http verb should be used when the action targets a REST endpoint."
          type: string
        id:
          description: "Uniquely identifies the interval action"
          type: string
          format: uuid
        intervalId:
          description: "The ID of the interval to which the action is associated."
          type: string
          format: uuid
        name:
          description: "Non-database identifier for an interval action"
          type: string
        parameters:
          description: "Any parameters required by the action"
          type: string
        password:
          description: "If authentication is required, the password"
          type: string
        path:
          description: "The required path at the targeted host for fulfillment of the action."
          type: string
        port:
          description: "The port to address on the targeted host"
          type: integer
        protocol:
          description: "Identifies the protocol required by the action"
          type: string
        publisher:
          type: string
        target:
          description: "The target of the action"
          type: string
        topic:
          description: "When the action supports pub/sub the topic to which a message should be published."
          type: string
        user:
          description: "If authentication is required, the username"
          type: string
      required:
      - id
      - intervalId
      - name
      - target
    UpdateIntervalActionResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        id:
          type: string
          format: uuid
    VersionRequest:
      description: "A request associated with the /version endpoint."
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
      type: object
    VersionResponse:
      description: "A response returned from the /version endpoint whose purpose is to report out the latest version supported by the service."
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        version:
          description: "The latest version supported by the service."
          type: string
      required:
      - version
  parameters:
    offsetParam:
      in: query
      name: offset
      required: true
      schema:
        type: integer
        minimum: 0
      description: "The number of items to skip before starting to collect the result set."
    limitParam:
      in: query
      name: limit
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: "The numbers of items to return."
    correlatedRequestHeader:
      in: header
      name: X-Correlation-ID
      description: "A unique identifier correlating a request to its associated response, facilitating tracing through being included on requests originating from the initiating request."
      schema:
        type: string
        format: uuid
      required: true
      example: "14a42ea6-c394-41c3-8bcd-a29b9f5e6835"
  headers:
    correlatedResponseHeader:
      description: "A response header that returns the unique correlation ID used to initiate the request."
      schema:
        type: string
        format: uuid
      required: true
      example: "14a42ea6-c394-41c3-8bcd-a29b9f5e6835"
paths:
  /batch:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
    post:
      servers:
      - url:  http://localhost:48085/api
      summary: "Accepts an arbitrary number of RequestEnvelope instances. Each RequestEnvelope has a 'content' property that holds a specific request type. This endpoint is operation agnostic will route the request to the appropriate handler implementation within the service. Version is not denoted as part of the route since it is included as a property on each RequestEnvelope."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestEnvelope'
      responses:
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/ResponseEnvelope'
  /interval:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
    post:
      summary: "Add one or more new Intervals - name on each request must be unique."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AddIntervalRequest'
      responses:
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/AddIntervalResponse'
    patch:
      summary: "Update one or more existing Intervals"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateIntervalRequest'
      responses:
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/UpdateIntervalResponse'
  /interval/all:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
    get:
      summary: "Given the entire range of intervals sorted by last modified descending, returns a portion of that range according to the offset and limit parameters."
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IntervalResponse'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
  /interval/id/{id}:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: "An ID of datatype string, by default a GUID."
    get:
      summary: "Returns an interval by ID"
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntervalResponse'
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: "Deletes an interval according to the specified ID. Associated actions will also be deleted."
      responses:
        '204':
          description: "Delete successful"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
        '400':
          description: "Request is in an invalid state"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /interval/name/{name}:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
      - name: name
        in: path
        required: true
        schema:
          type: string
        description: "The unique name of an interval"
    get:
      summary: "Returns an interval according to the specified name"
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntervalResponse'
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: "Deletes an interval according to the specified name. Associated actions will also be deleted."
      responses:
        '204':
          description: "Delete successful"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
        '400':
          description: "Request is in an invalid state"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /intervalaction:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
    post:
      summary: "Add one or more new IntervalActions - name on each request must be unique."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AddIntervalActionRequest'
      responses:
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/AddIntervalActionResponse'
    patch:
      summary: "Update one or more existing IntervalActions"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateIntervalActionRequest'
      responses:
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/UpdateIntervalActionResponse'
  /intervalaction/all:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
    get:
      summary: "Given the entire range of interval actions sorted by last modified descending, returns a portion of that range according to the offset and limit parameters."
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IntervalActionResponse'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
  /intervalaction/id/{id}:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: "An ID of datatype string, by default a GUID."
    get:
      summary: "Returns an interval action by ID"
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntervalActionResponse'
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: "Deletes an interval action by ID"
      responses:
        '204':
          description: "Delete successful"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
        '400':
          description: "Request is in an invalid state"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /intervalaction/name/{name}:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
      - name: name
        in: path
        required: true
        schema:
          type: string
        description: "The name of an interval action"
    get:
      summary: "Returns an interval action according to the specified name"
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntervalActionResponse'
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: "Deletes an interval action by name"
      responses:
        '204':
          description: "Delete successful"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
        '400':
          description: "Request is in an invalid state"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "The requested resource does not exist"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /intervalaction/target/{target}:
    parameters:
      - $ref: '#/components/parameters/correlatedRequestHeader'
      - name: target
        in: path
        required: true
        schema:
          type: string
        description: "The target of an interval action"
    get:
      summary: "Returns a paginated list of all interval actions associated with the specified target."
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IntervalActionResponse'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: "Deletes all interval actions associated with the specified target."
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntervalActionResponse'
        '500':
          description: "An unexpected error occurred on the server"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /config:
    post:
      summary: "Returns the current configuration of the service."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/ConfigRequest'
                - type: array
                  items:
                    $ref: '#/components/schemas/ConfigRequest'
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/ConfigResponse'
        '400':
          description: "Bad request"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /metrics:
    post:
      summary: "An endpoint that can be used to obtain CPU/Memory usage stats for a given service."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/MetricsRequest'
                - type: array
                  items:
                    $ref: '#/components/schemas/MetricsRequest'
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/MetricsResponse'
        '400':
          description: "Bad request"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /ping:
    post:
      summary: "A simple 'ping' endpoint that can be used as a service healthcheck"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/PingRequest'
                - type: array
                  items:
                    $ref: '#/components/schemas/PingRequest'
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/PingResponse'
        '400':
          description: "Bad request"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /version:
    post:
      summary: "A simple 'version' endpoint that will return the current version of the service"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/VersionRequest'
                - type: array
                  items:
                    $ref: '#/components/schemas/VersionRequest'
      responses:
        '200':
          description: "OK"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
        '207':
          description: "Indicates a multi-part response supportive of accepting multiple requests at once. The 'statusCode' property of each response in the returned array will indicate success or failure."
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - $ref: '#/components/schemas/VersionResponse'
        '400':
          description: "Bad request"
          headers:
            X-Correlation-ID:
              $ref: '#/components/headers/correlatedResponseHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'