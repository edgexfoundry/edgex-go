openapi: 3.1.0
info:
  title: Edgex Foundry - Core Keeper API
  description: This is the definition of the API for the Core Keeper service in the EdgeX Foundry IOT microservice platform.
  version: 4.0.0

servers:
  - url: http://localhost:59890/api/v3
    description: URL for local development and testing

components:
  schemas:
    BaseRequest:
      description: "Defines basic properties which all use-case specific request DTO instances should support."
      type: object
      properties:
        requestId:
          description: "Uniquely identifies this request. For implementation, recommend this value be generated by the type's constructor."
          type: string
          format: uuid
          example: "e6e8a2f4-eb14-4649-9e2b-175247911369"
        apiVersion:
          description: "A version number shows the API version in DTOs."
          type: string
          example: v3
      required:
        - apiVersion
    BaseResponse:
      description: "Defines basic properties which all use-case specific response DTO instances should support"
      type: object
      properties:
        apiVersion:
          description: "A version number shows the API version in DTOs."
          type: string
          example: v3
        statusCode:
          description: "A numeric code signifying the operational status of the response."
          type: integer
        message:
          description: "A field that can contain a free-form message, such as an error message."
          type: string
    BaseWithTotalCountResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "Defines basic properties which all use-case specific response DTO instances should support"
      type: object
      properties:
        totalCount:
          description: "The total count of all multi instances."
          type: integer
    KVRequest:
      description: "Defines the single value to be stored of the specified key."
      type: object
      properties:
        value:
          description: "The value will be stored into the database under the specified key path."
          type: object
    KVFlattenRequest:
      description: "Defines the values to be stored of the specified key prefix."
      type: object
      properties:
        value:
          description: "The values will be stored into the database under the specified key prefix."
          type: object
    Key:
      type: string
      description: "The key exist in the persistence database."
    KeyValue:
      type: object
      properties:
        created:
          description: "A Unix timestamp indicating when (if) the key was initially persisted to a database."
          type: integer
        modified:
          description: "A Unix timestamp indicating when (if) the key was modified to a database."
          type: integer
        key:
          description: "The key path in the database."
          type: string
        value:
          description: "The value stored in the specified key path in the database."
          type: string
    MultiKeysResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "A response type for returning multiple keys to the caller."
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/Key'
    MultiKVsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "A response type for returning multiple key-value pairs to the caller."
      type: object
      properties:
        keyValues:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
    AddRegistrationRequest:
      description: "Defines the information for a service to be registered"
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
      type: object
      properties:
        registration:
          $ref: '#/components/schemas/AddRegistration'
      required:
        - registration
    UpdateRegistrationRequest:
      description: "Defines the updated information for a service to be registered"
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
      type: object
      properties:
        registration:
          $ref: '#/components/schemas/UpdateRegistration'
      required:
        - registration
    RegistrationResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        registration:
          $ref: '#/components/schemas/Registration'
    MultiRegistrationsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseWithTotalCountResponse'
      type: object
      properties:
        registrations:
          type: array
          items:
            $ref: '#/components/schemas/Registration'
    Registration:
      description: Information of the service to be registered
      type: object
      properties:
        created:
          type: integer
          description: Created is a timestamp indicating when the entity was created.
        modified:
          type: integer
          description: Modified is a timestamp indicating when the entity was last modified.
        serviceId:
          type: string
          description: Unique id for identifying a service
        status:
          type: string
          description: Health status of the registered service
          enum:
            - UP
            - DOWN
            - UNKNOWN
            - HALT
          default: UNKNOWN
        host:
          type: string
          description: Host address of the service
        port:
          type: integer
          description: Port number of the service
        healthCheck:
          $ref: '#/components/schemas/HealthCheck'
        lastConnected:
          type: integer
          description: Time (milliseconds) that the device last provided any feedback or responded to any request
    AddRegistration:
      type: object
      properties:
        serviceId:
          type: string
          description: Unique id for identifying a service
        status:
          type: string
          description: Health status of the service
          enum:
            - UP
            - DOWN
            - UNKNOWN
          default: UNKNOWN
        host:
          type: string
          description: Host address of the service
        port:
          type: integer
          description: Port number of the service
        healthCheck:
          $ref: '#/components/schemas/HealthCheck'
      required:
        - serviceId
        - port
        - healthCheck
    UpdateRegistration:
      type: object
      properties:
        serviceId:
          type: string
          description: Unique id for identifying a service
        status:
          type: string
          description: Health status of the service
          enum:
            - UP
            - DOWN
            - UNKNOWN
          default: UNKNOWN
        host:
          type: string
          description: Host address of the service
        port:
          type: integer
          description: Port number of the service
        healthCheck:
          $ref: '#/components/schemas/HealthCheck'
      required:
        - serviceId
        - port
        - healthCheck
    HealthCheck:
      description: "health check information for a registered service"
      type: object
      properties:
        interval:
          type: string
          description: The amount of time to invoke the health check url periodically
        path:
          type: string
          description: The health check path of the specified service
        type:
          type: string
          description: The protocol type of the health check url
      required:
        - type
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      description: "A response type for returning a generic error to the caller."
      type: object
    ConfigResponse:
      description: "Provides a response containing the configuration for the targeted service."
      type: object
      properties:
        apiVersion:
          description: "A version number shows the API version in DTOs."
          type: string
        serviceName:
          description: "Outputs the name of the service the response is from"
          type: string
        config:
          description: "An object containing the service's configuration. Please refer the configuration documentation of each service for more details at [EdgeX Foundry Documentation](https://docs.edgexfoundry.org)."
          type: object
    PingResponse:
      type: object
      properties:
        apiVersion:
          description: "A version number shows the API version in DTOs."
          type: string
        timestamp:
          type: string
          description: "Outputs the current server timestamp in RFC1123 format"
          example: "Mon, 02 Jan 2006 15:04:05 MST"
        serviceName:
          description: "Outputs the name of the service the response is from"
          type: string
    VersionResponse:
      description: "A response returned from the /version endpoint whose purpose is to report out the latest version supported by the service."
      type: object
      properties:
        apiVersion:
          description: "A version number shows the API version in DTOs."
          type: string
          example: v3
        version:
          description: "The latest version supported by the service."
          type: string
        serviceName:
          description: "Outputs the name of the service the response is from"
          type: string
  parameters:
    keyPathParam:
      in: path
      name: key
      required: true
      schema:
        type: string
      example: edgex/v4/core-data
      description: "Uniquely identifies a key."
    plaintextParam:
      in: query
      name: plaintext
      schema:
        type: boolean
        default: false
      required: false
      description: "By default, the plaintext value is set to false and the response will return the stored value as a Base64 encoded string. If set to true, the response will return the stored plain text value of the key(s) without any encoding."
    keyOnlyParam:
      in: query
      name: keyOnly
      schema:
        type: boolean
        default: false
      required: false
      description: "If set to true, the response will only return the key(s) of the specified query key prefix, without values and metadata."
    flattenParam:
      in: query
      name: flatten
      schema:
        type: boolean
        default: false
      required: false
      description: "If set to true, the request json object should be flattened before storing into database."
    preMatchParam:
      in: query
      name: prefixMatch
      schema:
        type: boolean
        default: false
      required: false
      description: "By default, the value is set to false and only the key exactly matches the specified key path will be deleted. If set to true, all keys which have the specified prefix will be deleted."
    deregisteredParam:
      in: query
      name: deregistered
      schema:
        type: boolean
        default: false
      required: false
      description: |
        By default, the deregistered value is set to false and the response will only return the registrations of registered services(services with health status is UP, DOWN or UNKNOWN).<br> 
        If set to true, the response will return all registrations including the deregistered services(services with health status is HALT)
  examples:
    400Example:
      value:
        apiVersion: "v3"
        statusCode: 400
        message: "Bad Request"
    404Example:
      value:
        apiVersion: "v3"
        statusCode: 404
        message: "Not Found"
    409Example:
      value:
        apiVersion: "v3"
        statusCode: 409
        message: "associated object exists"
    500Example:
      value:
        apiVersion: "v3"
        statusCode: 500
        message: "Internal Server Error"
    KeyExample:
      value:
        apiVersion: "v3"
        statusCode: 200
        response:
          - "edgex/v4/core-data/Writable/Telemetry/Interval"
          - "edgex/v4/core-data/Writable/Telemetry/PublishTopicPrefix"
          - "edgex/v4/core-data/Writable/Telemetry/Metrics/EventsPersisted"
    KVExample:
      value:
        apiVersion: "v3"
        statusCode: 200
        response:
          - key: "edgex/v4/core-data/Writable/Telemetry/Interval"
            created: 1655372722060444
            modified: 1655372722060444
            value: "MzBz"
          - key: "edgex/v4/core-data/Writable/Telemetry/PublishTopicPrefix"
            created: 1655372722061042
            modified: 1655372722061042
            value: "ZWRnZXgvdGVsZW1ldHJ5"
          - key: "edgex/v4/core-data/Writable/Telemetry/Metrics/EventsPersisted"
            created: 1655372722061868
            modified: 1655372722061868
            value": false
    KVRequestExample:
      value:
        value: "INFO"
    KVFlattenReqExample:
      value:
        value:
          MaxEventSize: 25000
          Writable:
            PersistData: true
            LogLevel: "INFO"
            InsecureSecrets:
              DB:
                path: "redisdb"
                Secrets:
                  username: ""
                  password: ""
    UpdateKeyRespExample:
      value:
        apiVersion: "v3"
        statusCode: 200
        response:
          - "edgex/v4/core-data"
    UpdateKeyFlattenRespExample:
      value:
        apiVersion: "v3"
        statusCode: 200
        response:
          - "edgex/v4/core-data/MaxEventSize"
          - "edgex/v4/core-data/Writable/InsecureSecrets/DB/path"
          - "edgex/v4/core-data/Writable/InsecureSecrets/DB/Secrets/username"
          - "edgex/v4/core-data/Writable/InsecureSecrets/DB/Secrets/password"
          - "edgex/v4/core-data/Writable/PersistData"
          - "edgex/v4/core-data/Writable/LogLevel"
    AddRegistrationRequestExample:
      value:
        apiVersion: "v3"
        registration:
          serviceId: "core-command"
          status: "UNKNOWN"
          host: "edgex-core-command"
          port: 59882
          healthCheck:
            interval: "10s"
            path: "/api/v3/ping"
            type: "http"
    UpdateRegistrationRequestExample:
      value:
        apiVersion: "v3"
        registration:
          serviceId: "core-command"
          host: "edgex-core-command"
          port: 59882
          healthCheck:
            interval: "10s"
            path: "/api/v3/ping"
            type: "http"
    RegistrationResponseExample:
      value:
        apiVersion: "v3"
        statusCode: 200
        registration:
          created: 1657870358212
          modified: 1657870361220
          serviceId: "core-command"
          status: "UP"
          host: "edgex-core-command"
          port: 59882
          healthCheck:
            interval: "3s"
            path: "/api/v3/ping"
            type: "http"
          lastConnected: 1657870361220
    MultiRegistrationsResponseExample:
      value:
        apiVersion: "v3"
        statusCode: 200
        totalCount: 2
        registrations:
          - created: 1657870358212
            modified: 1657871042216
            serviceId: "core-command"
            status: "UP"
            host: "edgex-core-command"
            port: 59882
            healthCheck:
              interval: "10s"
              path: "/api/v3/ping"
              type: "http"
            lastConnected: 1657871042216
          - created: 1657871029592
            modified: 1657871039610
            serviceId: "core-data"
            status: "UP"
            host: "edgex-core-data"
            port: 59880
            healthCheck:
              interval: "10s"
              path: "/api/v3/ping"
              type: "http"
            lastConnected: 1657871039609
paths:
  /kvs/key/{key}:
    get:
      summary: "Returns the values of the specified key prefix."
      parameters:
        - $ref: '#/components/parameters/keyPathParam'
        - $ref: '#/components/parameters/plaintextParam'
        - $ref: '#/components/parameters/keyOnlyParam'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/MultiKVsResponse'
                  - $ref: '#/components/schemas/MultiKeysResponse'
              examples:
                KVExample:
                  $ref: '#/components/examples/KVExample'
                KeyExample:
                  $ref: '#/components/examples/KeyExample'
        '400':
          description: "Request is in an invalid state"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/400Example'
        '404':
          description: "The requested resource does not exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
        '500':
          description: "An unexpected error occurred on the server"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
    put:
      summary: "This endpoint updates the value of the specified key prefix. If no key exists at the given path, the key(s) will be created"
      parameters:
        - $ref: '#/components/parameters/keyPathParam'
        - $ref: '#/components/parameters/flattenParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KVRequest'
            examples:
              KVRequestExample:
                $ref: '#/components/examples/KVRequestExample'
              KVFlattenReqExample:
                $ref: '#/components/examples/KVFlattenReqExample'
        required: true
      responses:
        '200':
          description: "Create/update key successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiKeysResponse'
              examples:
                UpdateKeyRespExample:
                  $ref: '#/components/examples/UpdateKeyRespExample'
                UpdateKeyFlattenRespExample:
                  $ref: '#/components/examples/UpdateKeyFlattenRespExample'
        '400':
          description: "Request is in an invalid state"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/400Example'
        '500':
          description: "An unexpected error occurred on the server"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
    delete:
      summary: "This endpoint deletes the specified key or all keys with the specified prefix."
      parameters:
        - $ref: '#/components/parameters/keyPathParam'
        - $ref: '#/components/parameters/preMatchParam'
      responses:
        '200':
          description: "Delete successful"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiKeysResponse'
              examples:
                KeyExample:
                  $ref: '#/components/examples/KeyExample'
        '404':
          description: "The requested resource does not exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
        '409':
          description: "The requested resource is locked"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                409DeleteExample:
                  $ref: '#/components/examples/409Example'
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /registry:
    post:
      summary: "This endpoint registers a service."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRegistrationRequest'
            examples:
              RegistryRequestExample:
                $ref: '#/components/examples/AddRegistrationRequestExample'
        required: true
      responses:
        '201':
          description: "Created"
        '400':
          description: "Request is in an invalid state"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/400Example'
        '409':
          description: "Conflicted"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                409DeleteExample:
                  $ref: '#/components/examples/409Example'
        '500':
          description: "An unexpected error occurred on the server"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
    put:
      summary: "This endpoint updates the registration data of the service."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRegistrationRequest'
            examples:
              RegistryRequestExample:
                $ref: '#/components/examples/UpdateRegistrationRequestExample'
        required: true
      responses:
        '204':
          description: "Service registration updated successfully"
        '400':
          description: "Request is in an invalid state"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                400Example:
                  $ref: '#/components/examples/400Example'
        '404':
          description: "Service registration data does not exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
        '500':
          description: "An unexpected error occurred on the server"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /registry/serviceId/{serviceId}:
    get:
      summary: "Returns registration by service id."
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
          description: "The id of the service to get."
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationResponse'
              examples:
                RegistrationResponseExample:
                  $ref: '#/components/examples/RegistrationResponseExample'
        '404':
          description: "The requested resource does not exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
    delete:
      summary: "This endpoint deregisters a service by id."
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
          description: "The id of the service you want to deregister."
      responses:
        '204':
          description: "Service deregistered successfully"
        '404':
          description: "The requested resource does not exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /registry/all:
    get:
      summary: "Returns all registrations."
      parameters:
        - $ref: '#/components/parameters/deregisteredParam'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiRegistrationsResponse'
              examples:
                MultiRegistrationsResponseExample:
                  $ref: '#/components/examples/MultiRegistrationsResponseExample'
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'

  /config:
    get:
      summary: "Returns the current configuration of the service."
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
              example:
                apiVersion: "v3"
                config:
                  Writeable:
                    LogLevel: "INFO"
                  Databases:
                    Primary:
                      Username: "meta"
                      Password: "password"
                      Type: "redisdb"
                      Timeout: 5000
                      Host: "edgex-redis"
                      Port: 6379
                      Name: "metadata"
                  Service:
                    BootTimeout: 30000
                    CheckInterval: "10s"
                    Host: "edgex-core-keeper"
                    Port: 59890
                    SeverBindAddr: ""
                    Protocol: "http"
                    StartupMsg: "This is the EdgeX Core Keeper Microservice"
                    MaxResultCount: 50000
                    Timeout: 5000
                  SecretStore:
                    Host: "edgex-secret-store"
                    Port: 8200
                    Path: "v1/secret/edgex/core-metadata/"
                    Protocol: "http"
                    Namespace: ""
                    RootCaCertPath: ""
                    ServerName: "edgex-secret-store"
                    Authentication:
                      AuthType: "X-Vault-Token"
                      AuthToken: ""
                    TokenFile: "/tmp/edgex/secrets/core-metadata/secrets-token.json"
        '500':
          description: "Interval Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /ping:
    get:
      summary: "A simple 'ping' endpoint that can be used as a service healthcheck"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
              example:
                apiVersion: "v3"
                timestamp: "Mon, 02 Jan 2006 15:04:05 MST"
        '500':
          description: "Interval Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
  /version:
    get:
      summary: "A simple 'version' endpoint that will return the current version of the service"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
              example:
                apiVersion: "v3"
                version: "4.0.0"
        '500':
          description: "Interval Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
