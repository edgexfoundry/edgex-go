// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package certificate_authority

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new certificate authority API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for certificate authority API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCa(params *CreateCaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCaCreated, error)

	DeleteCa(params *DeleteCaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCaOK, error)

	DetailCa(params *DetailCaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetailCaOK, error)

	GetCaJWT(params *GetCaJWTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCaJWTOK, error)

	ListCas(params *ListCasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCasOK, error)

	PatchCa(params *PatchCaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchCaOK, error)

	UpdateCa(params *UpdateCaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCaOK, error)

	VerifyCa(params *VerifyCaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VerifyCaOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCa creates a c a

  Creates a CA in an unverified state. Requires admin access.
*/
func (a *Client) CreateCa(params *CreateCaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCaCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCa",
		Method:             "POST",
		PathPattern:        "/cas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCaCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCa: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCa deletes a c a

  Delete a CA by id. Deleting a CA will delete its associated certificate authenticators. This can make it
impossible for identities to authenticate if they no longer have any valid authenticators. Requires admin access.

*/
func (a *Client) DeleteCa(params *DeleteCaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCa",
		Method:             "DELETE",
		PathPattern:        "/cas/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCa: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DetailCa retrieves a single c a

  Retrieves a single CA by id. Requires admin access.
*/
func (a *Client) DetailCa(params *DetailCaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetailCaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetailCaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "detailCa",
		Method:             "GET",
		PathPattern:        "/cas/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DetailCaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DetailCaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for detailCa: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCaJWT retrieves the enrollment JWT for a c a

  For CA auto enrollment, the enrollment JWT is static and provided on each CA resource. This endpoint provides
the jwt as a text response.

*/
func (a *Client) GetCaJWT(params *GetCaJWTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCaJWTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCaJWTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCaJwt",
		Method:             "GET",
		PathPattern:        "/cas/{id}/jwt",
		ProducesMediaTypes: []string{"application/jwt"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCaJWTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCaJWTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCaJwt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCas lists c as

  Retrieves a list of CA resources; supports filtering, sorting, and pagination. Requires admin access.
*/
func (a *Client) ListCas(params *ListCasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCas",
		Method:             "GET",
		PathPattern:        "/cas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCa updates the supplied fields on a c a

  Update only the supplied fields on a CA by id. Requires admin access.
*/
func (a *Client) PatchCa(params *PatchCaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchCaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchCa",
		Method:             "PATCH",
		PathPattern:        "/cas/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchCaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCa: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCa updates all fields on a c a

  Update all fields on a CA by id. Requires admin access.
*/
func (a *Client) UpdateCa(params *UpdateCaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCa",
		Method:             "PUT",
		PathPattern:        "/cas/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCa: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VerifyCa verifies a c a

  Allows a CA to become verified by submitting a certificate in PEM format that has been signed by the target CA.
The common name on the certificate must match the verificationToken property of the CA. Unverfieid CAs can not
be used for enrollment/authentication. Requires admin access.

*/
func (a *Client) VerifyCa(params *VerifyCaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VerifyCaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyCaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "verifyCa",
		Method:             "POST",
		PathPattern:        "/cas/{id}/verify",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerifyCaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerifyCaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verifyCa: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
