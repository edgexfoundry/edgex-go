// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package auth_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new auth policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for auth policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAuthPolicy(params *CreateAuthPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAuthPolicyCreated, error)

	DeleteAuthPolicy(params *DeleteAuthPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAuthPolicyOK, error)

	DetailAuthPolicy(params *DetailAuthPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetailAuthPolicyOK, error)

	ListAuthPolicies(params *ListAuthPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAuthPoliciesOK, error)

	PatchAuthPolicy(params *PatchAuthPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchAuthPolicyOK, error)

	UpdateAuthPolicy(params *UpdateAuthPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAuthPolicyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAuthPolicy creates an auth policy

  Creates an Auth Policy. Requires admin access.
*/
func (a *Client) CreateAuthPolicy(params *CreateAuthPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAuthPolicyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAuthPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAuthPolicy",
		Method:             "POST",
		PathPattern:        "/auth-policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAuthPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAuthPolicyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAuthPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAuthPolicy deletes an auth policy

  Delete an Auth Policy by id. Requires admin access.

*/
func (a *Client) DeleteAuthPolicy(params *DeleteAuthPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAuthPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuthPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAuthPolicy",
		Method:             "DELETE",
		PathPattern:        "/auth-policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuthPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAuthPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAuthPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DetailAuthPolicy retrieves a single auth policy

  Retrieves a single Auth Policy by id. Requires admin access.
*/
func (a *Client) DetailAuthPolicy(params *DetailAuthPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetailAuthPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetailAuthPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "detailAuthPolicy",
		Method:             "GET",
		PathPattern:        "/auth-policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DetailAuthPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DetailAuthPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for detailAuthPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAuthPolicies lists auth policies

  Retrieves a list of Auth Policies
*/
func (a *Client) ListAuthPolicies(params *ListAuthPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAuthPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAuthPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAuthPolicies",
		Method:             "GET",
		PathPattern:        "/auth-policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAuthPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAuthPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAuthPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAuthPolicy updates the supplied fields on an auth policy

  Update only the supplied fields on an Auth Policy by id. Requires admin access.
*/
func (a *Client) PatchAuthPolicy(params *PatchAuthPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchAuthPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAuthPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchAuthPolicy",
		Method:             "PATCH",
		PathPattern:        "/auth-policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAuthPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAuthPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchAuthPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAuthPolicy updates all fields on an auth policy

  Update all fields on an Auth Policy by id. Requires admin access.
*/
func (a *Client) UpdateAuthPolicy(params *UpdateAuthPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAuthPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAuthPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAuthPolicy",
		Method:             "PUT",
		PathPattern:        "/auth-policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAuthPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAuthPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAuthPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
