// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package api_session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new api session API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for api session API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPISessions(params *DeleteAPISessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAPISessionsOK, error)

	DetailAPISessions(params *DetailAPISessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetailAPISessionsOK, error)

	ListAPISessions(params *ListAPISessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAPISessionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPISessions deletes an API sessions

  Deletes and API sesion by id. Requires admin access.
*/
func (a *Client) DeleteAPISessions(params *DeleteAPISessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAPISessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPISessionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAPISessions",
		Method:             "DELETE",
		PathPattern:        "/api-sessions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPISessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPISessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAPISessions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DetailAPISessions retrieves a single API session

  Retrieves a single API Session by id. Requires admin access.
*/
func (a *Client) DetailAPISessions(params *DetailAPISessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetailAPISessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetailAPISessionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "detailAPISessions",
		Method:             "GET",
		PathPattern:        "/api-sessions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DetailAPISessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DetailAPISessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for detailAPISessions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAPISessions lists active API sessions

  Returns a list of active API sessions. The resources can be sorted, filtered, and paginated. This endpoint
requires admin access.

*/
func (a *Client) ListAPISessions(params *ListAPISessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAPISessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAPISessionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAPISessions",
		Method:             "GET",
		PathPattern:        "/api-sessions",
		ProducesMediaTypes: []string{"application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAPISessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAPISessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAPISessions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
