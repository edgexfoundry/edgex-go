// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/openziti/edge-api/rest_model"
)

// NewPatchServiceParams creates a new PatchServiceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchServiceParams() *PatchServiceParams {
	return &PatchServiceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchServiceParamsWithTimeout creates a new PatchServiceParams object
// with the ability to set a timeout on a request.
func NewPatchServiceParamsWithTimeout(timeout time.Duration) *PatchServiceParams {
	return &PatchServiceParams{
		timeout: timeout,
	}
}

// NewPatchServiceParamsWithContext creates a new PatchServiceParams object
// with the ability to set a context for a request.
func NewPatchServiceParamsWithContext(ctx context.Context) *PatchServiceParams {
	return &PatchServiceParams{
		Context: ctx,
	}
}

// NewPatchServiceParamsWithHTTPClient creates a new PatchServiceParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchServiceParamsWithHTTPClient(client *http.Client) *PatchServiceParams {
	return &PatchServiceParams{
		HTTPClient: client,
	}
}

/* PatchServiceParams contains all the parameters to send to the API endpoint
   for the patch service operation.

   Typically these are written to a http.Request.
*/
type PatchServiceParams struct {

	/* ID.

	   The id of the requested resource
	*/
	ID string

	/* Service.

	   A service patch object
	*/
	Service *rest_model.ServicePatch

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch service params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchServiceParams) WithDefaults() *PatchServiceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch service params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchServiceParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the patch service params
func (o *PatchServiceParams) WithTimeout(timeout time.Duration) *PatchServiceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch service params
func (o *PatchServiceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch service params
func (o *PatchServiceParams) WithContext(ctx context.Context) *PatchServiceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch service params
func (o *PatchServiceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch service params
func (o *PatchServiceParams) WithHTTPClient(client *http.Client) *PatchServiceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch service params
func (o *PatchServiceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the patch service params
func (o *PatchServiceParams) WithID(id string) *PatchServiceParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the patch service params
func (o *PatchServiceParams) SetID(id string) {
	o.ID = id
}

// WithService adds the service to the patch service params
func (o *PatchServiceParams) WithService(service *rest_model.ServicePatch) *PatchServiceParams {
	o.SetService(service)
	return o
}

// SetService adds the service to the patch service params
func (o *PatchServiceParams) SetService(service *rest_model.ServicePatch) {
	o.Service = service
}

// WriteToRequest writes these params to a swagger request
func (o *PatchServiceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}
	if o.Service != nil {
		if err := r.SetBodyParam(o.Service); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
