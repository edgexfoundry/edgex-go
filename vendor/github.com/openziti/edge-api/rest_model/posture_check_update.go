// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package rest_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostureCheckUpdate posture check update
//
// swagger:discriminator postureCheckUpdate typeId
type PostureCheckUpdate interface {
	runtime.Validatable
	runtime.ContextValidatable

	// name
	// Required: true
	Name() *string
	SetName(*string)

	// role attributes
	RoleAttributes() *Attributes
	SetRoleAttributes(*Attributes)

	// tags
	Tags() *Tags
	SetTags(*Tags)

	// type Id
	TypeID() PostureCheckType
	SetTypeID(PostureCheckType)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type postureCheckUpdate struct {
	nameField *string

	roleAttributesField *Attributes

	tagsField *Tags

	typeIdField PostureCheckType
}

// Name gets the name of this polymorphic type
func (m *postureCheckUpdate) Name() *string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *postureCheckUpdate) SetName(val *string) {
	m.nameField = val
}

// RoleAttributes gets the role attributes of this polymorphic type
func (m *postureCheckUpdate) RoleAttributes() *Attributes {
	return m.roleAttributesField
}

// SetRoleAttributes sets the role attributes of this polymorphic type
func (m *postureCheckUpdate) SetRoleAttributes(val *Attributes) {
	m.roleAttributesField = val
}

// Tags gets the tags of this polymorphic type
func (m *postureCheckUpdate) Tags() *Tags {
	return m.tagsField
}

// SetTags sets the tags of this polymorphic type
func (m *postureCheckUpdate) SetTags(val *Tags) {
	m.tagsField = val
}

// TypeID gets the type Id of this polymorphic type
func (m *postureCheckUpdate) TypeID() PostureCheckType {
	return "postureCheckUpdate"
}

// SetTypeID sets the type Id of this polymorphic type
func (m *postureCheckUpdate) SetTypeID(val PostureCheckType) {
}

// UnmarshalPostureCheckUpdateSlice unmarshals polymorphic slices of PostureCheckUpdate
func UnmarshalPostureCheckUpdateSlice(reader io.Reader, consumer runtime.Consumer) ([]PostureCheckUpdate, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []PostureCheckUpdate
	for _, element := range elements {
		obj, err := unmarshalPostureCheckUpdate(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalPostureCheckUpdate unmarshals polymorphic PostureCheckUpdate
func UnmarshalPostureCheckUpdate(reader io.Reader, consumer runtime.Consumer) (PostureCheckUpdate, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalPostureCheckUpdate(data, consumer)
}

func unmarshalPostureCheckUpdate(data []byte, consumer runtime.Consumer) (PostureCheckUpdate, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the typeId property.
	var getType struct {
		TypeID string `json:"typeId"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("typeId", "body", getType.TypeID); err != nil {
		return nil, err
	}

	// The value of typeId is used to determine which type to create and unmarshal the data into
	switch getType.TypeID {
	case "DOMAIN":
		var result PostureCheckDomainUpdate
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "MAC":
		var result PostureCheckMacAddressUpdate
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "MFA":
		var result PostureCheckMfaUpdate
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "OS":
		var result PostureCheckOperatingSystemUpdate
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "PROCESS":
		var result PostureCheckProcessUpdate
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "PROCESS_MULTI":
		var result PostureCheckProcessMultiUpdate
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "postureCheckUpdate":
		var result postureCheckUpdate
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid typeId value: %q", getType.TypeID)
}

// Validate validates this posture check update
func (m *postureCheckUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *postureCheckUpdate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}

func (m *postureCheckUpdate) validateRoleAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleAttributes()) { // not required
		return nil
	}

	if m.RoleAttributes() != nil {
		if err := m.RoleAttributes().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roleAttributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roleAttributes")
			}
			return err
		}
	}

	return nil
}

func (m *postureCheckUpdate) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags()) { // not required
		return nil
	}

	if m.Tags() != nil {
		if err := m.Tags().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this posture check update based on the context it is used
func (m *postureCheckUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoleAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *postureCheckUpdate) contextValidateRoleAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.RoleAttributes() != nil {
		if err := m.RoleAttributes().ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roleAttributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roleAttributes")
			}
			return err
		}
	}

	return nil
}

func (m *postureCheckUpdate) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	if m.Tags() != nil {
		if err := m.Tags().ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

func (m *postureCheckUpdate) contextValidateTypeID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TypeID().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("typeId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("typeId")
		}
		return err
	}

	return nil
}
