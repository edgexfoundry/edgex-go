// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package rest_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuthPolicyPrimaryExtJWTPatch auth policy primary ext Jwt patch
//
// swagger:model authPolicyPrimaryExtJwtPatch
type AuthPolicyPrimaryExtJWTPatch struct {

	// allowed
	Allowed *bool `json:"allowed,omitempty"`

	// allowed signers
	AllowedSigners []string `json:"allowedSigners"`
}

// Validate validates this auth policy primary ext Jwt patch
func (m *AuthPolicyPrimaryExtJWTPatch) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this auth policy primary ext Jwt patch based on context it is used
func (m *AuthPolicyPrimaryExtJWTPatch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuthPolicyPrimaryExtJWTPatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthPolicyPrimaryExtJWTPatch) UnmarshalBinary(b []byte) error {
	var res AuthPolicyPrimaryExtJWTPatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
