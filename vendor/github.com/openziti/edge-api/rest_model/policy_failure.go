// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package rest_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicyFailure policy failure
//
// swagger:model policyFailure
type PolicyFailure struct {
	checksField []PostureCheckFailure

	// policy Id
	PolicyID string `json:"policyId,omitempty"`

	// policy name
	PolicyName string `json:"policyName,omitempty"`
}

// Checks gets the checks of this base type
func (m *PolicyFailure) Checks() []PostureCheckFailure {
	return m.checksField
}

// SetChecks sets the checks of this base type
func (m *PolicyFailure) SetChecks(val []PostureCheckFailure) {
	m.checksField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *PolicyFailure) UnmarshalJSON(raw []byte) error {
	var data struct {
		Checks json.RawMessage `json:"checks"`

		PolicyID string `json:"policyId,omitempty"`

		PolicyName string `json:"policyName,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var propChecks []PostureCheckFailure
	if string(data.Checks) != "null" {
		checks, err := UnmarshalPostureCheckFailureSlice(bytes.NewBuffer(data.Checks), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		propChecks = checks
	}

	var result PolicyFailure

	// checks
	result.checksField = propChecks

	// policyId
	result.PolicyID = data.PolicyID

	// policyName
	result.PolicyName = data.PolicyName

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m PolicyFailure) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		PolicyID string `json:"policyId,omitempty"`

		PolicyName string `json:"policyName,omitempty"`
	}{

		PolicyID: m.PolicyID,

		PolicyName: m.PolicyName,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Checks []PostureCheckFailure `json:"checks"`
	}{

		Checks: m.checksField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this policy failure
func (m *PolicyFailure) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChecks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyFailure) validateChecks(formats strfmt.Registry) error {
	if swag.IsZero(m.Checks()) { // not required
		return nil
	}

	for i := 0; i < len(m.Checks()); i++ {

		if err := m.checksField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("checks" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("checks" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this policy failure based on the context it is used
func (m *PolicyFailure) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChecks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyFailure) contextValidateChecks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Checks()); i++ {

		if err := m.checksField[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("checks" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("checks" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyFailure) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyFailure) UnmarshalBinary(b []byte) error {
	var res PolicyFailure
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
