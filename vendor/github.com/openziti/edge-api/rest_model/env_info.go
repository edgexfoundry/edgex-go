// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package rest_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvInfo Environment information an authenticating client may provide
//
// swagger:model envInfo
type EnvInfo struct {

	// arch
	// Max Length: 255
	Arch string `json:"arch,omitempty"`

	// domain
	// Max Length: 253
	Domain string `json:"domain,omitempty"`

	// hostname
	// Max Length: 253
	Hostname string `json:"hostname,omitempty"`

	// os
	// Max Length: 255
	Os string `json:"os,omitempty"`

	// os release
	// Max Length: 255
	OsRelease string `json:"osRelease,omitempty"`

	// os version
	// Max Length: 255
	OsVersion string `json:"osVersion,omitempty"`
}

// Validate validates this env info
func (m *EnvInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsRelease(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvInfo) validateArch(formats strfmt.Registry) error {
	if swag.IsZero(m.Arch) { // not required
		return nil
	}

	if err := validate.MaxLength("arch", "body", m.Arch, 255); err != nil {
		return err
	}

	return nil
}

func (m *EnvInfo) validateDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.Domain) { // not required
		return nil
	}

	if err := validate.MaxLength("domain", "body", m.Domain, 253); err != nil {
		return err
	}

	return nil
}

func (m *EnvInfo) validateHostname(formats strfmt.Registry) error {
	if swag.IsZero(m.Hostname) { // not required
		return nil
	}

	if err := validate.MaxLength("hostname", "body", m.Hostname, 253); err != nil {
		return err
	}

	return nil
}

func (m *EnvInfo) validateOs(formats strfmt.Registry) error {
	if swag.IsZero(m.Os) { // not required
		return nil
	}

	if err := validate.MaxLength("os", "body", m.Os, 255); err != nil {
		return err
	}

	return nil
}

func (m *EnvInfo) validateOsRelease(formats strfmt.Registry) error {
	if swag.IsZero(m.OsRelease) { // not required
		return nil
	}

	if err := validate.MaxLength("osRelease", "body", m.OsRelease, 255); err != nil {
		return err
	}

	return nil
}

func (m *EnvInfo) validateOsVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.OsVersion) { // not required
		return nil
	}

	if err := validate.MaxLength("osVersion", "body", m.OsVersion, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this env info based on context it is used
func (m *EnvInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnvInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvInfo) UnmarshalBinary(b []byte) error {
	var res EnvInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
