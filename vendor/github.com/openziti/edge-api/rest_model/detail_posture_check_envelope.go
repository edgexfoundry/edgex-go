// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package rest_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DetailPostureCheckEnvelope detail posture check envelope
//
// swagger:model detailPostureCheckEnvelope
type DetailPostureCheckEnvelope struct {
	dataField PostureCheckDetail

	// meta
	// Required: true
	Meta *Meta `json:"meta"`
}

// Data gets the data of this base type
func (m *DetailPostureCheckEnvelope) Data() PostureCheckDetail {
	return m.dataField
}

// SetData sets the data of this base type
func (m *DetailPostureCheckEnvelope) SetData(val PostureCheckDetail) {
	m.dataField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *DetailPostureCheckEnvelope) UnmarshalJSON(raw []byte) error {
	var data struct {
		Data json.RawMessage `json:"data"`

		Meta *Meta `json:"meta"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	propData, err := UnmarshalPostureCheckDetail(bytes.NewBuffer(data.Data), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result DetailPostureCheckEnvelope

	// data
	result.dataField = propData

	// meta
	result.Meta = data.Meta

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m DetailPostureCheckEnvelope) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		Meta *Meta `json:"meta"`
	}{

		Meta: m.Meta,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Data PostureCheckDetail `json:"data"`
	}{

		Data: m.dataField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this detail posture check envelope
func (m *DetailPostureCheckEnvelope) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetailPostureCheckEnvelope) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data()); err != nil {
		return err
	}

	if err := m.Data().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("data")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("data")
		}
		return err
	}

	return nil
}

func (m *DetailPostureCheckEnvelope) validateMeta(formats strfmt.Registry) error {

	if err := validate.Required("meta", "body", m.Meta); err != nil {
		return err
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this detail posture check envelope based on the context it is used
func (m *DetailPostureCheckEnvelope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetailPostureCheckEnvelope) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Data().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("data")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("data")
		}
		return err
	}

	return nil
}

func (m *DetailPostureCheckEnvelope) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.Meta != nil {
		if err := m.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DetailPostureCheckEnvelope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DetailPostureCheckEnvelope) UnmarshalBinary(b []byte) error {
	var res DetailPostureCheckEnvelope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
