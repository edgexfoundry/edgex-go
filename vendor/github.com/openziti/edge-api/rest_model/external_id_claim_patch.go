// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package rest_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExternalIDClaimPatch external Id claim patch
//
// swagger:model externalIdClaimPatch
type ExternalIDClaimPatch struct {

	// index
	Index *int64 `json:"index,omitempty"`

	// location
	// Enum: [COMMON_NAME SAN_URI SAN_EMAIL]
	Location *string `json:"location,omitempty"`

	// matcher
	// Enum: [ALL PREFIX SUFFIX SCHEME]
	Matcher *string `json:"matcher,omitempty"`

	// matcher criteria
	MatcherCriteria *string `json:"matcherCriteria,omitempty"`

	// parser
	// Enum: [NONE SPLIT]
	Parser *string `json:"parser,omitempty"`

	// parser criteria
	ParserCriteria *string `json:"parserCriteria,omitempty"`
}

// Validate validates this external Id claim patch
func (m *ExternalIDClaimPatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatcher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var externalIdClaimPatchTypeLocationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["COMMON_NAME","SAN_URI","SAN_EMAIL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		externalIdClaimPatchTypeLocationPropEnum = append(externalIdClaimPatchTypeLocationPropEnum, v)
	}
}

const (

	// ExternalIDClaimPatchLocationCOMMONNAME captures enum value "COMMON_NAME"
	ExternalIDClaimPatchLocationCOMMONNAME string = "COMMON_NAME"

	// ExternalIDClaimPatchLocationSANURI captures enum value "SAN_URI"
	ExternalIDClaimPatchLocationSANURI string = "SAN_URI"

	// ExternalIDClaimPatchLocationSANEMAIL captures enum value "SAN_EMAIL"
	ExternalIDClaimPatchLocationSANEMAIL string = "SAN_EMAIL"
)

// prop value enum
func (m *ExternalIDClaimPatch) validateLocationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, externalIdClaimPatchTypeLocationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExternalIDClaimPatch) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	// value enum
	if err := m.validateLocationEnum("location", "body", *m.Location); err != nil {
		return err
	}

	return nil
}

var externalIdClaimPatchTypeMatcherPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALL","PREFIX","SUFFIX","SCHEME"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		externalIdClaimPatchTypeMatcherPropEnum = append(externalIdClaimPatchTypeMatcherPropEnum, v)
	}
}

const (

	// ExternalIDClaimPatchMatcherALL captures enum value "ALL"
	ExternalIDClaimPatchMatcherALL string = "ALL"

	// ExternalIDClaimPatchMatcherPREFIX captures enum value "PREFIX"
	ExternalIDClaimPatchMatcherPREFIX string = "PREFIX"

	// ExternalIDClaimPatchMatcherSUFFIX captures enum value "SUFFIX"
	ExternalIDClaimPatchMatcherSUFFIX string = "SUFFIX"

	// ExternalIDClaimPatchMatcherSCHEME captures enum value "SCHEME"
	ExternalIDClaimPatchMatcherSCHEME string = "SCHEME"
)

// prop value enum
func (m *ExternalIDClaimPatch) validateMatcherEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, externalIdClaimPatchTypeMatcherPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExternalIDClaimPatch) validateMatcher(formats strfmt.Registry) error {
	if swag.IsZero(m.Matcher) { // not required
		return nil
	}

	// value enum
	if err := m.validateMatcherEnum("matcher", "body", *m.Matcher); err != nil {
		return err
	}

	return nil
}

var externalIdClaimPatchTypeParserPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","SPLIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		externalIdClaimPatchTypeParserPropEnum = append(externalIdClaimPatchTypeParserPropEnum, v)
	}
}

const (

	// ExternalIDClaimPatchParserNONE captures enum value "NONE"
	ExternalIDClaimPatchParserNONE string = "NONE"

	// ExternalIDClaimPatchParserSPLIT captures enum value "SPLIT"
	ExternalIDClaimPatchParserSPLIT string = "SPLIT"
)

// prop value enum
func (m *ExternalIDClaimPatch) validateParserEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, externalIdClaimPatchTypeParserPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExternalIDClaimPatch) validateParser(formats strfmt.Registry) error {
	if swag.IsZero(m.Parser) { // not required
		return nil
	}

	// value enum
	if err := m.validateParserEnum("parser", "body", *m.Parser); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this external Id claim patch based on context it is used
func (m *ExternalIDClaimPatch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExternalIDClaimPatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExternalIDClaimPatch) UnmarshalBinary(b []byte) error {
	var res ExternalIDClaimPatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
