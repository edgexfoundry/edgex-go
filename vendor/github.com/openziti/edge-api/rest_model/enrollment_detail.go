// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package rest_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnrollmentDetail An enrollment object. Enrollments are tied to identities and potentially a CA. Depending on the
// method, different fields are utilized. For example ottca enrollments use the `ca` field and updb enrollments
// use the username field, but not vice versa.
//
// Example: {"_links":{"self":{"href":"./enrollments/624fa53f-7629-4a7a-9e38-c1f4ce322c1d"}},"ca":null,"createdAt":"0001-01-01T00:00:00Z","expiresAt":"2020-03-11T20:20:24.0055543Z","id":"624fa53f-7629-4a7a-9e38-c1f4ce322c1d","identity":{"_links":{"self":{"href":"./identities/f047ac96-dc3a-408a-a6f2-0ba487c08ef9"}},"id":"f047ac96-dc3a-408a-a6f2-0ba487c08ef9","name":"updb--0f245140-7f2e-4326-badf-6aba55e52475","urlName":"identities"},"method":"updb","tags":null,"token":"1e727c8f-07e4-4a1d-a8b0-da0c7a01c6e1","updatedAt":"0001-01-01T00:00:00Z","username":"example-username"}
//
// swagger:model enrollmentDetail
type EnrollmentDetail struct {
	BaseEntity

	// ca Id
	CaID *string `json:"caId,omitempty"`

	// edge router
	EdgeRouter *EntityRef `json:"edgeRouter,omitempty"`

	// edge router Id
	EdgeRouterID string `json:"edgeRouterId,omitempty"`

	// expires at
	// Required: true
	// Format: date-time
	ExpiresAt *strfmt.DateTime `json:"expiresAt"`

	// identity
	Identity *EntityRef `json:"identity,omitempty"`

	// identity Id
	IdentityID string `json:"identityId,omitempty"`

	// jwt
	JWT string `json:"jwt,omitempty"`

	// method
	// Required: true
	Method *string `json:"method"`

	// token
	// Required: true
	Token *string `json:"token"`

	// transit router
	TransitRouter *EntityRef `json:"transitRouter,omitempty"`

	// transit router Id
	TransitRouterID string `json:"transitRouterId,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *EnrollmentDetail) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseEntity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseEntity = aO0

	// AO1
	var dataAO1 struct {
		CaID *string `json:"caId,omitempty"`

		EdgeRouter *EntityRef `json:"edgeRouter,omitempty"`

		EdgeRouterID string `json:"edgeRouterId,omitempty"`

		ExpiresAt *strfmt.DateTime `json:"expiresAt"`

		Identity *EntityRef `json:"identity,omitempty"`

		IdentityID string `json:"identityId,omitempty"`

		JWT string `json:"jwt,omitempty"`

		Method *string `json:"method"`

		Token *string `json:"token"`

		TransitRouter *EntityRef `json:"transitRouter,omitempty"`

		TransitRouterID string `json:"transitRouterId,omitempty"`

		Username string `json:"username,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CaID = dataAO1.CaID

	m.EdgeRouter = dataAO1.EdgeRouter

	m.EdgeRouterID = dataAO1.EdgeRouterID

	m.ExpiresAt = dataAO1.ExpiresAt

	m.Identity = dataAO1.Identity

	m.IdentityID = dataAO1.IdentityID

	m.JWT = dataAO1.JWT

	m.Method = dataAO1.Method

	m.Token = dataAO1.Token

	m.TransitRouter = dataAO1.TransitRouter

	m.TransitRouterID = dataAO1.TransitRouterID

	m.Username = dataAO1.Username

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m EnrollmentDetail) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseEntity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CaID *string `json:"caId,omitempty"`

		EdgeRouter *EntityRef `json:"edgeRouter,omitempty"`

		EdgeRouterID string `json:"edgeRouterId,omitempty"`

		ExpiresAt *strfmt.DateTime `json:"expiresAt"`

		Identity *EntityRef `json:"identity,omitempty"`

		IdentityID string `json:"identityId,omitempty"`

		JWT string `json:"jwt,omitempty"`

		Method *string `json:"method"`

		Token *string `json:"token"`

		TransitRouter *EntityRef `json:"transitRouter,omitempty"`

		TransitRouterID string `json:"transitRouterId,omitempty"`

		Username string `json:"username,omitempty"`
	}

	dataAO1.CaID = m.CaID

	dataAO1.EdgeRouter = m.EdgeRouter

	dataAO1.EdgeRouterID = m.EdgeRouterID

	dataAO1.ExpiresAt = m.ExpiresAt

	dataAO1.Identity = m.Identity

	dataAO1.IdentityID = m.IdentityID

	dataAO1.JWT = m.JWT

	dataAO1.Method = m.Method

	dataAO1.Token = m.Token

	dataAO1.TransitRouter = m.TransitRouter

	dataAO1.TransitRouterID = m.TransitRouterID

	dataAO1.Username = m.Username

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this enrollment detail
func (m *EnrollmentDetail) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseEntity
	if err := m.BaseEntity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeRouter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransitRouter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnrollmentDetail) validateEdgeRouter(formats strfmt.Registry) error {

	if swag.IsZero(m.EdgeRouter) { // not required
		return nil
	}

	if m.EdgeRouter != nil {
		if err := m.EdgeRouter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeRouter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edgeRouter")
			}
			return err
		}
	}

	return nil
}

func (m *EnrollmentDetail) validateExpiresAt(formats strfmt.Registry) error {

	if err := validate.Required("expiresAt", "body", m.ExpiresAt); err != nil {
		return err
	}

	if err := validate.FormatOf("expiresAt", "body", "date-time", m.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EnrollmentDetail) validateIdentity(formats strfmt.Registry) error {

	if swag.IsZero(m.Identity) { // not required
		return nil
	}

	if m.Identity != nil {
		if err := m.Identity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity")
			}
			return err
		}
	}

	return nil
}

func (m *EnrollmentDetail) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	return nil
}

func (m *EnrollmentDetail) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

func (m *EnrollmentDetail) validateTransitRouter(formats strfmt.Registry) error {

	if swag.IsZero(m.TransitRouter) { // not required
		return nil
	}

	if m.TransitRouter != nil {
		if err := m.TransitRouter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transitRouter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transitRouter")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this enrollment detail based on the context it is used
func (m *EnrollmentDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseEntity
	if err := m.BaseEntity.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeRouter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransitRouter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnrollmentDetail) contextValidateEdgeRouter(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeRouter != nil {
		if err := m.EdgeRouter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeRouter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edgeRouter")
			}
			return err
		}
	}

	return nil
}

func (m *EnrollmentDetail) contextValidateIdentity(ctx context.Context, formats strfmt.Registry) error {

	if m.Identity != nil {
		if err := m.Identity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity")
			}
			return err
		}
	}

	return nil
}

func (m *EnrollmentDetail) contextValidateTransitRouter(ctx context.Context, formats strfmt.Registry) error {

	if m.TransitRouter != nil {
		if err := m.TransitRouter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transitRouter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transitRouter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnrollmentDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnrollmentDetail) UnmarshalBinary(b []byte) error {
	var res EnrollmentDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
