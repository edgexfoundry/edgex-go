// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package rest_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AuthQueryType auth query type
//
// swagger:model authQueryType
type AuthQueryType string

func NewAuthQueryType(value AuthQueryType) *AuthQueryType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AuthQueryType.
func (m AuthQueryType) Pointer() *AuthQueryType {
	return &m
}

const (

	// AuthQueryTypeMFA captures enum value "MFA"
	AuthQueryTypeMFA AuthQueryType = "MFA"

	// AuthQueryTypeTOTP captures enum value "TOTP"
	AuthQueryTypeTOTP AuthQueryType = "TOTP"

	// AuthQueryTypeEXTDashJWT captures enum value "EXT-JWT"
	AuthQueryTypeEXTDashJWT AuthQueryType = "EXT-JWT"
)

// for schema
var authQueryTypeEnum []interface{}

func init() {
	var res []AuthQueryType
	if err := json.Unmarshal([]byte(`["MFA","TOTP","EXT-JWT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authQueryTypeEnum = append(authQueryTypeEnum, v)
	}
}

func (m AuthQueryType) validateAuthQueryTypeEnum(path, location string, value AuthQueryType) error {
	if err := validate.EnumCase(path, location, value, authQueryTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this auth query type
func (m AuthQueryType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAuthQueryTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this auth query type based on context it is used
func (m AuthQueryType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
