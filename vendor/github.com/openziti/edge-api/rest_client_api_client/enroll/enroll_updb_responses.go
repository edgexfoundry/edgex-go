// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package enroll

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openziti/edge-api/rest_model"
)

// EnrollUpdbReader is a Reader for the EnrollUpdb structure.
type EnrollUpdbReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnrollUpdbReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnrollUpdbOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewEnrollUpdbNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEnrollUpdbTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewEnrollUpdbServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEnrollUpdbOK creates a EnrollUpdbOK with default headers values
func NewEnrollUpdbOK() *EnrollUpdbOK {
	return &EnrollUpdbOK{}
}

/* EnrollUpdbOK describes a response with status code 200, with default header values.

Base empty response
*/
type EnrollUpdbOK struct {
	Payload *rest_model.Empty
}

func (o *EnrollUpdbOK) Error() string {
	return fmt.Sprintf("[POST /enroll/updb][%d] enrollUpdbOK  %+v", 200, o.Payload)
}
func (o *EnrollUpdbOK) GetPayload() *rest_model.Empty {
	return o.Payload
}

func (o *EnrollUpdbOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.Empty)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnrollUpdbNotFound creates a EnrollUpdbNotFound with default headers values
func NewEnrollUpdbNotFound() *EnrollUpdbNotFound {
	return &EnrollUpdbNotFound{}
}

/* EnrollUpdbNotFound describes a response with status code 404, with default header values.

The requested resource does not exist
*/
type EnrollUpdbNotFound struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *EnrollUpdbNotFound) Error() string {
	return fmt.Sprintf("[POST /enroll/updb][%d] enrollUpdbNotFound  %+v", 404, o.Payload)
}
func (o *EnrollUpdbNotFound) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *EnrollUpdbNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnrollUpdbTooManyRequests creates a EnrollUpdbTooManyRequests with default headers values
func NewEnrollUpdbTooManyRequests() *EnrollUpdbTooManyRequests {
	return &EnrollUpdbTooManyRequests{}
}

/* EnrollUpdbTooManyRequests describes a response with status code 429, with default header values.

The resource requested is rate limited and the rate limit has been exceeded
*/
type EnrollUpdbTooManyRequests struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *EnrollUpdbTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /enroll/updb][%d] enrollUpdbTooManyRequests  %+v", 429, o.Payload)
}
func (o *EnrollUpdbTooManyRequests) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *EnrollUpdbTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnrollUpdbServiceUnavailable creates a EnrollUpdbServiceUnavailable with default headers values
func NewEnrollUpdbServiceUnavailable() *EnrollUpdbServiceUnavailable {
	return &EnrollUpdbServiceUnavailable{}
}

/* EnrollUpdbServiceUnavailable describes a response with status code 503, with default header values.

The request could not be completed due to the server being busy or in a temporarily bad state
*/
type EnrollUpdbServiceUnavailable struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *EnrollUpdbServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /enroll/updb][%d] enrollUpdbServiceUnavailable  %+v", 503, o.Payload)
}
func (o *EnrollUpdbServiceUnavailable) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *EnrollUpdbServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*EnrollUpdbBody enroll updb body
swagger:model EnrollUpdbBody
*/
type EnrollUpdbBody struct {

	// password
	Password rest_model.Password `json:"password,omitempty"`

	// username
	Username rest_model.Username `json:"username,omitempty"`
}

// Validate validates this enroll updb body
func (o *EnrollUpdbBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EnrollUpdbBody) validatePassword(formats strfmt.Registry) error {
	if swag.IsZero(o.Password) { // not required
		return nil
	}

	if err := o.Password.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("updbCredentials" + "." + "password")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("updbCredentials" + "." + "password")
		}
		return err
	}

	return nil
}

func (o *EnrollUpdbBody) validateUsername(formats strfmt.Registry) error {
	if swag.IsZero(o.Username) { // not required
		return nil
	}

	if err := o.Username.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("updbCredentials" + "." + "username")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("updbCredentials" + "." + "username")
		}
		return err
	}

	return nil
}

// ContextValidate validate this enroll updb body based on the context it is used
func (o *EnrollUpdbBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePassword(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUsername(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EnrollUpdbBody) contextValidatePassword(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Password.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("updbCredentials" + "." + "password")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("updbCredentials" + "." + "password")
		}
		return err
	}

	return nil
}

func (o *EnrollUpdbBody) contextValidateUsername(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Username.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("updbCredentials" + "." + "username")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("updbCredentials" + "." + "username")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *EnrollUpdbBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EnrollUpdbBody) UnmarshalBinary(b []byte) error {
	var res EnrollUpdbBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
