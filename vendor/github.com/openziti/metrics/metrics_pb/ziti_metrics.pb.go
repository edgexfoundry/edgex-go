// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: ziti_metrics.proto

package metrics_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContentType int32

const (
	ContentType_Zero        ContentType = 0
	ContentType_MetricsType ContentType = 1007 // see ziti-fabric/pb/ctrl_pb/ctrl.proto
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0:    "Zero",
		1007: "MetricsType",
	}
	ContentType_value = map[string]int32{
		"Zero":        0,
		"MetricsType": 1007,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_ziti_metrics_proto_enumTypes[0].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_ziti_metrics_proto_enumTypes[0]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_ziti_metrics_proto_rawDescGZIP(), []int{0}
}

type MetricsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId          string                                     `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	SourceId         string                                     `protobuf:"bytes,2,opt,name=sourceId,proto3" json:"sourceId,omitempty"`
	Timestamp        *timestamppb.Timestamp                     `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Tags             map[string]string                          `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IntValues        map[string]int64                           `protobuf:"bytes,5,rep,name=intValues,proto3" json:"intValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FloatValues      map[string]float64                         `protobuf:"bytes,6,rep,name=floatValues,proto3" json:"floatValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Meters           map[string]*MetricsMessage_Meter           `protobuf:"bytes,7,rep,name=meters,proto3" json:"meters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Histograms       map[string]*MetricsMessage_Histogram       `protobuf:"bytes,8,rep,name=histograms,proto3" json:"histograms,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IntervalCounters map[string]*MetricsMessage_IntervalCounter `protobuf:"bytes,9,rep,name=intervalCounters,proto3" json:"intervalCounters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timers           map[string]*MetricsMessage_Timer           `protobuf:"bytes,10,rep,name=timers,proto3" json:"timers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UsageCounters    []*MetricsMessage_UsageCounter             `protobuf:"bytes,11,rep,name=usageCounters,proto3" json:"usageCounters,omitempty"`
	DoNotPropagate   bool                                       `protobuf:"varint,12,opt,name=doNotPropagate,proto3" json:"doNotPropagate,omitempty"` // if set to true, some other controller has already propagated this event
}

func (x *MetricsMessage) Reset() {
	*x = MetricsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ziti_metrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsMessage) ProtoMessage() {}

func (x *MetricsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ziti_metrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsMessage.ProtoReflect.Descriptor instead.
func (*MetricsMessage) Descriptor() ([]byte, []int) {
	return file_ziti_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *MetricsMessage) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *MetricsMessage) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *MetricsMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MetricsMessage) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MetricsMessage) GetIntValues() map[string]int64 {
	if x != nil {
		return x.IntValues
	}
	return nil
}

func (x *MetricsMessage) GetFloatValues() map[string]float64 {
	if x != nil {
		return x.FloatValues
	}
	return nil
}

func (x *MetricsMessage) GetMeters() map[string]*MetricsMessage_Meter {
	if x != nil {
		return x.Meters
	}
	return nil
}

func (x *MetricsMessage) GetHistograms() map[string]*MetricsMessage_Histogram {
	if x != nil {
		return x.Histograms
	}
	return nil
}

func (x *MetricsMessage) GetIntervalCounters() map[string]*MetricsMessage_IntervalCounter {
	if x != nil {
		return x.IntervalCounters
	}
	return nil
}

func (x *MetricsMessage) GetTimers() map[string]*MetricsMessage_Timer {
	if x != nil {
		return x.Timers
	}
	return nil
}

func (x *MetricsMessage) GetUsageCounters() []*MetricsMessage_UsageCounter {
	if x != nil {
		return x.UsageCounters
	}
	return nil
}

func (x *MetricsMessage) GetDoNotPropagate() bool {
	if x != nil {
		return x.DoNotPropagate
	}
	return false
}

type MetricsMessage_Meter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    int64   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	M1Rate   float64 `protobuf:"fixed64,2,opt,name=m1Rate,proto3" json:"m1Rate,omitempty"`
	M5Rate   float64 `protobuf:"fixed64,3,opt,name=m5Rate,proto3" json:"m5Rate,omitempty"`
	M15Rate  float64 `protobuf:"fixed64,4,opt,name=m15Rate,proto3" json:"m15Rate,omitempty"`
	MeanRate float64 `protobuf:"fixed64,5,opt,name=meanRate,proto3" json:"meanRate,omitempty"`
}

func (x *MetricsMessage_Meter) Reset() {
	*x = MetricsMessage_Meter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ziti_metrics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsMessage_Meter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsMessage_Meter) ProtoMessage() {}

func (x *MetricsMessage_Meter) ProtoReflect() protoreflect.Message {
	mi := &file_ziti_metrics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsMessage_Meter.ProtoReflect.Descriptor instead.
func (*MetricsMessage_Meter) Descriptor() ([]byte, []int) {
	return file_ziti_metrics_proto_rawDescGZIP(), []int{0, 7}
}

func (x *MetricsMessage_Meter) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MetricsMessage_Meter) GetM1Rate() float64 {
	if x != nil {
		return x.M1Rate
	}
	return 0
}

func (x *MetricsMessage_Meter) GetM5Rate() float64 {
	if x != nil {
		return x.M5Rate
	}
	return 0
}

func (x *MetricsMessage_Meter) GetM15Rate() float64 {
	if x != nil {
		return x.M15Rate
	}
	return 0
}

func (x *MetricsMessage_Meter) GetMeanRate() float64 {
	if x != nil {
		return x.MeanRate
	}
	return 0
}

type MetricsMessage_Histogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    int64   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Max      int64   `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	Mean     float64 `protobuf:"fixed64,3,opt,name=mean,proto3" json:"mean,omitempty"`
	Min      int64   `protobuf:"varint,4,opt,name=min,proto3" json:"min,omitempty"`
	StdDev   float64 `protobuf:"fixed64,5,opt,name=stdDev,proto3" json:"stdDev,omitempty"`
	Variance float64 `protobuf:"fixed64,6,opt,name=variance,proto3" json:"variance,omitempty"`
	P50      float64 `protobuf:"fixed64,7,opt,name=p50,proto3" json:"p50,omitempty"`
	P75      float64 `protobuf:"fixed64,8,opt,name=p75,proto3" json:"p75,omitempty"`
	P95      float64 `protobuf:"fixed64,9,opt,name=p95,proto3" json:"p95,omitempty"`
	P99      float64 `protobuf:"fixed64,10,opt,name=p99,proto3" json:"p99,omitempty"`
	P999     float64 `protobuf:"fixed64,11,opt,name=p999,proto3" json:"p999,omitempty"`
	P9999    float64 `protobuf:"fixed64,12,opt,name=p9999,proto3" json:"p9999,omitempty"`
}

func (x *MetricsMessage_Histogram) Reset() {
	*x = MetricsMessage_Histogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ziti_metrics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsMessage_Histogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsMessage_Histogram) ProtoMessage() {}

func (x *MetricsMessage_Histogram) ProtoReflect() protoreflect.Message {
	mi := &file_ziti_metrics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsMessage_Histogram.ProtoReflect.Descriptor instead.
func (*MetricsMessage_Histogram) Descriptor() ([]byte, []int) {
	return file_ziti_metrics_proto_rawDescGZIP(), []int{0, 8}
}

func (x *MetricsMessage_Histogram) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MetricsMessage_Histogram) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MetricsMessage_Histogram) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *MetricsMessage_Histogram) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MetricsMessage_Histogram) GetStdDev() float64 {
	if x != nil {
		return x.StdDev
	}
	return 0
}

func (x *MetricsMessage_Histogram) GetVariance() float64 {
	if x != nil {
		return x.Variance
	}
	return 0
}

func (x *MetricsMessage_Histogram) GetP50() float64 {
	if x != nil {
		return x.P50
	}
	return 0
}

func (x *MetricsMessage_Histogram) GetP75() float64 {
	if x != nil {
		return x.P75
	}
	return 0
}

func (x *MetricsMessage_Histogram) GetP95() float64 {
	if x != nil {
		return x.P95
	}
	return 0
}

func (x *MetricsMessage_Histogram) GetP99() float64 {
	if x != nil {
		return x.P99
	}
	return 0
}

func (x *MetricsMessage_Histogram) GetP999() float64 {
	if x != nil {
		return x.P999
	}
	return 0
}

func (x *MetricsMessage_Histogram) GetP9999() float64 {
	if x != nil {
		return x.P9999
	}
	return 0
}

type MetricsMessage_Timer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    int64   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Max      int64   `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	Mean     float64 `protobuf:"fixed64,3,opt,name=mean,proto3" json:"mean,omitempty"`
	Min      int64   `protobuf:"varint,4,opt,name=min,proto3" json:"min,omitempty"`
	StdDev   float64 `protobuf:"fixed64,5,opt,name=stdDev,proto3" json:"stdDev,omitempty"`
	Variance float64 `protobuf:"fixed64,6,opt,name=variance,proto3" json:"variance,omitempty"`
	P50      float64 `protobuf:"fixed64,7,opt,name=p50,proto3" json:"p50,omitempty"`
	P75      float64 `protobuf:"fixed64,8,opt,name=p75,proto3" json:"p75,omitempty"`
	P95      float64 `protobuf:"fixed64,9,opt,name=p95,proto3" json:"p95,omitempty"`
	P99      float64 `protobuf:"fixed64,10,opt,name=p99,proto3" json:"p99,omitempty"`
	P999     float64 `protobuf:"fixed64,11,opt,name=p999,proto3" json:"p999,omitempty"`
	P9999    float64 `protobuf:"fixed64,12,opt,name=p9999,proto3" json:"p9999,omitempty"`
	M1Rate   float64 `protobuf:"fixed64,13,opt,name=m1Rate,proto3" json:"m1Rate,omitempty"`
	M5Rate   float64 `protobuf:"fixed64,14,opt,name=m5Rate,proto3" json:"m5Rate,omitempty"`
	M15Rate  float64 `protobuf:"fixed64,15,opt,name=m15Rate,proto3" json:"m15Rate,omitempty"`
	MeanRate float64 `protobuf:"fixed64,16,opt,name=meanRate,proto3" json:"meanRate,omitempty"`
}

func (x *MetricsMessage_Timer) Reset() {
	*x = MetricsMessage_Timer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ziti_metrics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsMessage_Timer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsMessage_Timer) ProtoMessage() {}

func (x *MetricsMessage_Timer) ProtoReflect() protoreflect.Message {
	mi := &file_ziti_metrics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsMessage_Timer.ProtoReflect.Descriptor instead.
func (*MetricsMessage_Timer) Descriptor() ([]byte, []int) {
	return file_ziti_metrics_proto_rawDescGZIP(), []int{0, 9}
}

func (x *MetricsMessage_Timer) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MetricsMessage_Timer) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MetricsMessage_Timer) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *MetricsMessage_Timer) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MetricsMessage_Timer) GetStdDev() float64 {
	if x != nil {
		return x.StdDev
	}
	return 0
}

func (x *MetricsMessage_Timer) GetVariance() float64 {
	if x != nil {
		return x.Variance
	}
	return 0
}

func (x *MetricsMessage_Timer) GetP50() float64 {
	if x != nil {
		return x.P50
	}
	return 0
}

func (x *MetricsMessage_Timer) GetP75() float64 {
	if x != nil {
		return x.P75
	}
	return 0
}

func (x *MetricsMessage_Timer) GetP95() float64 {
	if x != nil {
		return x.P95
	}
	return 0
}

func (x *MetricsMessage_Timer) GetP99() float64 {
	if x != nil {
		return x.P99
	}
	return 0
}

func (x *MetricsMessage_Timer) GetP999() float64 {
	if x != nil {
		return x.P999
	}
	return 0
}

func (x *MetricsMessage_Timer) GetP9999() float64 {
	if x != nil {
		return x.P9999
	}
	return 0
}

func (x *MetricsMessage_Timer) GetM1Rate() float64 {
	if x != nil {
		return x.M1Rate
	}
	return 0
}

func (x *MetricsMessage_Timer) GetM5Rate() float64 {
	if x != nil {
		return x.M5Rate
	}
	return 0
}

func (x *MetricsMessage_Timer) GetM15Rate() float64 {
	if x != nil {
		return x.M15Rate
	}
	return 0
}

func (x *MetricsMessage_Timer) GetMeanRate() float64 {
	if x != nil {
		return x.MeanRate
	}
	return 0
}

type MetricsMessage_IntervalCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntervalLength uint64                           `protobuf:"varint,1,opt,name=intervalLength,proto3" json:"intervalLength,omitempty"`
	Buckets        []*MetricsMessage_IntervalBucket `protobuf:"bytes,2,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *MetricsMessage_IntervalCounter) Reset() {
	*x = MetricsMessage_IntervalCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ziti_metrics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsMessage_IntervalCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsMessage_IntervalCounter) ProtoMessage() {}

func (x *MetricsMessage_IntervalCounter) ProtoReflect() protoreflect.Message {
	mi := &file_ziti_metrics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsMessage_IntervalCounter.ProtoReflect.Descriptor instead.
func (*MetricsMessage_IntervalCounter) Descriptor() ([]byte, []int) {
	return file_ziti_metrics_proto_rawDescGZIP(), []int{0, 10}
}

func (x *MetricsMessage_IntervalCounter) GetIntervalLength() uint64 {
	if x != nil {
		return x.IntervalLength
	}
	return 0
}

func (x *MetricsMessage_IntervalCounter) GetBuckets() []*MetricsMessage_IntervalBucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type MetricsMessage_IntervalBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntervalStartUTC int64             `protobuf:"varint,1,opt,name=intervalStartUTC,proto3" json:"intervalStartUTC,omitempty"` // Only need minute resolution, this will be seconds resolution
	Values           map[string]uint64 `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MetricsMessage_IntervalBucket) Reset() {
	*x = MetricsMessage_IntervalBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ziti_metrics_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsMessage_IntervalBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsMessage_IntervalBucket) ProtoMessage() {}

func (x *MetricsMessage_IntervalBucket) ProtoReflect() protoreflect.Message {
	mi := &file_ziti_metrics_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsMessage_IntervalBucket.ProtoReflect.Descriptor instead.
func (*MetricsMessage_IntervalBucket) Descriptor() ([]byte, []int) {
	return file_ziti_metrics_proto_rawDescGZIP(), []int{0, 11}
}

func (x *MetricsMessage_IntervalBucket) GetIntervalStartUTC() int64 {
	if x != nil {
		return x.IntervalStartUTC
	}
	return 0
}

func (x *MetricsMessage_IntervalBucket) GetValues() map[string]uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type MetricsMessage_UsageCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntervalStartUTC int64                                  `protobuf:"varint,1,opt,name=intervalStartUTC,proto3" json:"intervalStartUTC,omitempty"`
	IntervalLength   uint64                                 `protobuf:"varint,2,opt,name=intervalLength,proto3" json:"intervalLength,omitempty"`
	Buckets          map[string]*MetricsMessage_UsageBucket `protobuf:"bytes,3,rep,name=buckets,proto3" json:"buckets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetricsMessage_UsageCounter) Reset() {
	*x = MetricsMessage_UsageCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ziti_metrics_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsMessage_UsageCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsMessage_UsageCounter) ProtoMessage() {}

func (x *MetricsMessage_UsageCounter) ProtoReflect() protoreflect.Message {
	mi := &file_ziti_metrics_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsMessage_UsageCounter.ProtoReflect.Descriptor instead.
func (*MetricsMessage_UsageCounter) Descriptor() ([]byte, []int) {
	return file_ziti_metrics_proto_rawDescGZIP(), []int{0, 12}
}

func (x *MetricsMessage_UsageCounter) GetIntervalStartUTC() int64 {
	if x != nil {
		return x.IntervalStartUTC
	}
	return 0
}

func (x *MetricsMessage_UsageCounter) GetIntervalLength() uint64 {
	if x != nil {
		return x.IntervalLength
	}
	return 0
}

func (x *MetricsMessage_UsageCounter) GetBuckets() map[string]*MetricsMessage_UsageBucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type MetricsMessage_UsageBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]uint64 `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Tags   map[string]string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetricsMessage_UsageBucket) Reset() {
	*x = MetricsMessage_UsageBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ziti_metrics_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsMessage_UsageBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsMessage_UsageBucket) ProtoMessage() {}

func (x *MetricsMessage_UsageBucket) ProtoReflect() protoreflect.Message {
	mi := &file_ziti_metrics_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsMessage_UsageBucket.ProtoReflect.Descriptor instead.
func (*MetricsMessage_UsageBucket) Descriptor() ([]byte, []int) {
	return file_ziti_metrics_proto_rawDescGZIP(), []int{0, 13}
}

func (x *MetricsMessage_UsageBucket) GetValues() map[string]uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *MetricsMessage_UsageBucket) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_ziti_metrics_proto protoreflect.FileDescriptor

var file_ziti_metrics_proto_rawDesc = []byte{
	0x0a, 0x12, 0x7a, 0x69, 0x74, 0x69, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x17, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x69,
	0x74, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x69,
	0x74, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x69, 0x74,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x4f, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x61, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x7a, 0x69, 0x74,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x0d, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a,
	0x0e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x0b, 0x4d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x69,
	0x74, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x68, 0x0a,
	0x0f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x74, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a,
	0x0b, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x83, 0x01, 0x0a, 0x05, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x31, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x6d, 0x31, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x35, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x35, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x31, 0x35, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x6d, 0x31, 0x35, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x61,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x61,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x1a, 0xff, 0x01, 0x0a, 0x09, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x44, 0x65, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x35, 0x30, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x70, 0x35, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x37, 0x35, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x37, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x39, 0x35,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x39, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x39, 0x39, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x39, 0x39, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x39, 0x39, 0x39, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x39, 0x39,
	0x39, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x39, 0x39, 0x39, 0x39, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x39, 0x39, 0x39, 0x39, 0x1a, 0xe1, 0x02, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x44, 0x65, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x73, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x35, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x70, 0x35, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x37, 0x35, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x70, 0x37, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x39, 0x35, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x39, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x39, 0x39,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x39, 0x39, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x39, 0x39, 0x39, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x39, 0x39, 0x39, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x39, 0x39, 0x39, 0x39, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x39, 0x39, 0x39, 0x39, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x31, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x31, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x35, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d,
	0x35, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x31, 0x35, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x31, 0x35, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x61, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6d, 0x65, 0x61, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x1a, 0x83, 0x01, 0x0a, 0x0f,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x1a, 0xcb, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x54, 0x43, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x54, 0x43,
	0x12, 0x52, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0xa0, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x55, 0x54, 0x43, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x54, 0x43, 0x12, 0x26, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x53, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x67, 0x0a, 0x0c, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x69, 0x74,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x9d, 0x02, 0x0a, 0x0b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x2a, 0x29, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0b, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0xef, 0x07, 0x42, 0x28, 0x5a,
	0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x7a, 0x69, 0x74, 0x69, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ziti_metrics_proto_rawDescOnce sync.Once
	file_ziti_metrics_proto_rawDescData = file_ziti_metrics_proto_rawDesc
)

func file_ziti_metrics_proto_rawDescGZIP() []byte {
	file_ziti_metrics_proto_rawDescOnce.Do(func() {
		file_ziti_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_ziti_metrics_proto_rawDescData)
	})
	return file_ziti_metrics_proto_rawDescData
}

var file_ziti_metrics_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ziti_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_ziti_metrics_proto_goTypes = []interface{}{
	(ContentType)(0),                       // 0: ziti.metrics.pb.ContentType
	(*MetricsMessage)(nil),                 // 1: ziti.metrics.pb.MetricsMessage
	nil,                                    // 2: ziti.metrics.pb.MetricsMessage.TagsEntry
	nil,                                    // 3: ziti.metrics.pb.MetricsMessage.IntValuesEntry
	nil,                                    // 4: ziti.metrics.pb.MetricsMessage.FloatValuesEntry
	nil,                                    // 5: ziti.metrics.pb.MetricsMessage.MetersEntry
	nil,                                    // 6: ziti.metrics.pb.MetricsMessage.HistogramsEntry
	nil,                                    // 7: ziti.metrics.pb.MetricsMessage.IntervalCountersEntry
	nil,                                    // 8: ziti.metrics.pb.MetricsMessage.TimersEntry
	(*MetricsMessage_Meter)(nil),           // 9: ziti.metrics.pb.MetricsMessage.Meter
	(*MetricsMessage_Histogram)(nil),       // 10: ziti.metrics.pb.MetricsMessage.Histogram
	(*MetricsMessage_Timer)(nil),           // 11: ziti.metrics.pb.MetricsMessage.Timer
	(*MetricsMessage_IntervalCounter)(nil), // 12: ziti.metrics.pb.MetricsMessage.IntervalCounter
	(*MetricsMessage_IntervalBucket)(nil),  // 13: ziti.metrics.pb.MetricsMessage.IntervalBucket
	(*MetricsMessage_UsageCounter)(nil),    // 14: ziti.metrics.pb.MetricsMessage.UsageCounter
	(*MetricsMessage_UsageBucket)(nil),     // 15: ziti.metrics.pb.MetricsMessage.UsageBucket
	nil,                                    // 16: ziti.metrics.pb.MetricsMessage.IntervalBucket.ValuesEntry
	nil,                                    // 17: ziti.metrics.pb.MetricsMessage.UsageCounter.BucketsEntry
	nil,                                    // 18: ziti.metrics.pb.MetricsMessage.UsageBucket.ValuesEntry
	nil,                                    // 19: ziti.metrics.pb.MetricsMessage.UsageBucket.TagsEntry
	(*timestamppb.Timestamp)(nil),          // 20: google.protobuf.Timestamp
}
var file_ziti_metrics_proto_depIdxs = []int32{
	20, // 0: ziti.metrics.pb.MetricsMessage.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 1: ziti.metrics.pb.MetricsMessage.tags:type_name -> ziti.metrics.pb.MetricsMessage.TagsEntry
	3,  // 2: ziti.metrics.pb.MetricsMessage.intValues:type_name -> ziti.metrics.pb.MetricsMessage.IntValuesEntry
	4,  // 3: ziti.metrics.pb.MetricsMessage.floatValues:type_name -> ziti.metrics.pb.MetricsMessage.FloatValuesEntry
	5,  // 4: ziti.metrics.pb.MetricsMessage.meters:type_name -> ziti.metrics.pb.MetricsMessage.MetersEntry
	6,  // 5: ziti.metrics.pb.MetricsMessage.histograms:type_name -> ziti.metrics.pb.MetricsMessage.HistogramsEntry
	7,  // 6: ziti.metrics.pb.MetricsMessage.intervalCounters:type_name -> ziti.metrics.pb.MetricsMessage.IntervalCountersEntry
	8,  // 7: ziti.metrics.pb.MetricsMessage.timers:type_name -> ziti.metrics.pb.MetricsMessage.TimersEntry
	14, // 8: ziti.metrics.pb.MetricsMessage.usageCounters:type_name -> ziti.metrics.pb.MetricsMessage.UsageCounter
	9,  // 9: ziti.metrics.pb.MetricsMessage.MetersEntry.value:type_name -> ziti.metrics.pb.MetricsMessage.Meter
	10, // 10: ziti.metrics.pb.MetricsMessage.HistogramsEntry.value:type_name -> ziti.metrics.pb.MetricsMessage.Histogram
	12, // 11: ziti.metrics.pb.MetricsMessage.IntervalCountersEntry.value:type_name -> ziti.metrics.pb.MetricsMessage.IntervalCounter
	11, // 12: ziti.metrics.pb.MetricsMessage.TimersEntry.value:type_name -> ziti.metrics.pb.MetricsMessage.Timer
	13, // 13: ziti.metrics.pb.MetricsMessage.IntervalCounter.buckets:type_name -> ziti.metrics.pb.MetricsMessage.IntervalBucket
	16, // 14: ziti.metrics.pb.MetricsMessage.IntervalBucket.values:type_name -> ziti.metrics.pb.MetricsMessage.IntervalBucket.ValuesEntry
	17, // 15: ziti.metrics.pb.MetricsMessage.UsageCounter.buckets:type_name -> ziti.metrics.pb.MetricsMessage.UsageCounter.BucketsEntry
	18, // 16: ziti.metrics.pb.MetricsMessage.UsageBucket.values:type_name -> ziti.metrics.pb.MetricsMessage.UsageBucket.ValuesEntry
	19, // 17: ziti.metrics.pb.MetricsMessage.UsageBucket.tags:type_name -> ziti.metrics.pb.MetricsMessage.UsageBucket.TagsEntry
	15, // 18: ziti.metrics.pb.MetricsMessage.UsageCounter.BucketsEntry.value:type_name -> ziti.metrics.pb.MetricsMessage.UsageBucket
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_ziti_metrics_proto_init() }
func file_ziti_metrics_proto_init() {
	if File_ziti_metrics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ziti_metrics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ziti_metrics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsMessage_Meter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ziti_metrics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsMessage_Histogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ziti_metrics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsMessage_Timer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ziti_metrics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsMessage_IntervalCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ziti_metrics_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsMessage_IntervalBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ziti_metrics_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsMessage_UsageCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ziti_metrics_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsMessage_UsageBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ziti_metrics_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ziti_metrics_proto_goTypes,
		DependencyIndexes: file_ziti_metrics_proto_depIdxs,
		EnumInfos:         file_ziti_metrics_proto_enumTypes,
		MessageInfos:      file_ziti_metrics_proto_msgTypes,
	}.Build()
	File_ziti_metrics_proto = out.File
	file_ziti_metrics_proto_rawDesc = nil
	file_ziti_metrics_proto_goTypes = nil
	file_ziti_metrics_proto_depIdxs = nil
}
