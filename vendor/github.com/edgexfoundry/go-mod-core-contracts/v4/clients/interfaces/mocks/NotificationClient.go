// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/common"

	errors "github.com/edgexfoundry/go-mod-core-contracts/v4/errors"

	mock "github.com/stretchr/testify/mock"

	requests "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/requests"

	responses "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/responses"
)

// NotificationClient is an autogenerated mock type for the NotificationClient type
type NotificationClient struct {
	mock.Mock
}

// CleanupNotifications provides a mock function with given fields: ctx
func (_m *NotificationClient) CleanupNotifications(ctx context.Context) (common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CleanupNotifications")
	}

	var r0 common.BaseResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context) (common.BaseResponse, errors.EdgeX)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) common.BaseResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(common.BaseResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) errors.EdgeX); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// CleanupNotificationsByAge provides a mock function with given fields: ctx, age
func (_m *NotificationClient) CleanupNotificationsByAge(ctx context.Context, age int) (common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, age)

	if len(ret) == 0 {
		panic("no return value specified for CleanupNotificationsByAge")
	}

	var r0 common.BaseResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, int) (common.BaseResponse, errors.EdgeX)); ok {
		return rf(ctx, age)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) common.BaseResponse); ok {
		r0 = rf(ctx, age)
	} else {
		r0 = ret.Get(0).(common.BaseResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) errors.EdgeX); ok {
		r1 = rf(ctx, age)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeleteNotificationById provides a mock function with given fields: ctx, id
func (_m *NotificationClient) DeleteNotificationById(ctx context.Context, id string) (common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationById")
	}

	var r0 common.BaseResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string) (common.BaseResponse, errors.EdgeX)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) common.BaseResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(common.BaseResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.EdgeX); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeleteNotificationByIds provides a mock function with given fields: ctx, ids
func (_m *NotificationClient) DeleteNotificationByIds(ctx context.Context, ids []string) (common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationByIds")
	}

	var r0 common.BaseResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, []string) (common.BaseResponse, errors.EdgeX)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) common.BaseResponse); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Get(0).(common.BaseResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) errors.EdgeX); ok {
		r1 = rf(ctx, ids)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeleteProcessedNotificationsByAge provides a mock function with given fields: ctx, age
func (_m *NotificationClient) DeleteProcessedNotificationsByAge(ctx context.Context, age int) (common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, age)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProcessedNotificationsByAge")
	}

	var r0 common.BaseResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, int) (common.BaseResponse, errors.EdgeX)); ok {
		return rf(ctx, age)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) common.BaseResponse); ok {
		r0 = rf(ctx, age)
	} else {
		r0 = ret.Get(0).(common.BaseResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) errors.EdgeX); ok {
		r1 = rf(ctx, age)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationById provides a mock function with given fields: ctx, id
func (_m *NotificationClient) NotificationById(ctx context.Context, id string) (responses.NotificationResponse, errors.EdgeX) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for NotificationById")
	}

	var r0 responses.NotificationResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string) (responses.NotificationResponse, errors.EdgeX)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) responses.NotificationResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(responses.NotificationResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.EdgeX); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationsByCategory provides a mock function with given fields: ctx, category, offset, limit, ack
func (_m *NotificationClient) NotificationsByCategory(ctx context.Context, category string, offset int, limit int, ack string) (responses.MultiNotificationsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, category, offset, limit, ack)

	if len(ret) == 0 {
		panic("no return value specified for NotificationsByCategory")
	}

	var r0 responses.MultiNotificationsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, string) (responses.MultiNotificationsResponse, errors.EdgeX)); ok {
		return rf(ctx, category, offset, limit, ack)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, string) responses.MultiNotificationsResponse); ok {
		r0 = rf(ctx, category, offset, limit, ack)
	} else {
		r0 = ret.Get(0).(responses.MultiNotificationsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int, string) errors.EdgeX); ok {
		r1 = rf(ctx, category, offset, limit, ack)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationsByLabel provides a mock function with given fields: ctx, label, offset, limit, ack
func (_m *NotificationClient) NotificationsByLabel(ctx context.Context, label string, offset int, limit int, ack string) (responses.MultiNotificationsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, label, offset, limit, ack)

	if len(ret) == 0 {
		panic("no return value specified for NotificationsByLabel")
	}

	var r0 responses.MultiNotificationsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, string) (responses.MultiNotificationsResponse, errors.EdgeX)); ok {
		return rf(ctx, label, offset, limit, ack)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, string) responses.MultiNotificationsResponse); ok {
		r0 = rf(ctx, label, offset, limit, ack)
	} else {
		r0 = ret.Get(0).(responses.MultiNotificationsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int, string) errors.EdgeX); ok {
		r1 = rf(ctx, label, offset, limit, ack)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationsByQueryConditions provides a mock function with given fields: ctx, offset, limit, ack, conditionReq
func (_m *NotificationClient) NotificationsByQueryConditions(ctx context.Context, offset int, limit int, ack string, conditionReq requests.GetNotificationRequest) (responses.MultiNotificationsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, offset, limit, ack, conditionReq)

	if len(ret) == 0 {
		panic("no return value specified for NotificationsByQueryConditions")
	}

	var r0 responses.MultiNotificationsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, requests.GetNotificationRequest) (responses.MultiNotificationsResponse, errors.EdgeX)); ok {
		return rf(ctx, offset, limit, ack, conditionReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, requests.GetNotificationRequest) responses.MultiNotificationsResponse); ok {
		r0 = rf(ctx, offset, limit, ack, conditionReq)
	} else {
		r0 = ret.Get(0).(responses.MultiNotificationsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, string, requests.GetNotificationRequest) errors.EdgeX); ok {
		r1 = rf(ctx, offset, limit, ack, conditionReq)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationsByStatus provides a mock function with given fields: ctx, status, offset, limit, ack
func (_m *NotificationClient) NotificationsByStatus(ctx context.Context, status string, offset int, limit int, ack string) (responses.MultiNotificationsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, status, offset, limit, ack)

	if len(ret) == 0 {
		panic("no return value specified for NotificationsByStatus")
	}

	var r0 responses.MultiNotificationsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, string) (responses.MultiNotificationsResponse, errors.EdgeX)); ok {
		return rf(ctx, status, offset, limit, ack)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, string) responses.MultiNotificationsResponse); ok {
		r0 = rf(ctx, status, offset, limit, ack)
	} else {
		r0 = ret.Get(0).(responses.MultiNotificationsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int, string) errors.EdgeX); ok {
		r1 = rf(ctx, status, offset, limit, ack)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationsBySubscriptionName provides a mock function with given fields: ctx, subscriptionName, offset, limit, ack
func (_m *NotificationClient) NotificationsBySubscriptionName(ctx context.Context, subscriptionName string, offset int, limit int, ack string) (responses.MultiNotificationsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, subscriptionName, offset, limit, ack)

	if len(ret) == 0 {
		panic("no return value specified for NotificationsBySubscriptionName")
	}

	var r0 responses.MultiNotificationsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, string) (responses.MultiNotificationsResponse, errors.EdgeX)); ok {
		return rf(ctx, subscriptionName, offset, limit, ack)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, string) responses.MultiNotificationsResponse); ok {
		r0 = rf(ctx, subscriptionName, offset, limit, ack)
	} else {
		r0 = ret.Get(0).(responses.MultiNotificationsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int, string) errors.EdgeX); ok {
		r1 = rf(ctx, subscriptionName, offset, limit, ack)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NotificationsByTimeRange provides a mock function with given fields: ctx, start, end, offset, limit, ack
func (_m *NotificationClient) NotificationsByTimeRange(ctx context.Context, start int64, end int64, offset int, limit int, ack string) (responses.MultiNotificationsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, start, end, offset, limit, ack)

	if len(ret) == 0 {
		panic("no return value specified for NotificationsByTimeRange")
	}

	var r0 responses.MultiNotificationsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int, int, string) (responses.MultiNotificationsResponse, errors.EdgeX)); ok {
		return rf(ctx, start, end, offset, limit, ack)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int, int, string) responses.MultiNotificationsResponse); ok {
		r0 = rf(ctx, start, end, offset, limit, ack)
	} else {
		r0 = ret.Get(0).(responses.MultiNotificationsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int, int, string) errors.EdgeX); ok {
		r1 = rf(ctx, start, end, offset, limit, ack)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// SendNotification provides a mock function with given fields: ctx, reqs
func (_m *NotificationClient) SendNotification(ctx context.Context, reqs []requests.AddNotificationRequest) ([]common.BaseWithIdResponse, errors.EdgeX) {
	ret := _m.Called(ctx, reqs)

	if len(ret) == 0 {
		panic("no return value specified for SendNotification")
	}

	var r0 []common.BaseWithIdResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, []requests.AddNotificationRequest) ([]common.BaseWithIdResponse, errors.EdgeX)); ok {
		return rf(ctx, reqs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []requests.AddNotificationRequest) []common.BaseWithIdResponse); ok {
		r0 = rf(ctx, reqs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.BaseWithIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []requests.AddNotificationRequest) errors.EdgeX); ok {
		r1 = rf(ctx, reqs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// UpdateNotificationAckStatusByIds provides a mock function with given fields: ctx, ack, ids
func (_m *NotificationClient) UpdateNotificationAckStatusByIds(ctx context.Context, ack bool, ids []string) (common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, ack, ids)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationAckStatusByIds")
	}

	var r0 common.BaseResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, bool, []string) (common.BaseResponse, errors.EdgeX)); ok {
		return rf(ctx, ack, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool, []string) common.BaseResponse); ok {
		r0 = rf(ctx, ack, ids)
	} else {
		r0 = ret.Get(0).(common.BaseResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool, []string) errors.EdgeX); ok {
		r1 = rf(ctx, ack, ids)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NewNotificationClient creates a new instance of NotificationClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationClient {
	mock := &NotificationClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
