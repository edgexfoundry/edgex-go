// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/common"

	errors "github.com/edgexfoundry/go-mod-core-contracts/v4/errors"

	mock "github.com/stretchr/testify/mock"

	responses "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/responses"
)

// TransmissionClient is an autogenerated mock type for the TransmissionClient type
type TransmissionClient struct {
	mock.Mock
}

// AllTransmissions provides a mock function with given fields: ctx, offset, limit
func (_m *TransmissionClient) AllTransmissions(ctx context.Context, offset int, limit int) (responses.MultiTransmissionsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for AllTransmissions")
	}

	var r0 responses.MultiTransmissionsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (responses.MultiTransmissionsResponse, errors.EdgeX)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) responses.MultiTransmissionsResponse); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiTransmissionsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeleteProcessedTransmissionsByAge provides a mock function with given fields: ctx, age
func (_m *TransmissionClient) DeleteProcessedTransmissionsByAge(ctx context.Context, age int) (common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, age)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProcessedTransmissionsByAge")
	}

	var r0 common.BaseResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, int) (common.BaseResponse, errors.EdgeX)); ok {
		return rf(ctx, age)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) common.BaseResponse); ok {
		r0 = rf(ctx, age)
	} else {
		r0 = ret.Get(0).(common.BaseResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) errors.EdgeX); ok {
		r1 = rf(ctx, age)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionById provides a mock function with given fields: ctx, id
func (_m *TransmissionClient) TransmissionById(ctx context.Context, id string) (responses.TransmissionResponse, errors.EdgeX) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for TransmissionById")
	}

	var r0 responses.TransmissionResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string) (responses.TransmissionResponse, errors.EdgeX)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) responses.TransmissionResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(responses.TransmissionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.EdgeX); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionsByNotificationId provides a mock function with given fields: ctx, id, offset, limit
func (_m *TransmissionClient) TransmissionsByNotificationId(ctx context.Context, id string, offset int, limit int) (responses.MultiTransmissionsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, id, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for TransmissionsByNotificationId")
	}

	var r0 responses.MultiTransmissionsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) (responses.MultiTransmissionsResponse, errors.EdgeX)); ok {
		return rf(ctx, id, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) responses.MultiTransmissionsResponse); ok {
		r0 = rf(ctx, id, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiTransmissionsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, id, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionsByStatus provides a mock function with given fields: ctx, status, offset, limit
func (_m *TransmissionClient) TransmissionsByStatus(ctx context.Context, status string, offset int, limit int) (responses.MultiTransmissionsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, status, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for TransmissionsByStatus")
	}

	var r0 responses.MultiTransmissionsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) (responses.MultiTransmissionsResponse, errors.EdgeX)); ok {
		return rf(ctx, status, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) responses.MultiTransmissionsResponse); ok {
		r0 = rf(ctx, status, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiTransmissionsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, status, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionsBySubscriptionName provides a mock function with given fields: ctx, subscriptionName, offset, limit
func (_m *TransmissionClient) TransmissionsBySubscriptionName(ctx context.Context, subscriptionName string, offset int, limit int) (responses.MultiTransmissionsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, subscriptionName, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for TransmissionsBySubscriptionName")
	}

	var r0 responses.MultiTransmissionsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) (responses.MultiTransmissionsResponse, errors.EdgeX)); ok {
		return rf(ctx, subscriptionName, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) responses.MultiTransmissionsResponse); ok {
		r0 = rf(ctx, subscriptionName, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiTransmissionsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, subscriptionName, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionsByTimeRange provides a mock function with given fields: ctx, start, end, offset, limit
func (_m *TransmissionClient) TransmissionsByTimeRange(ctx context.Context, start int64, end int64, offset int, limit int) (responses.MultiTransmissionsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, start, end, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for TransmissionsByTimeRange")
	}

	var r0 responses.MultiTransmissionsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int, int) (responses.MultiTransmissionsResponse, errors.EdgeX)); ok {
		return rf(ctx, start, end, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int, int) responses.MultiTransmissionsResponse); ok {
		r0 = rf(ctx, start, end, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiTransmissionsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NewTransmissionClient creates a new instance of TransmissionClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransmissionClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransmissionClient {
	mock := &TransmissionClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
