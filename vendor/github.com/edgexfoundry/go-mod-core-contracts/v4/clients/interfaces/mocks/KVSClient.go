// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	errors "github.com/edgexfoundry/go-mod-core-contracts/v4/errors"

	mock "github.com/stretchr/testify/mock"

	requests "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/requests"

	responses "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/responses"
)

// KVSClient is an autogenerated mock type for the KVSClient type
type KVSClient struct {
	mock.Mock
}

// DeleteKey provides a mock function with given fields: ctx, key
func (_m *KVSClient) DeleteKey(ctx context.Context, key string) (responses.KeysResponse, errors.EdgeX) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKey")
	}

	var r0 responses.KeysResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string) (responses.KeysResponse, errors.EdgeX)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) responses.KeysResponse); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(responses.KeysResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.EdgeX); ok {
		r1 = rf(ctx, key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeleteKeysByPrefix provides a mock function with given fields: ctx, key
func (_m *KVSClient) DeleteKeysByPrefix(ctx context.Context, key string) (responses.KeysResponse, errors.EdgeX) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKeysByPrefix")
	}

	var r0 responses.KeysResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string) (responses.KeysResponse, errors.EdgeX)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) responses.KeysResponse); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(responses.KeysResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.EdgeX); ok {
		r1 = rf(ctx, key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ListKeys provides a mock function with given fields: ctx, key
func (_m *KVSClient) ListKeys(ctx context.Context, key string) (responses.KeysResponse, errors.EdgeX) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for ListKeys")
	}

	var r0 responses.KeysResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string) (responses.KeysResponse, errors.EdgeX)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) responses.KeysResponse); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(responses.KeysResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.EdgeX); ok {
		r1 = rf(ctx, key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// UpdateValuesByKey provides a mock function with given fields: ctx, key, flatten, reqs
func (_m *KVSClient) UpdateValuesByKey(ctx context.Context, key string, flatten bool, reqs requests.UpdateKeysRequest) (responses.KeysResponse, errors.EdgeX) {
	ret := _m.Called(ctx, key, flatten, reqs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateValuesByKey")
	}

	var r0 responses.KeysResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, requests.UpdateKeysRequest) (responses.KeysResponse, errors.EdgeX)); ok {
		return rf(ctx, key, flatten, reqs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, requests.UpdateKeysRequest) responses.KeysResponse); ok {
		r0 = rf(ctx, key, flatten, reqs)
	} else {
		r0 = ret.Get(0).(responses.KeysResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool, requests.UpdateKeysRequest) errors.EdgeX); ok {
		r1 = rf(ctx, key, flatten, reqs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ValuesByKey provides a mock function with given fields: ctx, key
func (_m *KVSClient) ValuesByKey(ctx context.Context, key string) (responses.MultiKeyValueResponse, errors.EdgeX) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for ValuesByKey")
	}

	var r0 responses.MultiKeyValueResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string) (responses.MultiKeyValueResponse, errors.EdgeX)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) responses.MultiKeyValueResponse); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(responses.MultiKeyValueResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.EdgeX); ok {
		r1 = rf(ctx, key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NewKVSClient creates a new instance of KVSClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKVSClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *KVSClient {
	mock := &KVSClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
