// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	errors "github.com/edgexfoundry/go-mod-core-contracts/v4/errors"

	mock "github.com/stretchr/testify/mock"

	responses "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/responses"
)

// ScheduleActionRecordClient is an autogenerated mock type for the ScheduleActionRecordClient type
type ScheduleActionRecordClient struct {
	mock.Mock
}

// AllScheduleActionRecords provides a mock function with given fields: ctx, start, end, offset, limit
func (_m *ScheduleActionRecordClient) AllScheduleActionRecords(ctx context.Context, start int64, end int64, offset int, limit int) (responses.MultiScheduleActionRecordsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, start, end, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for AllScheduleActionRecords")
	}

	var r0 responses.MultiScheduleActionRecordsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int, int) (responses.MultiScheduleActionRecordsResponse, errors.EdgeX)); ok {
		return rf(ctx, start, end, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int, int) responses.MultiScheduleActionRecordsResponse); ok {
		r0 = rf(ctx, start, end, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiScheduleActionRecordsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// LatestScheduleActionRecordsByJobName provides a mock function with given fields: ctx, jobName
func (_m *ScheduleActionRecordClient) LatestScheduleActionRecordsByJobName(ctx context.Context, jobName string) (responses.MultiScheduleActionRecordsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, jobName)

	if len(ret) == 0 {
		panic("no return value specified for LatestScheduleActionRecordsByJobName")
	}

	var r0 responses.MultiScheduleActionRecordsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string) (responses.MultiScheduleActionRecordsResponse, errors.EdgeX)); ok {
		return rf(ctx, jobName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) responses.MultiScheduleActionRecordsResponse); ok {
		r0 = rf(ctx, jobName)
	} else {
		r0 = ret.Get(0).(responses.MultiScheduleActionRecordsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.EdgeX); ok {
		r1 = rf(ctx, jobName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ScheduleActionRecordsByJobName provides a mock function with given fields: ctx, jobName, start, end, offset, limit
func (_m *ScheduleActionRecordClient) ScheduleActionRecordsByJobName(ctx context.Context, jobName string, start int64, end int64, offset int, limit int) (responses.MultiScheduleActionRecordsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, jobName, start, end, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleActionRecordsByJobName")
	}

	var r0 responses.MultiScheduleActionRecordsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64, int, int) (responses.MultiScheduleActionRecordsResponse, errors.EdgeX)); ok {
		return rf(ctx, jobName, start, end, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64, int, int) responses.MultiScheduleActionRecordsResponse); ok {
		r0 = rf(ctx, jobName, start, end, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiScheduleActionRecordsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, int64, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, jobName, start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ScheduleActionRecordsByJobNameAndStatus provides a mock function with given fields: ctx, jobName, status, start, end, offset, limit
func (_m *ScheduleActionRecordClient) ScheduleActionRecordsByJobNameAndStatus(ctx context.Context, jobName string, status string, start int64, end int64, offset int, limit int) (responses.MultiScheduleActionRecordsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, jobName, status, start, end, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleActionRecordsByJobNameAndStatus")
	}

	var r0 responses.MultiScheduleActionRecordsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64, int, int) (responses.MultiScheduleActionRecordsResponse, errors.EdgeX)); ok {
		return rf(ctx, jobName, status, start, end, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64, int, int) responses.MultiScheduleActionRecordsResponse); ok {
		r0 = rf(ctx, jobName, status, start, end, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiScheduleActionRecordsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, jobName, status, start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ScheduleActionRecordsByStatus provides a mock function with given fields: ctx, status, start, end, offset, limit
func (_m *ScheduleActionRecordClient) ScheduleActionRecordsByStatus(ctx context.Context, status string, start int64, end int64, offset int, limit int) (responses.MultiScheduleActionRecordsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, status, start, end, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleActionRecordsByStatus")
	}

	var r0 responses.MultiScheduleActionRecordsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64, int, int) (responses.MultiScheduleActionRecordsResponse, errors.EdgeX)); ok {
		return rf(ctx, status, start, end, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64, int, int) responses.MultiScheduleActionRecordsResponse); ok {
		r0 = rf(ctx, status, start, end, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiScheduleActionRecordsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, int64, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, status, start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NewScheduleActionRecordClient creates a new instance of ScheduleActionRecordClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduleActionRecordClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScheduleActionRecordClient {
	mock := &ScheduleActionRecordClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
