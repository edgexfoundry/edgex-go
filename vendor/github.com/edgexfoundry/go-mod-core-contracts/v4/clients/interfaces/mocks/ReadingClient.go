// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/common"

	errors "github.com/edgexfoundry/go-mod-core-contracts/v4/errors"

	mock "github.com/stretchr/testify/mock"

	responses "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/responses"
)

// ReadingClient is an autogenerated mock type for the ReadingClient type
type ReadingClient struct {
	mock.Mock
}

// AllReadings provides a mock function with given fields: ctx, offset, limit
func (_m *ReadingClient) AllReadings(ctx context.Context, offset int, limit int) (responses.MultiReadingsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for AllReadings")
	}

	var r0 responses.MultiReadingsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (responses.MultiReadingsResponse, errors.EdgeX)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) responses.MultiReadingsResponse); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiReadingsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingCount provides a mock function with given fields: ctx
func (_m *ReadingClient) ReadingCount(ctx context.Context) (common.CountResponse, errors.EdgeX) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadingCount")
	}

	var r0 common.CountResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context) (common.CountResponse, errors.EdgeX)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) common.CountResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(common.CountResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) errors.EdgeX); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingCountByDeviceName provides a mock function with given fields: ctx, name
func (_m *ReadingClient) ReadingCountByDeviceName(ctx context.Context, name string) (common.CountResponse, errors.EdgeX) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for ReadingCountByDeviceName")
	}

	var r0 common.CountResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string) (common.CountResponse, errors.EdgeX)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) common.CountResponse); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(common.CountResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.EdgeX); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingsByDeviceName provides a mock function with given fields: ctx, name, offset, limit
func (_m *ReadingClient) ReadingsByDeviceName(ctx context.Context, name string, offset int, limit int) (responses.MultiReadingsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, name, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ReadingsByDeviceName")
	}

	var r0 responses.MultiReadingsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) (responses.MultiReadingsResponse, errors.EdgeX)); ok {
		return rf(ctx, name, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) responses.MultiReadingsResponse); ok {
		r0 = rf(ctx, name, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiReadingsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, name, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingsByDeviceNameAndResourceName provides a mock function with given fields: ctx, deviceName, resourceName, offset, limit
func (_m *ReadingClient) ReadingsByDeviceNameAndResourceName(ctx context.Context, deviceName string, resourceName string, offset int, limit int) (responses.MultiReadingsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, deviceName, resourceName, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ReadingsByDeviceNameAndResourceName")
	}

	var r0 responses.MultiReadingsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int) (responses.MultiReadingsResponse, errors.EdgeX)); ok {
		return rf(ctx, deviceName, resourceName, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int) responses.MultiReadingsResponse); ok {
		r0 = rf(ctx, deviceName, resourceName, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiReadingsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, deviceName, resourceName, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingsByDeviceNameAndResourceNameAndTimeRange provides a mock function with given fields: ctx, deviceName, resourceName, start, end, offset, limit
func (_m *ReadingClient) ReadingsByDeviceNameAndResourceNameAndTimeRange(ctx context.Context, deviceName string, resourceName string, start int64, end int64, offset int, limit int) (responses.MultiReadingsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, deviceName, resourceName, start, end, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ReadingsByDeviceNameAndResourceNameAndTimeRange")
	}

	var r0 responses.MultiReadingsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64, int, int) (responses.MultiReadingsResponse, errors.EdgeX)); ok {
		return rf(ctx, deviceName, resourceName, start, end, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64, int, int) responses.MultiReadingsResponse); ok {
		r0 = rf(ctx, deviceName, resourceName, start, end, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiReadingsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, deviceName, resourceName, start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingsByDeviceNameAndResourceNamesAndTimeRange provides a mock function with given fields: ctx, deviceName, resourceNames, start, end, offset, limit
func (_m *ReadingClient) ReadingsByDeviceNameAndResourceNamesAndTimeRange(ctx context.Context, deviceName string, resourceNames []string, start int64, end int64, offset int, limit int) (responses.MultiReadingsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, deviceName, resourceNames, start, end, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ReadingsByDeviceNameAndResourceNamesAndTimeRange")
	}

	var r0 responses.MultiReadingsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, int64, int64, int, int) (responses.MultiReadingsResponse, errors.EdgeX)); ok {
		return rf(ctx, deviceName, resourceNames, start, end, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, int64, int64, int, int) responses.MultiReadingsResponse); ok {
		r0 = rf(ctx, deviceName, resourceNames, start, end, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiReadingsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, int64, int64, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, deviceName, resourceNames, start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingsByResourceName provides a mock function with given fields: ctx, name, offset, limit
func (_m *ReadingClient) ReadingsByResourceName(ctx context.Context, name string, offset int, limit int) (responses.MultiReadingsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, name, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ReadingsByResourceName")
	}

	var r0 responses.MultiReadingsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) (responses.MultiReadingsResponse, errors.EdgeX)); ok {
		return rf(ctx, name, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) responses.MultiReadingsResponse); ok {
		r0 = rf(ctx, name, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiReadingsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, name, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingsByResourceNameAndTimeRange provides a mock function with given fields: ctx, name, start, end, offset, limit
func (_m *ReadingClient) ReadingsByResourceNameAndTimeRange(ctx context.Context, name string, start int64, end int64, offset int, limit int) (responses.MultiReadingsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, name, start, end, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ReadingsByResourceNameAndTimeRange")
	}

	var r0 responses.MultiReadingsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64, int, int) (responses.MultiReadingsResponse, errors.EdgeX)); ok {
		return rf(ctx, name, start, end, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64, int, int) responses.MultiReadingsResponse); ok {
		r0 = rf(ctx, name, start, end, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiReadingsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, int64, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, name, start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadingsByTimeRange provides a mock function with given fields: ctx, start, end, offset, limit
func (_m *ReadingClient) ReadingsByTimeRange(ctx context.Context, start int64, end int64, offset int, limit int) (responses.MultiReadingsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, start, end, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ReadingsByTimeRange")
	}

	var r0 responses.MultiReadingsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int, int) (responses.MultiReadingsResponse, errors.EdgeX)); ok {
		return rf(ctx, start, end, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int, int) responses.MultiReadingsResponse); ok {
		r0 = rf(ctx, start, end, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiReadingsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NewReadingClient creates a new instance of ReadingClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReadingClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReadingClient {
	mock := &ReadingClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
