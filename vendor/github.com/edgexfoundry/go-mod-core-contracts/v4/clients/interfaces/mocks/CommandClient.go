// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/common"

	errors "github.com/edgexfoundry/go-mod-core-contracts/v4/errors"

	mock "github.com/stretchr/testify/mock"

	responses "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/responses"
)

// CommandClient is an autogenerated mock type for the CommandClient type
type CommandClient struct {
	mock.Mock
}

// AllDeviceCoreCommands provides a mock function with given fields: ctx, offset, limit
func (_m *CommandClient) AllDeviceCoreCommands(ctx context.Context, offset int, limit int) (responses.MultiDeviceCoreCommandsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for AllDeviceCoreCommands")
	}

	var r0 responses.MultiDeviceCoreCommandsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (responses.MultiDeviceCoreCommandsResponse, errors.EdgeX)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) responses.MultiDeviceCoreCommandsResponse); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiDeviceCoreCommandsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceCoreCommandsByDeviceName provides a mock function with given fields: ctx, deviceName
func (_m *CommandClient) DeviceCoreCommandsByDeviceName(ctx context.Context, deviceName string) (responses.DeviceCoreCommandResponse, errors.EdgeX) {
	ret := _m.Called(ctx, deviceName)

	if len(ret) == 0 {
		panic("no return value specified for DeviceCoreCommandsByDeviceName")
	}

	var r0 responses.DeviceCoreCommandResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string) (responses.DeviceCoreCommandResponse, errors.EdgeX)); ok {
		return rf(ctx, deviceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) responses.DeviceCoreCommandResponse); ok {
		r0 = rf(ctx, deviceName)
	} else {
		r0 = ret.Get(0).(responses.DeviceCoreCommandResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.EdgeX); ok {
		r1 = rf(ctx, deviceName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// IssueGetCommandByName provides a mock function with given fields: ctx, deviceName, commandName, dsPushEvent, dsReturnEvent
func (_m *CommandClient) IssueGetCommandByName(ctx context.Context, deviceName string, commandName string, dsPushEvent bool, dsReturnEvent bool) (*responses.EventResponse, errors.EdgeX) {
	ret := _m.Called(ctx, deviceName, commandName, dsPushEvent, dsReturnEvent)

	if len(ret) == 0 {
		panic("no return value specified for IssueGetCommandByName")
	}

	var r0 *responses.EventResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, bool) (*responses.EventResponse, errors.EdgeX)); ok {
		return rf(ctx, deviceName, commandName, dsPushEvent, dsReturnEvent)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, bool) *responses.EventResponse); ok {
		r0 = rf(ctx, deviceName, commandName, dsPushEvent, dsReturnEvent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.EventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool, bool) errors.EdgeX); ok {
		r1 = rf(ctx, deviceName, commandName, dsPushEvent, dsReturnEvent)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// IssueGetCommandByNameWithQueryParams provides a mock function with given fields: ctx, deviceName, commandName, queryParams
func (_m *CommandClient) IssueGetCommandByNameWithQueryParams(ctx context.Context, deviceName string, commandName string, queryParams map[string]string) (*responses.EventResponse, errors.EdgeX) {
	ret := _m.Called(ctx, deviceName, commandName, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for IssueGetCommandByNameWithQueryParams")
	}

	var r0 *responses.EventResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) (*responses.EventResponse, errors.EdgeX)); ok {
		return rf(ctx, deviceName, commandName, queryParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) *responses.EventResponse); ok {
		r0 = rf(ctx, deviceName, commandName, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.EventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]string) errors.EdgeX); ok {
		r1 = rf(ctx, deviceName, commandName, queryParams)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// IssueSetCommandByName provides a mock function with given fields: ctx, deviceName, commandName, settings
func (_m *CommandClient) IssueSetCommandByName(ctx context.Context, deviceName string, commandName string, settings map[string]interface{}) (common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, deviceName, commandName, settings)

	if len(ret) == 0 {
		panic("no return value specified for IssueSetCommandByName")
	}

	var r0 common.BaseResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]interface{}) (common.BaseResponse, errors.EdgeX)); ok {
		return rf(ctx, deviceName, commandName, settings)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]interface{}) common.BaseResponse); ok {
		r0 = rf(ctx, deviceName, commandName, settings)
	} else {
		r0 = ret.Get(0).(common.BaseResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]interface{}) errors.EdgeX); ok {
		r1 = rf(ctx, deviceName, commandName, settings)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NewCommandClient creates a new instance of CommandClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommandClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommandClient {
	mock := &CommandClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
