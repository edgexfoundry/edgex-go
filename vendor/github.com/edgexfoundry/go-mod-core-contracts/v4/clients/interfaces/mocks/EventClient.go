// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/common"

	errors "github.com/edgexfoundry/go-mod-core-contracts/v4/errors"

	mock "github.com/stretchr/testify/mock"

	requests "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/requests"

	responses "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/responses"
)

// EventClient is an autogenerated mock type for the EventClient type
type EventClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, serviceName, req
func (_m *EventClient) Add(ctx context.Context, serviceName string, req requests.AddEventRequest) (common.BaseWithIdResponse, errors.EdgeX) {
	ret := _m.Called(ctx, serviceName, req)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 common.BaseWithIdResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, requests.AddEventRequest) (common.BaseWithIdResponse, errors.EdgeX)); ok {
		return rf(ctx, serviceName, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, requests.AddEventRequest) common.BaseWithIdResponse); ok {
		r0 = rf(ctx, serviceName, req)
	} else {
		r0 = ret.Get(0).(common.BaseWithIdResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, requests.AddEventRequest) errors.EdgeX); ok {
		r1 = rf(ctx, serviceName, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AllEvents provides a mock function with given fields: ctx, offset, limit
func (_m *EventClient) AllEvents(ctx context.Context, offset int, limit int) (responses.MultiEventsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for AllEvents")
	}

	var r0 responses.MultiEventsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (responses.MultiEventsResponse, errors.EdgeX)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) responses.MultiEventsResponse); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiEventsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeleteByAge provides a mock function with given fields: ctx, age
func (_m *EventClient) DeleteByAge(ctx context.Context, age int) (common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, age)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByAge")
	}

	var r0 common.BaseResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, int) (common.BaseResponse, errors.EdgeX)); ok {
		return rf(ctx, age)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) common.BaseResponse); ok {
		r0 = rf(ctx, age)
	} else {
		r0 = ret.Get(0).(common.BaseResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) errors.EdgeX); ok {
		r1 = rf(ctx, age)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeleteByDeviceName provides a mock function with given fields: ctx, name
func (_m *EventClient) DeleteByDeviceName(ctx context.Context, name string) (common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByDeviceName")
	}

	var r0 common.BaseResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string) (common.BaseResponse, errors.EdgeX)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) common.BaseResponse); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(common.BaseResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.EdgeX); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *EventClient) DeleteById(ctx context.Context, id string) (common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 common.BaseResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string) (common.BaseResponse, errors.EdgeX)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) common.BaseResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(common.BaseResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.EdgeX); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// EventCount provides a mock function with given fields: ctx
func (_m *EventClient) EventCount(ctx context.Context) (common.CountResponse, errors.EdgeX) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for EventCount")
	}

	var r0 common.CountResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context) (common.CountResponse, errors.EdgeX)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) common.CountResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(common.CountResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) errors.EdgeX); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// EventCountByDeviceName provides a mock function with given fields: ctx, name
func (_m *EventClient) EventCountByDeviceName(ctx context.Context, name string) (common.CountResponse, errors.EdgeX) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for EventCountByDeviceName")
	}

	var r0 common.CountResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string) (common.CountResponse, errors.EdgeX)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) common.CountResponse); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(common.CountResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.EdgeX); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// EventsByDeviceName provides a mock function with given fields: ctx, name, offset, limit
func (_m *EventClient) EventsByDeviceName(ctx context.Context, name string, offset int, limit int) (responses.MultiEventsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, name, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for EventsByDeviceName")
	}

	var r0 responses.MultiEventsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) (responses.MultiEventsResponse, errors.EdgeX)); ok {
		return rf(ctx, name, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) responses.MultiEventsResponse); ok {
		r0 = rf(ctx, name, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiEventsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, name, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// EventsByTimeRange provides a mock function with given fields: ctx, start, end, offset, limit
func (_m *EventClient) EventsByTimeRange(ctx context.Context, start int64, end int64, offset int, limit int) (responses.MultiEventsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, start, end, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for EventsByTimeRange")
	}

	var r0 responses.MultiEventsResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int, int) (responses.MultiEventsResponse, errors.EdgeX)); ok {
		return rf(ctx, start, end, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int, int) responses.MultiEventsResponse); ok {
		r0 = rf(ctx, start, end, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiEventsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NewEventClient creates a new instance of EventClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventClient {
	mock := &EventClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
