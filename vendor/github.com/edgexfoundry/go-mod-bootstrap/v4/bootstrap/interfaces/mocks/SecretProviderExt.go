// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	net "net"

	time "time"
)

// SecretProviderExt is an autogenerated mock type for the SecretProviderExt type
type SecretProviderExt struct {
	mock.Mock
}

// DeregisterSecretUpdatedCallback provides a mock function with given fields: secretName
func (_m *SecretProviderExt) DeregisterSecretUpdatedCallback(secretName string) {
	_m.Called(secretName)
}

// EnableZeroTrust provides a mock function with given fields:
func (_m *SecretProviderExt) EnableZeroTrust() {
	_m.Called()
}

// FallbackDialer provides a mock function with given fields:
func (_m *SecretProviderExt) FallbackDialer() *net.Dialer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FallbackDialer")
	}

	var r0 *net.Dialer
	if rf, ok := ret.Get(0).(func() *net.Dialer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*net.Dialer)
		}
	}

	return r0
}

// GetAccessToken provides a mock function with given fields: tokenType, serviceKey
func (_m *SecretProviderExt) GetAccessToken(tokenType string, serviceKey string) (string, error) {
	ret := _m.Called(tokenType, serviceKey)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(tokenType, serviceKey)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(tokenType, serviceKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tokenType, serviceKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricsToRegister provides a mock function with given fields:
func (_m *SecretProviderExt) GetMetricsToRegister() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetricsToRegister")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// GetSecret provides a mock function with given fields: secretName, keys
func (_m *SecretProviderExt) GetSecret(secretName string, keys ...string) (map[string]string, error) {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, secretName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...string) (map[string]string, error)); ok {
		return rf(secretName, keys...)
	}
	if rf, ok := ret.Get(0).(func(string, ...string) map[string]string); ok {
		r0 = rf(secretName, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(secretName, keys...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSelfJWT provides a mock function with given fields:
func (_m *SecretProviderExt) GetSelfJWT() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSelfJWT")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasSecret provides a mock function with given fields: secretName
func (_m *SecretProviderExt) HasSecret(secretName string) (bool, error) {
	ret := _m.Called(secretName)

	if len(ret) == 0 {
		panic("no return value specified for HasSecret")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(secretName)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(secretName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(secretName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HttpTransport provides a mock function with given fields:
func (_m *SecretProviderExt) HttpTransport() http.RoundTripper {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HttpTransport")
	}

	var r0 http.RoundTripper
	if rf, ok := ret.Get(0).(func() http.RoundTripper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.RoundTripper)
		}
	}

	return r0
}

// IsJWTValid provides a mock function with given fields: jwt
func (_m *SecretProviderExt) IsJWTValid(jwt string) (bool, error) {
	ret := _m.Called(jwt)

	if len(ret) == 0 {
		panic("no return value specified for IsJWTValid")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(jwt)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(jwt)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(jwt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsZeroTrustEnabled provides a mock function with given fields:
func (_m *SecretProviderExt) IsZeroTrustEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsZeroTrustEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListSecretNames provides a mock function with given fields:
func (_m *SecretProviderExt) ListSecretNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListSecretNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterSecretUpdatedCallback provides a mock function with given fields: secretName, callback
func (_m *SecretProviderExt) RegisterSecretUpdatedCallback(secretName string, callback func(string)) error {
	ret := _m.Called(secretName, callback)

	if len(ret) == 0 {
		panic("no return value specified for RegisterSecretUpdatedCallback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(string)) error); ok {
		r0 = rf(secretName, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecretUpdatedAtSecretName provides a mock function with given fields: secretName
func (_m *SecretProviderExt) SecretUpdatedAtSecretName(secretName string) {
	_m.Called(secretName)
}

// SecretsLastUpdated provides a mock function with given fields:
func (_m *SecretProviderExt) SecretsLastUpdated() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SecretsLastUpdated")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// SecretsUpdated provides a mock function with given fields:
func (_m *SecretProviderExt) SecretsUpdated() {
	_m.Called()
}

// SetFallbackDialer provides a mock function with given fields: dialer
func (_m *SecretProviderExt) SetFallbackDialer(dialer *net.Dialer) {
	_m.Called(dialer)
}

// SetHttpTransport provides a mock function with given fields: rt
func (_m *SecretProviderExt) SetHttpTransport(rt http.RoundTripper) {
	_m.Called(rt)
}

// StoreSecret provides a mock function with given fields: secretName, secrets
func (_m *SecretProviderExt) StoreSecret(secretName string, secrets map[string]string) error {
	ret := _m.Called(secretName, secrets)

	if len(ret) == 0 {
		panic("no return value specified for StoreSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]string) error); ok {
		r0 = rf(secretName, secrets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSecretProviderExt creates a new instance of SecretProviderExt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecretProviderExt(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecretProviderExt {
	mock := &SecretProviderExt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
