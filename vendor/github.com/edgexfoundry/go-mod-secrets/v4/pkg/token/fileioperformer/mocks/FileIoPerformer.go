// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	io "io"
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// FileIoPerformer is an autogenerated mock type for the FileIoPerformer type
type FileIoPerformer struct {
	mock.Mock
}

// MkdirAll provides a mock function with given fields: path, perm
func (_m *FileIoPerformer) MkdirAll(path string, perm os.FileMode) error {
	ret := _m.Called(path, perm)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, os.FileMode) error); ok {
		r0 = rf(path, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenFileReader provides a mock function with given fields: name, flag, perm
func (_m *FileIoPerformer) OpenFileReader(name string, flag int, perm os.FileMode) (io.Reader, error) {
	ret := _m.Called(name, flag, perm)

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func(string, int, os.FileMode) io.Reader); ok {
		r0 = rf(name, flag, perm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, os.FileMode) error); ok {
		r1 = rf(name, flag, perm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenFileWriter provides a mock function with given fields: name, flag, perm
func (_m *FileIoPerformer) OpenFileWriter(name string, flag int, perm os.FileMode) (io.WriteCloser, error) {
	ret := _m.Called(name, flag, perm)

	var r0 io.WriteCloser
	if rf, ok := ret.Get(0).(func(string, int, os.FileMode) io.WriteCloser); ok {
		r0 = rf(name, flag, perm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, os.FileMode) error); ok {
		r1 = rf(name, flag, perm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
