//
// Copyright 2019 Contributors to the Parsec project.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: psa_key_attributes.proto

package psakeyattributes

import (
	psaalgorithm "github.com/parallaxsecond/parsec-client-go/interface/operations/psaalgorithm"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeyType_EccFamily int32

const (
	KeyType_ECC_FAMILY_NONE KeyType_EccFamily = 0 // This default variant should not be used.
	KeyType_SECP_K1         KeyType_EccFamily = 1
	KeyType_SECP_R1         KeyType_EccFamily = 2
	// Deprecated: Do not use.
	KeyType_SECP_R2 KeyType_EccFamily = 3
	KeyType_SECT_K1 KeyType_EccFamily = 4 // DEPRECATED for sect163k1 curve
	KeyType_SECT_R1 KeyType_EccFamily = 5 // DEPRECATED for sect163r1 curve
	// Deprecated: Do not use.
	KeyType_SECT_R2        KeyType_EccFamily = 6
	KeyType_BRAINPOOL_P_R1 KeyType_EccFamily = 7 // DEPRECATED for brainpoolP160r1 curve
	KeyType_FRP            KeyType_EccFamily = 8
	KeyType_MONTGOMERY     KeyType_EccFamily = 9
)

// Enum value maps for KeyType_EccFamily.
var (
	KeyType_EccFamily_name = map[int32]string{
		0: "ECC_FAMILY_NONE",
		1: "SECP_K1",
		2: "SECP_R1",
		3: "SECP_R2",
		4: "SECT_K1",
		5: "SECT_R1",
		6: "SECT_R2",
		7: "BRAINPOOL_P_R1",
		8: "FRP",
		9: "MONTGOMERY",
	}
	KeyType_EccFamily_value = map[string]int32{
		"ECC_FAMILY_NONE": 0,
		"SECP_K1":         1,
		"SECP_R1":         2,
		"SECP_R2":         3,
		"SECT_K1":         4,
		"SECT_R1":         5,
		"SECT_R2":         6,
		"BRAINPOOL_P_R1":  7,
		"FRP":             8,
		"MONTGOMERY":      9,
	}
)

func (x KeyType_EccFamily) Enum() *KeyType_EccFamily {
	p := new(KeyType_EccFamily)
	*p = x
	return p
}

func (x KeyType_EccFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType_EccFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_psa_key_attributes_proto_enumTypes[0].Descriptor()
}

func (KeyType_EccFamily) Type() protoreflect.EnumType {
	return &file_psa_key_attributes_proto_enumTypes[0]
}

func (x KeyType_EccFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType_EccFamily.Descriptor instead.
func (KeyType_EccFamily) EnumDescriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{1, 0}
}

type KeyType_DhFamily int32

const (
	KeyType_RFC7919 KeyType_DhFamily = 0
)

// Enum value maps for KeyType_DhFamily.
var (
	KeyType_DhFamily_name = map[int32]string{
		0: "RFC7919",
	}
	KeyType_DhFamily_value = map[string]int32{
		"RFC7919": 0,
	}
)

func (x KeyType_DhFamily) Enum() *KeyType_DhFamily {
	p := new(KeyType_DhFamily)
	*p = x
	return p
}

func (x KeyType_DhFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType_DhFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_psa_key_attributes_proto_enumTypes[1].Descriptor()
}

func (KeyType_DhFamily) Type() protoreflect.EnumType {
	return &file_psa_key_attributes_proto_enumTypes[1]
}

func (x KeyType_DhFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType_DhFamily.Descriptor instead.
func (KeyType_DhFamily) EnumDescriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{1, 1}
}

type KeyAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyType   *KeyType   `protobuf:"bytes,1,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	KeyBits   uint32     `protobuf:"varint,2,opt,name=key_bits,json=keyBits,proto3" json:"key_bits,omitempty"`
	KeyPolicy *KeyPolicy `protobuf:"bytes,3,opt,name=key_policy,json=keyPolicy,proto3" json:"key_policy,omitempty"`
}

func (x *KeyAttributes) Reset() {
	*x = KeyAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyAttributes) ProtoMessage() {}

func (x *KeyAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyAttributes.ProtoReflect.Descriptor instead.
func (*KeyAttributes) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{0}
}

func (x *KeyAttributes) GetKeyType() *KeyType {
	if x != nil {
		return x.KeyType
	}
	return nil
}

func (x *KeyAttributes) GetKeyBits() uint32 {
	if x != nil {
		return x.KeyBits
	}
	return 0
}

func (x *KeyAttributes) GetKeyPolicy() *KeyPolicy {
	if x != nil {
		return x.KeyPolicy
	}
	return nil
}

type KeyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//	*KeyType_RawData_
	//	*KeyType_Hmac_
	//	*KeyType_Derive_
	//	*KeyType_Aes_
	//	*KeyType_Des_
	//	*KeyType_Camellia_
	//	*KeyType_Arc4_
	//	*KeyType_Chacha20_
	//	*KeyType_RsaPublicKey_
	//	*KeyType_RsaKeyPair_
	//	*KeyType_EccKeyPair_
	//	*KeyType_EccPublicKey_
	//	*KeyType_DhKeyPair_
	//	*KeyType_DhPublicKey_
	Variant isKeyType_Variant `protobuf_oneof:"variant"`
}

func (x *KeyType) Reset() {
	*x = KeyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyType) ProtoMessage() {}

func (x *KeyType) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyType.ProtoReflect.Descriptor instead.
func (*KeyType) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{1}
}

func (m *KeyType) GetVariant() isKeyType_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *KeyType) GetRawData() *KeyType_RawData {
	if x, ok := x.GetVariant().(*KeyType_RawData_); ok {
		return x.RawData
	}
	return nil
}

func (x *KeyType) GetHmac() *KeyType_Hmac {
	if x, ok := x.GetVariant().(*KeyType_Hmac_); ok {
		return x.Hmac
	}
	return nil
}

func (x *KeyType) GetDerive() *KeyType_Derive {
	if x, ok := x.GetVariant().(*KeyType_Derive_); ok {
		return x.Derive
	}
	return nil
}

func (x *KeyType) GetAes() *KeyType_Aes {
	if x, ok := x.GetVariant().(*KeyType_Aes_); ok {
		return x.Aes
	}
	return nil
}

// Deprecated: Do not use.
func (x *KeyType) GetDes() *KeyType_Des {
	if x, ok := x.GetVariant().(*KeyType_Des_); ok {
		return x.Des
	}
	return nil
}

func (x *KeyType) GetCamellia() *KeyType_Camellia {
	if x, ok := x.GetVariant().(*KeyType_Camellia_); ok {
		return x.Camellia
	}
	return nil
}

// Deprecated: Do not use.
func (x *KeyType) GetArc4() *KeyType_Arc4 {
	if x, ok := x.GetVariant().(*KeyType_Arc4_); ok {
		return x.Arc4
	}
	return nil
}

func (x *KeyType) GetChacha20() *KeyType_Chacha20 {
	if x, ok := x.GetVariant().(*KeyType_Chacha20_); ok {
		return x.Chacha20
	}
	return nil
}

func (x *KeyType) GetRsaPublicKey() *KeyType_RsaPublicKey {
	if x, ok := x.GetVariant().(*KeyType_RsaPublicKey_); ok {
		return x.RsaPublicKey
	}
	return nil
}

func (x *KeyType) GetRsaKeyPair() *KeyType_RsaKeyPair {
	if x, ok := x.GetVariant().(*KeyType_RsaKeyPair_); ok {
		return x.RsaKeyPair
	}
	return nil
}

func (x *KeyType) GetEccKeyPair() *KeyType_EccKeyPair {
	if x, ok := x.GetVariant().(*KeyType_EccKeyPair_); ok {
		return x.EccKeyPair
	}
	return nil
}

func (x *KeyType) GetEccPublicKey() *KeyType_EccPublicKey {
	if x, ok := x.GetVariant().(*KeyType_EccPublicKey_); ok {
		return x.EccPublicKey
	}
	return nil
}

func (x *KeyType) GetDhKeyPair() *KeyType_DhKeyPair {
	if x, ok := x.GetVariant().(*KeyType_DhKeyPair_); ok {
		return x.DhKeyPair
	}
	return nil
}

func (x *KeyType) GetDhPublicKey() *KeyType_DhPublicKey {
	if x, ok := x.GetVariant().(*KeyType_DhPublicKey_); ok {
		return x.DhPublicKey
	}
	return nil
}

type isKeyType_Variant interface {
	isKeyType_Variant()
}

type KeyType_RawData_ struct {
	RawData *KeyType_RawData `protobuf:"bytes,1,opt,name=raw_data,json=rawData,proto3,oneof"`
}

type KeyType_Hmac_ struct {
	// Symmetric keys
	Hmac *KeyType_Hmac `protobuf:"bytes,2,opt,name=hmac,proto3,oneof"`
}

type KeyType_Derive_ struct {
	Derive *KeyType_Derive `protobuf:"bytes,3,opt,name=derive,proto3,oneof"`
}

type KeyType_Aes_ struct {
	Aes *KeyType_Aes `protobuf:"bytes,4,opt,name=aes,proto3,oneof"`
}

type KeyType_Des_ struct {
	// Deprecated: Do not use.
	Des *KeyType_Des `protobuf:"bytes,5,opt,name=des,proto3,oneof"`
}

type KeyType_Camellia_ struct {
	Camellia *KeyType_Camellia `protobuf:"bytes,6,opt,name=camellia,proto3,oneof"`
}

type KeyType_Arc4_ struct {
	// Deprecated: Do not use.
	Arc4 *KeyType_Arc4 `protobuf:"bytes,7,opt,name=arc4,proto3,oneof"`
}

type KeyType_Chacha20_ struct {
	Chacha20 *KeyType_Chacha20 `protobuf:"bytes,8,opt,name=chacha20,proto3,oneof"`
}

type KeyType_RsaPublicKey_ struct {
	// RSA keys
	RsaPublicKey *KeyType_RsaPublicKey `protobuf:"bytes,9,opt,name=rsa_public_key,json=rsaPublicKey,proto3,oneof"`
}

type KeyType_RsaKeyPair_ struct {
	RsaKeyPair *KeyType_RsaKeyPair `protobuf:"bytes,10,opt,name=rsa_key_pair,json=rsaKeyPair,proto3,oneof"`
}

type KeyType_EccKeyPair_ struct {
	// Elliptic Curve keys
	EccKeyPair *KeyType_EccKeyPair `protobuf:"bytes,11,opt,name=ecc_key_pair,json=eccKeyPair,proto3,oneof"`
}

type KeyType_EccPublicKey_ struct {
	EccPublicKey *KeyType_EccPublicKey `protobuf:"bytes,12,opt,name=ecc_public_key,json=eccPublicKey,proto3,oneof"`
}

type KeyType_DhKeyPair_ struct {
	// Finite Field Diffie Hellman keys
	DhKeyPair *KeyType_DhKeyPair `protobuf:"bytes,13,opt,name=dh_key_pair,json=dhKeyPair,proto3,oneof"`
}

type KeyType_DhPublicKey_ struct {
	DhPublicKey *KeyType_DhPublicKey `protobuf:"bytes,14,opt,name=dh_public_key,json=dhPublicKey,proto3,oneof"`
}

func (*KeyType_RawData_) isKeyType_Variant() {}

func (*KeyType_Hmac_) isKeyType_Variant() {}

func (*KeyType_Derive_) isKeyType_Variant() {}

func (*KeyType_Aes_) isKeyType_Variant() {}

func (*KeyType_Des_) isKeyType_Variant() {}

func (*KeyType_Camellia_) isKeyType_Variant() {}

func (*KeyType_Arc4_) isKeyType_Variant() {}

func (*KeyType_Chacha20_) isKeyType_Variant() {}

func (*KeyType_RsaPublicKey_) isKeyType_Variant() {}

func (*KeyType_RsaKeyPair_) isKeyType_Variant() {}

func (*KeyType_EccKeyPair_) isKeyType_Variant() {}

func (*KeyType_EccPublicKey_) isKeyType_Variant() {}

func (*KeyType_DhKeyPair_) isKeyType_Variant() {}

func (*KeyType_DhPublicKey_) isKeyType_Variant() {}

type KeyPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyUsageFlags *UsageFlags             `protobuf:"bytes,1,opt,name=key_usage_flags,json=keyUsageFlags,proto3" json:"key_usage_flags,omitempty"`
	KeyAlgorithm  *psaalgorithm.Algorithm `protobuf:"bytes,2,opt,name=key_algorithm,json=keyAlgorithm,proto3" json:"key_algorithm,omitempty"`
}

func (x *KeyPolicy) Reset() {
	*x = KeyPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPolicy) ProtoMessage() {}

func (x *KeyPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPolicy.ProtoReflect.Descriptor instead.
func (*KeyPolicy) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{2}
}

func (x *KeyPolicy) GetKeyUsageFlags() *UsageFlags {
	if x != nil {
		return x.KeyUsageFlags
	}
	return nil
}

func (x *KeyPolicy) GetKeyAlgorithm() *psaalgorithm.Algorithm {
	if x != nil {
		return x.KeyAlgorithm
	}
	return nil
}

type UsageFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Export        bool `protobuf:"varint,1,opt,name=export,proto3" json:"export,omitempty"`
	Copy          bool `protobuf:"varint,2,opt,name=copy,proto3" json:"copy,omitempty"`
	Cache         bool `protobuf:"varint,3,opt,name=cache,proto3" json:"cache,omitempty"`
	Encrypt       bool `protobuf:"varint,4,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
	Decrypt       bool `protobuf:"varint,5,opt,name=decrypt,proto3" json:"decrypt,omitempty"`
	SignMessage   bool `protobuf:"varint,6,opt,name=sign_message,json=signMessage,proto3" json:"sign_message,omitempty"`
	VerifyMessage bool `protobuf:"varint,7,opt,name=verify_message,json=verifyMessage,proto3" json:"verify_message,omitempty"`
	SignHash      bool `protobuf:"varint,8,opt,name=sign_hash,json=signHash,proto3" json:"sign_hash,omitempty"`
	VerifyHash    bool `protobuf:"varint,9,opt,name=verify_hash,json=verifyHash,proto3" json:"verify_hash,omitempty"`
	Derive        bool `protobuf:"varint,10,opt,name=derive,proto3" json:"derive,omitempty"`
}

func (x *UsageFlags) Reset() {
	*x = UsageFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageFlags) ProtoMessage() {}

func (x *UsageFlags) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageFlags.ProtoReflect.Descriptor instead.
func (*UsageFlags) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{3}
}

func (x *UsageFlags) GetExport() bool {
	if x != nil {
		return x.Export
	}
	return false
}

func (x *UsageFlags) GetCopy() bool {
	if x != nil {
		return x.Copy
	}
	return false
}

func (x *UsageFlags) GetCache() bool {
	if x != nil {
		return x.Cache
	}
	return false
}

func (x *UsageFlags) GetEncrypt() bool {
	if x != nil {
		return x.Encrypt
	}
	return false
}

func (x *UsageFlags) GetDecrypt() bool {
	if x != nil {
		return x.Decrypt
	}
	return false
}

func (x *UsageFlags) GetSignMessage() bool {
	if x != nil {
		return x.SignMessage
	}
	return false
}

func (x *UsageFlags) GetVerifyMessage() bool {
	if x != nil {
		return x.VerifyMessage
	}
	return false
}

func (x *UsageFlags) GetSignHash() bool {
	if x != nil {
		return x.SignHash
	}
	return false
}

func (x *UsageFlags) GetVerifyHash() bool {
	if x != nil {
		return x.VerifyHash
	}
	return false
}

func (x *UsageFlags) GetDerive() bool {
	if x != nil {
		return x.Derive
	}
	return false
}

type KeyType_RawData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeyType_RawData) Reset() {
	*x = KeyType_RawData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyType_RawData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyType_RawData) ProtoMessage() {}

func (x *KeyType_RawData) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyType_RawData.ProtoReflect.Descriptor instead.
func (*KeyType_RawData) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{1, 0}
}

type KeyType_Hmac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeyType_Hmac) Reset() {
	*x = KeyType_Hmac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyType_Hmac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyType_Hmac) ProtoMessage() {}

func (x *KeyType_Hmac) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyType_Hmac.ProtoReflect.Descriptor instead.
func (*KeyType_Hmac) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{1, 1}
}

type KeyType_Derive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeyType_Derive) Reset() {
	*x = KeyType_Derive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyType_Derive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyType_Derive) ProtoMessage() {}

func (x *KeyType_Derive) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyType_Derive.ProtoReflect.Descriptor instead.
func (*KeyType_Derive) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{1, 2}
}

type KeyType_Aes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeyType_Aes) Reset() {
	*x = KeyType_Aes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyType_Aes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyType_Aes) ProtoMessage() {}

func (x *KeyType_Aes) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyType_Aes.ProtoReflect.Descriptor instead.
func (*KeyType_Aes) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{1, 3}
}

type KeyType_Des struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeyType_Des) Reset() {
	*x = KeyType_Des{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyType_Des) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyType_Des) ProtoMessage() {}

func (x *KeyType_Des) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyType_Des.ProtoReflect.Descriptor instead.
func (*KeyType_Des) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{1, 4}
}

type KeyType_Camellia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeyType_Camellia) Reset() {
	*x = KeyType_Camellia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyType_Camellia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyType_Camellia) ProtoMessage() {}

func (x *KeyType_Camellia) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyType_Camellia.ProtoReflect.Descriptor instead.
func (*KeyType_Camellia) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{1, 5}
}

type KeyType_Arc4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeyType_Arc4) Reset() {
	*x = KeyType_Arc4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyType_Arc4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyType_Arc4) ProtoMessage() {}

func (x *KeyType_Arc4) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyType_Arc4.ProtoReflect.Descriptor instead.
func (*KeyType_Arc4) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{1, 6}
}

type KeyType_Chacha20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeyType_Chacha20) Reset() {
	*x = KeyType_Chacha20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyType_Chacha20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyType_Chacha20) ProtoMessage() {}

func (x *KeyType_Chacha20) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyType_Chacha20.ProtoReflect.Descriptor instead.
func (*KeyType_Chacha20) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{1, 7}
}

type KeyType_RsaPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeyType_RsaPublicKey) Reset() {
	*x = KeyType_RsaPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyType_RsaPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyType_RsaPublicKey) ProtoMessage() {}

func (x *KeyType_RsaPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyType_RsaPublicKey.ProtoReflect.Descriptor instead.
func (*KeyType_RsaPublicKey) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{1, 8}
}

type KeyType_RsaKeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeyType_RsaKeyPair) Reset() {
	*x = KeyType_RsaKeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyType_RsaKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyType_RsaKeyPair) ProtoMessage() {}

func (x *KeyType_RsaKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyType_RsaKeyPair.ProtoReflect.Descriptor instead.
func (*KeyType_RsaKeyPair) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{1, 9}
}

type KeyType_EccKeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurveFamily KeyType_EccFamily `protobuf:"varint,1,opt,name=curve_family,json=curveFamily,proto3,enum=psa_key_attributes.KeyType_EccFamily" json:"curve_family,omitempty"`
}

func (x *KeyType_EccKeyPair) Reset() {
	*x = KeyType_EccKeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyType_EccKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyType_EccKeyPair) ProtoMessage() {}

func (x *KeyType_EccKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyType_EccKeyPair.ProtoReflect.Descriptor instead.
func (*KeyType_EccKeyPair) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{1, 10}
}

func (x *KeyType_EccKeyPair) GetCurveFamily() KeyType_EccFamily {
	if x != nil {
		return x.CurveFamily
	}
	return KeyType_ECC_FAMILY_NONE
}

type KeyType_EccPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurveFamily KeyType_EccFamily `protobuf:"varint,1,opt,name=curve_family,json=curveFamily,proto3,enum=psa_key_attributes.KeyType_EccFamily" json:"curve_family,omitempty"`
}

func (x *KeyType_EccPublicKey) Reset() {
	*x = KeyType_EccPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyType_EccPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyType_EccPublicKey) ProtoMessage() {}

func (x *KeyType_EccPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyType_EccPublicKey.ProtoReflect.Descriptor instead.
func (*KeyType_EccPublicKey) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{1, 11}
}

func (x *KeyType_EccPublicKey) GetCurveFamily() KeyType_EccFamily {
	if x != nil {
		return x.CurveFamily
	}
	return KeyType_ECC_FAMILY_NONE
}

type KeyType_DhKeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupFamily KeyType_DhFamily `protobuf:"varint,1,opt,name=group_family,json=groupFamily,proto3,enum=psa_key_attributes.KeyType_DhFamily" json:"group_family,omitempty"`
}

func (x *KeyType_DhKeyPair) Reset() {
	*x = KeyType_DhKeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyType_DhKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyType_DhKeyPair) ProtoMessage() {}

func (x *KeyType_DhKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyType_DhKeyPair.ProtoReflect.Descriptor instead.
func (*KeyType_DhKeyPair) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{1, 12}
}

func (x *KeyType_DhKeyPair) GetGroupFamily() KeyType_DhFamily {
	if x != nil {
		return x.GroupFamily
	}
	return KeyType_RFC7919
}

type KeyType_DhPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupFamily KeyType_DhFamily `protobuf:"varint,1,opt,name=group_family,json=groupFamily,proto3,enum=psa_key_attributes.KeyType_DhFamily" json:"group_family,omitempty"`
}

func (x *KeyType_DhPublicKey) Reset() {
	*x = KeyType_DhPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psa_key_attributes_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyType_DhPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyType_DhPublicKey) ProtoMessage() {}

func (x *KeyType_DhPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_psa_key_attributes_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyType_DhPublicKey.ProtoReflect.Descriptor instead.
func (*KeyType_DhPublicKey) Descriptor() ([]byte, []int) {
	return file_psa_key_attributes_proto_rawDescGZIP(), []int{1, 13}
}

func (x *KeyType_DhPublicKey) GetGroupFamily() KeyType_DhFamily {
	if x != nil {
		return x.GroupFamily
	}
	return KeyType_RFC7919
}

var File_psa_key_attributes_proto protoreflect.FileDescriptor

var file_psa_key_attributes_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x70, 0x73, 0x61, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x13,
	0x70, 0x73, 0x61, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x01, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x73, 0x61, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x42, 0x69, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x6b, 0x65, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xda, 0x0c, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x72, 0x61, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x04, 0x68, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x48, 0x6d, 0x61, 0x63, 0x48, 0x00, 0x52, 0x04, 0x68, 0x6d, 0x61, 0x63, 0x12, 0x3c, 0x0a, 0x06,
	0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x61, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x73, 0x61, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x65, 0x73, 0x48, 0x00, 0x52, 0x03, 0x61, 0x65, 0x73, 0x12,
	0x37, 0x0a, 0x03, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x03, 0x64, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x65,
	0x6c, 0x6c, 0x69, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x73, 0x61,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x6c, 0x6c, 0x69, 0x61,
	0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x6c, 0x6c, 0x69, 0x61, 0x12, 0x3a, 0x0a, 0x04,
	0x61, 0x72, 0x63, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x73, 0x61,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x72, 0x63, 0x34, 0x42, 0x02, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x04, 0x61, 0x72, 0x63, 0x34, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x63,
	0x68, 0x61, 0x32, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x73, 0x61,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x63, 0x68, 0x61, 0x32, 0x30,
	0x48, 0x00, 0x52, 0x08, 0x63, 0x68, 0x61, 0x63, 0x68, 0x61, 0x32, 0x30, 0x12, 0x50, 0x0a, 0x0e,
	0x72, 0x73, 0x61, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x52, 0x73, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x00,
	0x52, 0x0c, 0x72, 0x73, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x4a,
	0x0a, 0x0c, 0x72, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x52, 0x73, 0x61, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x48, 0x00, 0x52, 0x0a,
	0x72, 0x73, 0x61, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x4a, 0x0a, 0x0c, 0x65, 0x63,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x63,
	0x63, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x63, 0x63, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x50, 0x0a, 0x0e, 0x65, 0x63, 0x63, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x63, 0x63, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x63, 0x63, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x0b, 0x64, 0x68, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x68, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x48, 0x00, 0x52, 0x09, 0x64, 0x68, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x4d, 0x0a, 0x0d, 0x64, 0x68, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x73, 0x61, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x1a, 0x09, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x06, 0x0a, 0x04, 0x48,
	0x6d, 0x61, 0x63, 0x1a, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x1a, 0x05, 0x0a,
	0x03, 0x41, 0x65, 0x73, 0x1a, 0x05, 0x0a, 0x03, 0x44, 0x65, 0x73, 0x1a, 0x0a, 0x0a, 0x08, 0x43,
	0x61, 0x6d, 0x65, 0x6c, 0x6c, 0x69, 0x61, 0x1a, 0x06, 0x0a, 0x04, 0x41, 0x72, 0x63, 0x34, 0x1a,
	0x0a, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x63, 0x68, 0x61, 0x32, 0x30, 0x1a, 0x0e, 0x0a, 0x0c, 0x52,
	0x73, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x1a, 0x0c, 0x0a, 0x0a, 0x52,
	0x73, 0x61, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x56, 0x0a, 0x0a, 0x45, 0x63, 0x63,
	0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x76, 0x65,
	0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x70, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x63, 0x63, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x76, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x1a, 0x58, 0x0a, 0x0c, 0x45, 0x63, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x76, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x73, 0x61, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x63, 0x63, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x0b,
	0x63, 0x75, 0x72, 0x76, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x1a, 0x54, 0x0a, 0x09, 0x44,
	0x68, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x70, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x68, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x1a, 0x56, 0x0a, 0x0b, 0x44, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x47, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x44, 0x68, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x0b, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22, 0xa3, 0x01, 0x0a, 0x09, 0x45, 0x63,
	0x63, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x43, 0x43, 0x5f, 0x46,
	0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x45, 0x43, 0x50, 0x5f, 0x4b, 0x31, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x43,
	0x50, 0x5f, 0x52, 0x31, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x07, 0x53, 0x45, 0x43, 0x50, 0x5f, 0x52,
	0x32, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x43, 0x54, 0x5f,
	0x4b, 0x31, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x31, 0x10,
	0x05, 0x12, 0x0f, 0x0a, 0x07, 0x53, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x32, 0x10, 0x06, 0x1a, 0x02,
	0x08, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x52, 0x41, 0x49, 0x4e, 0x50, 0x4f, 0x4f, 0x4c, 0x5f,
	0x50, 0x5f, 0x52, 0x31, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x52, 0x50, 0x10, 0x08, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x4e, 0x54, 0x47, 0x4f, 0x4d, 0x45, 0x52, 0x59, 0x10, 0x09, 0x22,
	0x17, 0x0a, 0x08, 0x44, 0x68, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x46, 0x43, 0x37, 0x39, 0x31, 0x39, 0x10, 0x00, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x46, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x73, 0x61,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x6b, 0x65, 0x79,
	0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x73, 0x61, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0xa2, 0x02, 0x0a, 0x0a, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x63,
	0x6f, 0x70, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x42, 0x52, 0x5a,
	0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x61, 0x78, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x63, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x73, 0x61, 0x6b, 0x65, 0x79, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_psa_key_attributes_proto_rawDescOnce sync.Once
	file_psa_key_attributes_proto_rawDescData = file_psa_key_attributes_proto_rawDesc
)

func file_psa_key_attributes_proto_rawDescGZIP() []byte {
	file_psa_key_attributes_proto_rawDescOnce.Do(func() {
		file_psa_key_attributes_proto_rawDescData = protoimpl.X.CompressGZIP(file_psa_key_attributes_proto_rawDescData)
	})
	return file_psa_key_attributes_proto_rawDescData
}

var file_psa_key_attributes_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_psa_key_attributes_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_psa_key_attributes_proto_goTypes = []interface{}{
	(KeyType_EccFamily)(0),         // 0: psa_key_attributes.KeyType.EccFamily
	(KeyType_DhFamily)(0),          // 1: psa_key_attributes.KeyType.DhFamily
	(*KeyAttributes)(nil),          // 2: psa_key_attributes.KeyAttributes
	(*KeyType)(nil),                // 3: psa_key_attributes.KeyType
	(*KeyPolicy)(nil),              // 4: psa_key_attributes.KeyPolicy
	(*UsageFlags)(nil),             // 5: psa_key_attributes.UsageFlags
	(*KeyType_RawData)(nil),        // 6: psa_key_attributes.KeyType.RawData
	(*KeyType_Hmac)(nil),           // 7: psa_key_attributes.KeyType.Hmac
	(*KeyType_Derive)(nil),         // 8: psa_key_attributes.KeyType.Derive
	(*KeyType_Aes)(nil),            // 9: psa_key_attributes.KeyType.Aes
	(*KeyType_Des)(nil),            // 10: psa_key_attributes.KeyType.Des
	(*KeyType_Camellia)(nil),       // 11: psa_key_attributes.KeyType.Camellia
	(*KeyType_Arc4)(nil),           // 12: psa_key_attributes.KeyType.Arc4
	(*KeyType_Chacha20)(nil),       // 13: psa_key_attributes.KeyType.Chacha20
	(*KeyType_RsaPublicKey)(nil),   // 14: psa_key_attributes.KeyType.RsaPublicKey
	(*KeyType_RsaKeyPair)(nil),     // 15: psa_key_attributes.KeyType.RsaKeyPair
	(*KeyType_EccKeyPair)(nil),     // 16: psa_key_attributes.KeyType.EccKeyPair
	(*KeyType_EccPublicKey)(nil),   // 17: psa_key_attributes.KeyType.EccPublicKey
	(*KeyType_DhKeyPair)(nil),      // 18: psa_key_attributes.KeyType.DhKeyPair
	(*KeyType_DhPublicKey)(nil),    // 19: psa_key_attributes.KeyType.DhPublicKey
	(*psaalgorithm.Algorithm)(nil), // 20: psa_algorithm.Algorithm
}
var file_psa_key_attributes_proto_depIdxs = []int32{
	3,  // 0: psa_key_attributes.KeyAttributes.key_type:type_name -> psa_key_attributes.KeyType
	4,  // 1: psa_key_attributes.KeyAttributes.key_policy:type_name -> psa_key_attributes.KeyPolicy
	6,  // 2: psa_key_attributes.KeyType.raw_data:type_name -> psa_key_attributes.KeyType.RawData
	7,  // 3: psa_key_attributes.KeyType.hmac:type_name -> psa_key_attributes.KeyType.Hmac
	8,  // 4: psa_key_attributes.KeyType.derive:type_name -> psa_key_attributes.KeyType.Derive
	9,  // 5: psa_key_attributes.KeyType.aes:type_name -> psa_key_attributes.KeyType.Aes
	10, // 6: psa_key_attributes.KeyType.des:type_name -> psa_key_attributes.KeyType.Des
	11, // 7: psa_key_attributes.KeyType.camellia:type_name -> psa_key_attributes.KeyType.Camellia
	12, // 8: psa_key_attributes.KeyType.arc4:type_name -> psa_key_attributes.KeyType.Arc4
	13, // 9: psa_key_attributes.KeyType.chacha20:type_name -> psa_key_attributes.KeyType.Chacha20
	14, // 10: psa_key_attributes.KeyType.rsa_public_key:type_name -> psa_key_attributes.KeyType.RsaPublicKey
	15, // 11: psa_key_attributes.KeyType.rsa_key_pair:type_name -> psa_key_attributes.KeyType.RsaKeyPair
	16, // 12: psa_key_attributes.KeyType.ecc_key_pair:type_name -> psa_key_attributes.KeyType.EccKeyPair
	17, // 13: psa_key_attributes.KeyType.ecc_public_key:type_name -> psa_key_attributes.KeyType.EccPublicKey
	18, // 14: psa_key_attributes.KeyType.dh_key_pair:type_name -> psa_key_attributes.KeyType.DhKeyPair
	19, // 15: psa_key_attributes.KeyType.dh_public_key:type_name -> psa_key_attributes.KeyType.DhPublicKey
	5,  // 16: psa_key_attributes.KeyPolicy.key_usage_flags:type_name -> psa_key_attributes.UsageFlags
	20, // 17: psa_key_attributes.KeyPolicy.key_algorithm:type_name -> psa_algorithm.Algorithm
	0,  // 18: psa_key_attributes.KeyType.EccKeyPair.curve_family:type_name -> psa_key_attributes.KeyType.EccFamily
	0,  // 19: psa_key_attributes.KeyType.EccPublicKey.curve_family:type_name -> psa_key_attributes.KeyType.EccFamily
	1,  // 20: psa_key_attributes.KeyType.DhKeyPair.group_family:type_name -> psa_key_attributes.KeyType.DhFamily
	1,  // 21: psa_key_attributes.KeyType.DhPublicKey.group_family:type_name -> psa_key_attributes.KeyType.DhFamily
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_psa_key_attributes_proto_init() }
func file_psa_key_attributes_proto_init() {
	if File_psa_key_attributes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_psa_key_attributes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psa_key_attributes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psa_key_attributes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psa_key_attributes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psa_key_attributes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyType_RawData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psa_key_attributes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyType_Hmac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psa_key_attributes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyType_Derive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psa_key_attributes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyType_Aes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psa_key_attributes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyType_Des); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psa_key_attributes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyType_Camellia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psa_key_attributes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyType_Arc4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psa_key_attributes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyType_Chacha20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psa_key_attributes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyType_RsaPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psa_key_attributes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyType_RsaKeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psa_key_attributes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyType_EccKeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psa_key_attributes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyType_EccPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psa_key_attributes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyType_DhKeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psa_key_attributes_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyType_DhPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_psa_key_attributes_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*KeyType_RawData_)(nil),
		(*KeyType_Hmac_)(nil),
		(*KeyType_Derive_)(nil),
		(*KeyType_Aes_)(nil),
		(*KeyType_Des_)(nil),
		(*KeyType_Camellia_)(nil),
		(*KeyType_Arc4_)(nil),
		(*KeyType_Chacha20_)(nil),
		(*KeyType_RsaPublicKey_)(nil),
		(*KeyType_RsaKeyPair_)(nil),
		(*KeyType_EccKeyPair_)(nil),
		(*KeyType_EccPublicKey_)(nil),
		(*KeyType_DhKeyPair_)(nil),
		(*KeyType_DhPublicKey_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_psa_key_attributes_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_psa_key_attributes_proto_goTypes,
		DependencyIndexes: file_psa_key_attributes_proto_depIdxs,
		EnumInfos:         file_psa_key_attributes_proto_enumTypes,
		MessageInfos:      file_psa_key_attributes_proto_msgTypes,
	}.Build()
	File_psa_key_attributes_proto = out.File
	file_psa_key_attributes_proto_rawDesc = nil
	file_psa_key_attributes_proto_goTypes = nil
	file_psa_key_attributes_proto_depIdxs = nil
}
